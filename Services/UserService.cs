using Microsoft.EntityFrameworkCore;
using StudentUnionBot.Data;
using StudentUnionBot.Models;
using Telegram.Bot.Types;

namespace StudentUnionBot.Services;

public class UserService
{
    private readonly BotDbContext _context;
    private readonly HashSet<long> _adminIds;
    private readonly HashSet<long> _bannedUserIds;
    private readonly string _adminsFilePath;
    private readonly string _bannedFilePath;

    public UserService(BotDbContext context)
    {
        _context = context;
        _adminsFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "admins.txt");
        _bannedFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "ban.txt");
        _adminIds = LoadAdminIds();
        _bannedUserIds = LoadBannedUserIds();
    }

    private HashSet<long> LoadAdminIds()
    {
        var adminIds = new HashSet<long>();

        // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Environment Variable (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –¥–ª—è Render.com)
        var adminIdsEnv = Environment.GetEnvironmentVariable("ADMIN_IDS");
        if (!string.IsNullOrEmpty(adminIdsEnv))
        {
            Console.WriteLine("üîë Loading admin IDs from Environment Variable ADMIN_IDS");

            try
            {
                // –ü—ñ–¥—Ç—Ä–∏–º—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: "123,456,789" –∞–±–æ "123;456;789" –∞–±–æ "123 456 789"
                var adminIdStrings = adminIdsEnv
                    .Split(new char[] { ',', ';', ' ', '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries)
                    .Select(x => x.Trim())
                    .Where(x => !string.IsNullOrEmpty(x));

                foreach (var adminIdStr in adminIdStrings)
                {
                    if (long.TryParse(adminIdStr, out var adminId))
                    {
                        adminIds.Add(adminId);
                        Console.WriteLine($"‚úÖ Added admin: {adminId}");
                    }
                    else
                    {
                        Console.WriteLine($"‚ö†Ô∏è Invalid admin ID format: {adminIdStr}");
                    }
                }

                Console.WriteLine($"üîë Loaded {adminIds.Count} admin(s) from Environment Variable");
                return adminIds;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error parsing ADMIN_IDS environment variable: {ex.Message}");
                Console.WriteLine("Falling back to admins.txt file...");
            }
        }
        
        // Fallback –¥–æ —Ñ–∞–π–ª—É admins.txt –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏
        if (!System.IO.File.Exists(_adminsFilePath))
        {
            Console.WriteLine($"‚ö†Ô∏è Environment Variable ADMIN_IDS not found and admins.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: {_adminsFilePath}");
            Console.WriteLine("–î–ª—è Render.com: –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Environment Variable ADMIN_IDS (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: '123456789,987654321')");
            Console.WriteLine("–î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏: –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª admins.txt —ñ –¥–æ–¥–∞–π—Ç–µ –≤ –Ω—å–æ–≥–æ Telegram ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ (–æ–¥–∏–Ω –Ω–∞ —Ä—è–¥–æ–∫)");
            return adminIds;
        }

        try
        {
            Console.WriteLine("üìÅ Loading admin IDs from admins.txt file");
            var lines = System.IO.File.ReadAllLines(_adminsFilePath);
            foreach (var line in lines)
            {
                var trimmedLine = line.Trim();
                // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏ —Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
                if (string.IsNullOrWhiteSpace(trimmedLine) || trimmedLine.StartsWith("#"))
                    continue;

                if (long.TryParse(trimmedLine, out long adminId))
                {
                    adminIds.Add(adminId);
                }
                else
                {
                    Console.WriteLine($"‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –≤ admins.txt: {trimmedLine}");
                }
            }

            Console.WriteLine($"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {adminIds.Count} –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –∑ admins.txt");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ admins.txt: {ex.Message}");
        }

        return adminIds;
    }

    private HashSet<long> LoadBannedUserIds()
    {
        var bannedIds = new HashSet<long>();

        // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Environment Variable (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –¥–ª—è Render.com)
        var bannedIdsEnv = Environment.GetEnvironmentVariable("BANNED_USER_IDS");
        if (!string.IsNullOrEmpty(bannedIdsEnv))
        {
            Console.WriteLine("üö´ Loading banned user IDs from Environment Variable BANNED_USER_IDS");

            try
            {
                // –ü—ñ–¥—Ç—Ä–∏–º—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: "123,456,789" –∞–±–æ "123;456;789" –∞–±–æ "123 456 789"
                var bannedIdStrings = bannedIdsEnv
                    .Split(new char[] { ',', ';', ' ', '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries)
                    .Select(x => x.Trim())
                    .Where(x => !string.IsNullOrEmpty(x));

                foreach (var bannedIdStr in bannedIdStrings)
                {
                    if (long.TryParse(bannedIdStr, out var bannedId))
                    {
                        bannedIds.Add(bannedId);
                        Console.WriteLine($"üö´ Added banned user: {bannedId}");
                    }
                    else
                    {
                        Console.WriteLine($"‚ö†Ô∏è Invalid banned user ID format: {bannedIdStr}");
                    }
                }

                Console.WriteLine($"üö´ Loaded {bannedIds.Count} banned user(s) from Environment Variable");
                return bannedIds;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error parsing BANNED_USER_IDS environment variable: {ex.Message}");
                Console.WriteLine("Falling back to ban.txt file...");
            }
        }
        
        // Fallback –¥–æ —Ñ–∞–π–ª—É ban.txt –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏
        if (!System.IO.File.Exists(_bannedFilePath))
        {
            Console.WriteLine($"‚ÑπÔ∏è Environment Variable BANNED_USER_IDS not found and ban.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: {_bannedFilePath}");
            Console.WriteLine("–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π");
            return bannedIds;
        }

        try
        {
            Console.WriteLine("üìÅ Loading banned user IDs from ban.txt file");
            var lines = System.IO.File.ReadAllLines(_bannedFilePath);
            foreach (var line in lines)
            {
                var trimmedLine = line.Trim();
                // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏ —Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
                if (string.IsNullOrWhiteSpace(trimmedLine) || trimmedLine.StartsWith("#"))
                    continue;

                if (long.TryParse(trimmedLine, out long bannedId))
                {
                    bannedIds.Add(bannedId);
                }
                else
                {
                    Console.WriteLine($"‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –≤ ban.txt: {trimmedLine}");
                }
            }

            if (bannedIds.Count > 0)
            {
                Console.WriteLine($"üö´ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {bannedIds.Count} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ ban.txt");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ ban.txt: {ex.Message}");
        }

        return bannedIds;
    }

    public async Task<BotUser> EnsureUserCreatedAsync(Telegram.Bot.Types.User telegramUser)
    {
        var user = await _context.Users.FindAsync(telegramUser.Id);
        
        if (user == null)
        {
            user = new BotUser
            {
                TelegramId = telegramUser.Id,
                Username = telegramUser.Username,
                FirstName = telegramUser.FirstName,
                LastName = telegramUser.LastName,
                IsActive = true,
                JoinedAt = DateTime.UtcNow
            };
            
            _context.Users.Add(user);
        }
        else
        {
            // Update user info in case it changed
            user.Username = telegramUser.Username;
            user.FirstName = telegramUser.FirstName;
            user.LastName = telegramUser.LastName;
            user.IsActive = true;
            
            _context.Users.Update(user);
        }

        await _context.SaveChangesAsync();
        return user;
    }

    public bool IsAdmin(long telegramId)
    {
        return _adminIds.Contains(telegramId);
    }

    public Task<bool> IsAdminAsync(long telegramId)
    {
        return Task.FromResult(IsAdmin(telegramId));
    }

    public List<long> GetAllAdminIds()
    {
        return _adminIds.ToList();
    }

    public Task<List<long>> GetAdminIdsAsync()
    {
        return Task.FromResult(_adminIds.ToList());
    }

    public async Task<BotUser?> GetUserByIdAsync(long telegramId)
    {
        return await _context.Users.FindAsync(telegramId);
    }

    public void ReloadAdmins()
    {
        _adminIds.Clear();
        var newAdmins = LoadAdminIds();
        foreach (var adminId in newAdmins)
        {
            _adminIds.Add(adminId);
        }
    }

    public bool IsBanned(long telegramId)
    {
        return _bannedUserIds.Contains(telegramId);
    }

    public Task<bool> IsBannedAsync(long telegramId)
    {
        return Task.FromResult(IsBanned(telegramId));
    }

    public void ReloadBannedUsers()
    {
        _bannedUserIds.Clear();
        var newBanned = LoadBannedUserIds();
        foreach (var bannedId in newBanned)
        {
            _bannedUserIds.Add(bannedId);
        }
    }

    /// <summary>
    /// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    /// </summary>
    public async Task<Dictionary<string, int>> GetUserStatisticsAsync()
    {
        var totalUsers = await _context.Users.CountAsync();
        var activeUsers = await _context.Users.CountAsync(u => u.IsActive);
        var usersWithProfile = await _context.Users.CountAsync(u => u.ProfileUpdatedAt.HasValue);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—É—Ä—Å–∞–º
        var usersByCourse = new Dictionary<int, int>();
        for (int i = 1; i <= 6; i++)
        {
            usersByCourse[i] = await _context.Users.CountAsync(u => u.Course == i);
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞—Ö
        var usersByFaculty = await _context.Users
            .Where(u => !string.IsNullOrEmpty(u.Faculty))
            .GroupBy(u => u.Faculty)
            .Select(g => new { Faculty = g.Key, Count = g.Count() })
            .ToListAsync();

        var stats = new Dictionary<string, int>
        {
            ["total"] = totalUsers,
            ["active"] = activeUsers,
            ["withProfile"] = usersWithProfile,
            ["course1"] = usersByCourse.GetValueOrDefault(1, 0),
            ["course2"] = usersByCourse.GetValueOrDefault(2, 0),
            ["course3"] = usersByCourse.GetValueOrDefault(3, 0),
            ["course4"] = usersByCourse.GetValueOrDefault(4, 0),
            ["course5"] = usersByCourse.GetValueOrDefault(5, 0),
            ["course6"] = usersByCourse.GetValueOrDefault(6, 0)
        };

        // –î–æ–¥–∞—î–º–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∏
        foreach (var faculty in usersByFaculty)
        {
            stats[$"faculty_{faculty.Faculty}"] = faculty.Count;
        }

        return stats;
    }

    /// <summary>
    /// –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É CSV —Ñ–æ—Ä–º–∞—Ç
    /// </summary>
    public async Task<string> ExportUsersToCsvAsync()
    {
        var users = await _context.Users
            .OrderBy(u => u.JoinedAt)
            .ToListAsync();

        var csv = new System.Text.StringBuilder();
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏
        csv.AppendLine("ID,Username,FirstName,LastName,FullName,Faculty,Course,Group,Email,JoinedAt,IsActive,ProfileUpdated");

        // –î–∞–Ω—ñ
        foreach (var user in users)
        {
            csv.AppendLine($"{user.TelegramId}," +
                          $"\"{EscapeCsvField(user.Username ?? "")}\"," +
                          $"\"{EscapeCsvField(user.FirstName ?? "")}\"," +
                          $"\"{EscapeCsvField(user.LastName ?? "")}\"," +
                          $"\"{EscapeCsvField(user.FullName ?? "")}\"," +
                          $"\"{EscapeCsvField(user.Faculty ?? "")}\"," +
                          $"{user.Course?.ToString() ?? ""}," +
                          $"\"{EscapeCsvField(user.Group ?? "")}\"," +
                          $"\"{EscapeCsvField(user.Email ?? "")}\"," +
                          $"{user.JoinedAt:yyyy-MM-dd HH:mm:ss}," +
                          $"{(user.IsActive ? "Yes" : "No")}," +
                          $"{(user.ProfileUpdatedAt.HasValue ? user.ProfileUpdatedAt.Value.ToString("yyyy-MM-dd HH:mm:ss") : "")}");
        }

        return csv.ToString();
    }

    /// <summary>
    /// –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É CSV —Ñ–æ—Ä–º–∞—Ç –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º UTF-8 –∫–æ–¥—É–≤–∞–Ω–Ω—è–º
    /// </summary>
    public async Task<byte[]> ExportUsersToCsvBytesAsync()
    {
        var csvContent = await ExportUsersToCsvAsync();
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ UTF-8 –∑ BOM –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
        var encoding = new System.Text.UTF8Encoding(true); // true = includeByteOrderMark
        return encoding.GetBytes(csvContent);
    }

    /// <summary>
    /// –ï–∫—Ä–∞–Ω—É–≤–∞—Ç–∏ –ø–æ–ª–µ CSV (–∑–∞–º—ñ–Ω–∏—Ç–∏ –ª–∞–ø–∫–∏ –Ω–∞ –ø–æ–¥–≤—ñ–π–Ω—ñ –ª–∞–ø–∫–∏)
    /// </summary>
    private static string EscapeCsvField(string field)
    {
        if (string.IsNullOrEmpty(field))
            return field;

        // –Ø–∫—â–æ –ø–æ–ª–µ –º—ñ—Å—Ç–∏—Ç—å –ª–∞–ø–∫–∏, –∑–∞–º—ñ–Ω—é—î–º–æ —ó—Ö –Ω–∞ –ø–æ–¥–≤—ñ–π–Ω—ñ –ª–∞–ø–∫–∏
        return field.Replace("\"", "\"\"");
    }

    /// <summary>
    /// –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤ –∑ Environment Variables –∞–±–æ —Ñ–∞–π–ª—É
    /// </summary>
    public void ReloadAdminIds()
    {
        _adminIds.Clear();
        var newAdminIds = LoadAdminIds();
        foreach (var adminId in newAdminIds)
        {
            _adminIds.Add(adminId);
        }
        Console.WriteLine($"üîÑ Admin IDs reloaded: {_adminIds.Count} admin(s)");
    }

    /// <summary>
    /// –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ Environment Variables –∞–±–æ —Ñ–∞–π–ª—É
    /// </summary>
    public void ReloadBannedUserIds()
    {
        _bannedUserIds.Clear();
        var newBannedIds = LoadBannedUserIds();
        foreach (var bannedId in newBannedIds)
        {
            _bannedUserIds.Add(bannedId);
        }
        Console.WriteLine($"üîÑ Banned user IDs reloaded: {_bannedUserIds.Count} banned user(s)");
    }

    /// <summary>
    /// –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞ –¥–∏–Ω–∞–º—ñ—á–Ω–æ (—Ç—ñ–ª—å–∫–∏ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π —Å–µ—Å—ñ—ó)
    /// </summary>
    public bool AddAdminTemporarily(long telegramId)
    {
        if (_adminIds.Add(telegramId))
        {
            Console.WriteLine($"‚úÖ Temporarily added admin: {telegramId}");
            return true;
        }
        return false; // –í–∂–µ —ñ—Å–Ω—É—î
    }

    /// <summary>
    /// –í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞ –¥–∏–Ω–∞–º—ñ—á–Ω–æ (—Ç—ñ–ª—å–∫–∏ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π —Å–µ—Å—ñ—ó)
    /// </summary>
    public bool RemoveAdminTemporarily(long telegramId)
    {
        if (_adminIds.Remove(telegramId))
        {
            Console.WriteLine($"‚ùå Temporarily removed admin: {telegramId}");
            return true;
        }
        return false; // –ù–µ —ñ—Å–Ω—É—î
    }
}