using StudentUnionBot.Domain.Interfaces;
using StudentUnionBot.Domain.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace StudentUnionBot.Presentation.Bot.Keyboards;

/// <summary>
/// –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ–∞–±—Ä–∏–∫–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä –∑ Card-Based Layout —Ç–∞ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è–º —Ñ—É–Ω–∫—Ü—ñ–π
/// –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º UI/UX –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥ 11.10.2025
/// </summary>
public static class ImprovedKeyboardFactory
{
    /// <summary>
    /// –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ Card-Based Layout —Ç–∞ –≤—ñ–∑—É–∞–ª—å–Ω–∏–º –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è–º
    /// </summary>
    public static async Task<InlineKeyboardMarkup> GetImprovedMainMenuKeyboardAsync(
        ILocalizationService localization, 
        Language userLanguage, 
        bool isAdmin = false,
        int unreadAppealsCount = 0,
        int unreadNewsCount = 0,
        int upcomingEventsCount = 0,
        CancellationToken cancellationToken = default)
    {
        var buttons = new List<InlineKeyboardButton[]>();

        // ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
        // ‚ïë  üö® –®–í–ò–î–ö–Ü –î–Ü–á            ‚ïë
        // ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        buttons.Add(new[] 
        { 
            InlineKeyboardButton.WithCallbackData(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ üö® –®–í–ò–î–ö–Ü –î–Ü–á ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", 
                "noop") 
        });

        var createAppealText = await localization.GetLocalizedStringAsync("button.create_appeal", userLanguage, cancellationToken);
        var myAppealsText = await localization.GetLocalizedStringAsync("button.my_appeals", userLanguage, cancellationToken);
        
        // –î–æ–¥–∞—î–º–æ badge –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö
        if (unreadAppealsCount > 0)
        {
            myAppealsText += $" ({unreadAppealsCount})";
        }

        buttons.Add(new[]
        {
            InlineKeyboardButton.WithCallbackData($"‚ûï {createAppealText}", "appeal_create"),
            InlineKeyboardButton.WithCallbackData($"üìã {myAppealsText}", "appeal_list")
        });

        // ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
        // ‚ïë  üìö –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø            ‚ïë
        // ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        buttons.Add(new[] 
        { 
            InlineKeyboardButton.WithCallbackData(
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ üìö –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", 
                "noop") 
        });

        var newsText = await localization.GetLocalizedStringAsync("button.news", userLanguage, cancellationToken);
        var eventsText = await localization.GetLocalizedStringAsync("button.events", userLanguage, cancellationToken);
        var partnersText = await localization.GetLocalizedStringAsync("button.partners", userLanguage, cancellationToken);

        if (unreadNewsCount > 0)
        {
            newsText += $" ({unreadNewsCount} üÜï)";
        }
        
        if (upcomingEventsCount > 0)
        {
            eventsText += $" ({upcomingEventsCount})";
        }

        buttons.Add(new[]
        {
            InlineKeyboardButton.WithCallbackData($"üì∞ {newsText}", "news_list"),
            InlineKeyboardButton.WithCallbackData($"üìÖ {eventsText}", "events_list")
        });

        buttons.Add(new[]
        {
            InlineKeyboardButton.WithCallbackData($"ü§ù {partnersText}", "partners_list")
        });

        // ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
        // ‚ïë  ‚öôÔ∏è –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø          ‚ïë
        // ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        buttons.Add(new[] 
        { 
            InlineKeyboardButton.WithCallbackData(
                "‚îÅ‚îÅ‚îÅ ‚öôÔ∏è –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ‚îÅ‚îÅ‚îÅ", 
                "noop") 
        });

        var profileText = await localization.GetLocalizedStringAsync("button.profile", userLanguage, cancellationToken);
        var contactsText = await localization.GetLocalizedStringAsync("button.contacts", userLanguage, cancellationToken);
        var helpText = await localization.GetLocalizedStringAsync("button.help", userLanguage, cancellationToken);

        buttons.Add(new[]
        {
            InlineKeyboardButton.WithCallbackData($"üë§ {profileText}", "profile_view"),
            InlineKeyboardButton.WithCallbackData($"üìû {contactsText}", "contacts_list")
        });

        buttons.Add(new[]
        {
            InlineKeyboardButton.WithCallbackData($"‚ùì {helpText}", "help")
        });

        // –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
        if (isAdmin)
        {
            var adminText = await localization.GetLocalizedStringAsync("button.admin_panel", userLanguage, cancellationToken);
            buttons.Add(new[]
            {
                InlineKeyboardButton.WithCallbackData($"üîß {adminText}", "admin_panel")
            });
        }

        return new InlineKeyboardMarkup(buttons);
    }

    /// <summary>
    /// –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–≤–µ—Ä–Ω–µ–Ω—å –∑ –æ–ø–∏—Å–æ–º (2-–µ—Ç–∞–ø–Ω–∏–π –≤–∏–±—ñ—Ä)
    /// </summary>
    public static async Task<InlineKeyboardMarkup> GetImprovedAppealCategoriesKeyboardAsync(
        ILocalizationService localization, 
        Language userLanguage, 
        CancellationToken cancellationToken = default)
    {
        var buttons = new List<InlineKeyboardButton[]>
        {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            new[] 
            { 
                InlineKeyboardButton.WithCallbackData(
                    "üìù –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:", 
                    "noop") 
            },
            
            // –§—ñ–Ω–∞–Ω—Å–∏
            new[]
            {
                InlineKeyboardButton.WithCallbackData(
                    "üí∞ –§—ñ–Ω–∞–Ω—Å–∏ —Ç–∞ —Å—Ç–∏–ø–µ–Ω–¥—ñ—ó", 
                    "appeal_cat_1")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData(
                    "   –°—Ç–∏–ø–µ–Ω–¥—ñ—ó, –≤–∏–ø–ª–∞—Ç–∏, –ø—ñ–ª—å–≥–∏", 
                    "appeal_cat_1_desc")
            },
            
            // –ì—É—Ä—Ç–æ–∂–∏—Ç–æ–∫
            new[]
            {
                InlineKeyboardButton.WithCallbackData(
                    "üè† –ì—É—Ä—Ç–æ–∂–∏—Ç–æ–∫", 
                    "appeal_cat_2")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData(
                    "   –ü–æ—Å–µ–ª–µ–Ω–Ω—è, —Ä–µ–º–æ–Ω—Ç, –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è", 
                    "appeal_cat_2_desc")
            },
            
            // –ù–∞–≤—á–∞–Ω–Ω—è
            new[]
            {
                InlineKeyboardButton.WithCallbackData(
                    "üéì –ù–∞–≤—á–∞–Ω–Ω—è", 
                    "appeal_cat_3")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData(
                    "   –†–æ–∑–∫–ª–∞–¥, –µ–∫–∑–∞–º–µ–Ω–∏, –∞–∫–∞–¥–µ–º—ñ—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", 
                    "appeal_cat_3_desc")
            },
            
            // –ü–æ–¥—ñ—ó
            new[]
            {
                InlineKeyboardButton.WithCallbackData(
                    "üéâ –ü–æ–¥—ñ—ó —Ç–∞ –¥–æ–∑–≤—ñ–ª–ª—è", 
                    "appeal_cat_4")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData(
                    "   –ó–∞—Ö–æ–¥–∏, –∫—É–ª—å—Ç—É—Ä–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞", 
                    "appeal_cat_4_desc")
            },
            
            // –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
            new[]
            {
                InlineKeyboardButton.WithCallbackData(
                    "üí° –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ç–∞ —Å–∫–∞—Ä–≥–∏", 
                    "appeal_cat_5")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData(
                    "   –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –ø—Ä–æ—Ñ–∫–æ–º—É", 
                    "appeal_cat_5_desc")
            },
            
            // –Ü–Ω—à–µ
            new[]
            {
                InlineKeyboardButton.WithCallbackData(
                    "‚ùì –Ü–Ω—à–µ", 
                    "appeal_cat_6")
            }
        };

        var backText = await localization.GetLocalizedStringAsync("button.back", userLanguage, cancellationToken);
        buttons.Add(new[]
        {
            InlineKeyboardButton.WithCallbackData($"‚¨ÖÔ∏è {backText}", "back_to_main")
        });

        return new InlineKeyboardMarkup(buttons);
    }

    /// <summary>
    /// –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è –∑ preview –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    /// </summary>
    public static async Task<InlineKeyboardMarkup> GetImprovedPaginationKeyboardAsync(
        ILocalizationService localization,
        Language userLanguage,
        string dataPrefix,
        int currentPage,
        int totalPages,
        int totalItems,
        string? backCallback = null,
        bool hasActiveFilters = false,
        CancellationToken cancellationToken = default)
    {
        var buttons = new List<InlineKeyboardButton[]>();

        // –§—ñ–ª—å—Ç—Ä–∏ (—è–∫—â–æ —î)
        if (hasActiveFilters)
        {
            var filtersText = await localization.GetLocalizedStringAsync("button.filters", userLanguage, cancellationToken);
            buttons.Add(new[]
            {
                InlineKeyboardButton.WithCallbackData($"üîç {filtersText} (–∞–∫—Ç–∏–≤–Ω–æ ‚úÖ)", $"{dataPrefix}_filters_menu"),
                InlineKeyboardButton.WithCallbackData("‚ùå –°–∫–∏–Ω—É—Ç–∏", $"{dataPrefix}_clear_filters")
            });
        }
        else
        {
            var filtersText = await localization.GetLocalizedStringAsync("button.filters", userLanguage, cancellationToken);
            buttons.Add(new[]
            {
                InlineKeyboardButton.WithCallbackData($"üîç {filtersText}", $"{dataPrefix}_filters_menu")
            });
        }

        // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
        var navButtons = new List<InlineKeyboardButton>();

        if (currentPage > 1)
        {
            navButtons.Add(InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è", $"{dataPrefix}_page_{currentPage - 1}"));
        }

        navButtons.Add(InlineKeyboardButton.WithCallbackData(
            $"üìÑ {currentPage}/{totalPages} ({totalItems} –≤—Å—å–æ–≥–æ)", 
            "noop"));

        if (currentPage < totalPages)
        {
            navButtons.Add(InlineKeyboardButton.WithCallbackData("‚ñ∂Ô∏è", $"{dataPrefix}_page_{currentPage + 1}"));
        }

        buttons.Add(navButtons.ToArray());

        // –ù–∞–∑–∞–¥
        if (!string.IsNullOrEmpty(backCallback))
        {
            var backText = await localization.GetLocalizedStringAsync("button.back", userLanguage, cancellationToken);
            buttons.Add(new[]
            {
                InlineKeyboardButton.WithCallbackData($"‚¨ÖÔ∏è {backText}", backCallback)
            });
        }

        return new InlineKeyboardMarkup(buttons);
    }

    /// <summary>
    /// Breadcrumb navigation –∑ history stack
    /// </summary>
    public static async Task<InlineKeyboardMarkup> GetBreadcrumbNavigationKeyboardAsync(
        ILocalizationService localization,
        Language userLanguage,
        List<(string title, string callback)> breadcrumbPath,
        CancellationToken cancellationToken = default)
    {
        var buttons = new List<InlineKeyboardButton[]>();

        // –î–æ–¥–∞—î–º–æ –∫–æ–∂–µ–Ω —Ä—ñ–≤–µ–Ω—å breadcrumb —è–∫ –∫–Ω–æ–ø–∫—É
        if (breadcrumbPath.Count > 1)
        {
            var breadcrumbButtons = new List<InlineKeyboardButton>();
            
            foreach (var (title, callback) in breadcrumbPath.Take(breadcrumbPath.Count - 1))
            {
                breadcrumbButtons.Add(InlineKeyboardButton.WithCallbackData(title, callback));
            }

            // –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Ä—è–¥–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
            for (int i = 0; i < breadcrumbButtons.Count; i += 2)
            {
                var row = breadcrumbButtons.Skip(i).Take(2).ToArray();
                buttons.Add(row);
            }
        }

        // –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑–∞–≤–∂–¥–∏ –¥–æ—Å—Ç—É–ø–Ω–µ
        var mainMenuText = await localization.GetLocalizedStringAsync("button.main_menu", userLanguage, cancellationToken);
        buttons.Add(new[]
        {
            InlineKeyboardButton.WithCallbackData($"üè† {mainMenuText}", "back_to_main")
        });

        return new InlineKeyboardMarkup(buttons);
    }

    /// <summary>
    /// Loading skeleton –¥–ª—è –ø–æ–∫–∞–∑—É –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    /// </summary>
    public static string GetLoadingSkeleton(string title, int rowsCount = 3)
    {
        var skeleton = $"{title}\n\n";
        skeleton += "‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...\n\n";
        
        for (int i = 0; i < rowsCount; i++)
        {
            skeleton += "‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú\n";
            skeleton += "‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú\n\n";
        }

        return skeleton;
    }

    /// <summary>
    /// –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–π
    /// </summary>
    public static async Task<InlineKeyboardMarkup> GetContextualHelpKeyboardAsync(
        ILocalizationService localization,
        Language userLanguage,
        string featureName,
        string actionCallback,
        CancellationToken cancellationToken = default)
    {
        var understandText = await localization.GetLocalizedStringAsync("button.understand", userLanguage, cancellationToken);
        var backText = await localization.GetLocalizedStringAsync("button.back", userLanguage, cancellationToken);

        return new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData($"‚úÖ {understandText}", actionCallback),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData($"‚¨ÖÔ∏è {backText}", "back_to_main")
            }
        });
    }

    /// <summary>
    /// Tutorial steps –¥–ª—è –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    /// </summary>
    public static async Task<InlineKeyboardMarkup> GetTutorialKeyboardAsync(
        ILocalizationService localization,
        Language userLanguage,
        int currentStep,
        int totalSteps,
        CancellationToken cancellationToken = default)
    {
        var nextText = await localization.GetLocalizedStringAsync("button.next", userLanguage, cancellationToken);
        var skipText = await localization.GetLocalizedStringAsync("button.skip", userLanguage, cancellationToken);
        var finishText = await localization.GetLocalizedStringAsync("button.finish", userLanguage, cancellationToken);

        var buttons = new List<InlineKeyboardButton[]>();

        if (currentStep < totalSteps)
        {
            buttons.Add(new[]
            {
                InlineKeyboardButton.WithCallbackData($"‚û°Ô∏è {nextText}", $"tutorial_step_{currentStep + 1}"),
                InlineKeyboardButton.WithCallbackData($"‚è≠Ô∏è {skipText}", "tutorial_skip")
            });
        }
        else
        {
            buttons.Add(new[]
            {
                InlineKeyboardButton.WithCallbackData($"‚úÖ {finishText}", "tutorial_finish")
            });
        }

        return new InlineKeyboardMarkup(buttons);
    }

    /// <summary>
    /// –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    /// </summary>
    public static InlineKeyboardMarkup GetImprovedMainMenuKeyboard(
        ILocalizationService localization, 
        Language userLanguage, 
        bool isAdmin = false,
        int unreadAppealsCount = 0,
        int unreadNewsCount = 0,
        int upcomingEventsCount = 0)
    {
        return GetImprovedMainMenuKeyboardAsync(
            localization, 
            userLanguage, 
            isAdmin, 
            unreadAppealsCount, 
            unreadNewsCount, 
            upcomingEventsCount).GetAwaiter().GetResult();
    }

    /// <summary>
    /// –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è –ø–æ–∫—Ä–∞—â–µ–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–≤–µ—Ä–Ω–µ–Ω—å
    /// </summary>
    public static InlineKeyboardMarkup GetImprovedAppealCategoriesKeyboard(
        ILocalizationService localization, 
        Language userLanguage)
    {
        return GetImprovedAppealCategoriesKeyboardAsync(localization, userLanguage).GetAwaiter().GetResult();
    }
}
