using MediatR;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using StudentUnionBot.Application.Common.Interfaces;
using StudentUnionBot.Application.Users.Commands.RegisterUser;
using StudentUnionBot.Application.Users.Commands.SendVerificationEmail;
using StudentUnionBot.Application.Users.Commands.VerifyEmail;
using StudentUnionBot.Application.Users.Commands.UpdateProfile;
using StudentUnionBot.Application.Users.Commands.ChangeLanguage;
using StudentUnionBot.Application.Users.Queries.GetUserByTelegramId;
using StudentUnionBot.Domain.Enums;
using StudentUnionBot.Presentation.Bot.Handlers.Common;
using StudentUnionBot.Presentation.Bot.Handlers.Interfaces;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using TelegramUser = Telegram.Bot.Types.User;

namespace StudentUnionBot.Presentation.Bot.Handlers.User;

/// <summary>
/// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π: —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è, –ø—Ä–æ—Ñ—ñ–ª—å, –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è email
/// </summary>
public class UserHandler : BaseHandler, IUserHandler
{
    public UserHandler(
        IServiceScopeFactory scopeFactory,
        ILogger<UserHandler> logger,
        IMediator mediator)
        : base(scopeFactory, logger, mediator)
    {
    }

    /// <summary>
    /// –†–µ—î—Å—Ç—Ä—É—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    /// </summary>
    public async Task RegisterOrUpdateUserAsync(TelegramUser? user, CancellationToken cancellationToken)
    {
        if (user == null) return;

        try
        {
            var command = new RegisterUserCommand
            {
                TelegramId = user.Id,
                Username = user.Username,
                FirstName = user.FirstName,
                LastName = user.LastName,
                Language = Language.Ukrainian
            };

            await _mediator.Send(command, cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", user.Id);
        }
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è email –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    /// </summary>
    public async Task HandleEmailInputAsync(
        ITelegramBotClient botClient,
        Message message,
        CancellationToken cancellationToken)
    {
        var userId = message.From!.Id;
        var email = message.Text?.Trim();

        // –ë–∞–∑–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è email
        if (string.IsNullOrWhiteSpace(email) || !email.Contains("@") || email.Length < 5)
        {
            await SendErrorMessageAsync(
                botClient,
                message.Chat.Id,
                "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∏.\n\n" +
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω—É email –∞–¥—Ä–µ—Å—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: user@vnmu.edu.ua)",
                cancellationToken);
            return;
        }

        if (email.Length > 100)
        {
            await SendErrorMessageAsync(
                botClient,
                message.Chat.Id,
                "‚ùå Email –∞–¥—Ä–µ—Å–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª—ñ–≤)",
                cancellationToken);
            return;
        }

        try
        {
            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∏–π email —á–µ—Ä–µ–∑ MediatR
            var command = new SendVerificationEmailCommand
            {
                TelegramId = userId,
                Email = email
            };

            var result = await _mediator.Send(command, cancellationToken);

            if (result.IsSuccess)
            {
                using var scope = _scopeFactory.CreateScope();
                var stateManager = scope.ServiceProvider.GetRequiredService<IUserStateManager>();
                await stateManager.SetStateAsync(userId, UserConversationState.WaitingVerificationCode, cancellationToken);

                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: "üìß –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∏–π –∫–æ–¥ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –≤–∞—à—É email –∞–¥—Ä–µ—Å—É!\n\n" +
                          "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à—É –ø–æ—à—Ç—É —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å 6-–∑–Ω–∞—á–Ω–∏–π –∫–æ–¥ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:",
                    parseMode: ParseMode.Html,
                    replyMarkup: GetBackToMainMenu(),
                    cancellationToken: cancellationToken);
            }
            else
            {
                await SendErrorMessageAsync(
                    botClient,
                    message.Chat.Id,
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–æ–≥–æ –∫–æ–¥—É.\n" +
                    "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó.",
                    cancellationToken);

                using var scope = _scopeFactory.CreateScope();
                var stateManager = scope.ServiceProvider.GetRequiredService<IUserStateManager>();
                await stateManager.ClearStateAsync(userId, cancellationToken);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ verification email –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", userId);

            await SendErrorMessageAsync(
                botClient,
                message.Chat.Id,
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–æ–≥–æ –∫–æ–¥—É.\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                cancellationToken);

            using var scope = _scopeFactory.CreateScope();
            var stateManager = scope.ServiceProvider.GetRequiredService<IUserStateManager>();
            await stateManager.ClearStateAsync(userId, cancellationToken);
        }
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–¥—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó email
    /// </summary>
    public async Task HandleVerificationCodeInputAsync(
        ITelegramBotClient botClient,
        Message message,
        CancellationToken cancellationToken)
    {
        var userId = message.From!.Id;
        var code = message.Text?.Trim();

        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É –∫–æ–¥—É (6 —Ü–∏—Ñ—Ä)
        if (string.IsNullOrWhiteSpace(code) || code.Length != 6 || !code.All(char.IsDigit))
        {
            await SendErrorMessageAsync(
                botClient,
                message.Chat.Id,
                "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥—É.\n\n" +
                "–ö–æ–¥ –º–∞—î —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ 6 —Ü–∏—Ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
                cancellationToken);
            return;
        }

        try
        {
            // –í–µ—Ä–∏—Ñ—ñ–∫—É—î–º–æ email –∫–æ–¥ —á–µ—Ä–µ–∑ MediatR
            var command = new VerifyEmailCommand
            {
                TelegramId = userId,
                Code = code
            };

            var result = await _mediator.Send(command, cancellationToken);

            if (result.IsSuccess && result.Value)
            {
                using var scope = _scopeFactory.CreateScope();
                var stateManager = scope.ServiceProvider.GetRequiredService<IUserStateManager>();
                await stateManager.ClearStateAsync(userId, cancellationToken);

                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: "‚úÖ <b>Email —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!</b>\n\n" +
                          "–¢–µ–ø–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤–∞–∂–ª–∏–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –≤–∞—à—É email –∞–¥—Ä–µ—Å—É.",
                    parseMode: ParseMode.Html,
                    replyMarkup: GetMainMenu(),
                    cancellationToken: cancellationToken);
            }
            else
            {
                await SendErrorMessageAsync(
                    botClient,
                    message.Chat.Id,
                    "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.\n\n" +
                    "–°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ —â–µ —Ä–∞–∑ –∞–±–æ –ø–æ—á–Ω—ñ—Ç—å –ø—Ä–æ—Ü–µ—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–Ω–æ–≤—É:",
                    cancellationToken);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó email –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", userId);

            await SendErrorMessageAsync(
                botClient,
                message.Chat.Id,
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                cancellationToken);

            using var scope = _scopeFactory.CreateScope();
            var stateManager = scope.ServiceProvider.GetRequiredService<IUserStateManager>();
            await stateManager.ClearStateAsync(userId, cancellationToken);
        }
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ
    /// </summary>
    public async Task HandleFullNameInputAsync(
        ITelegramBotClient botClient,
        Message message,
        CancellationToken cancellationToken)
    {
        var userId = message.From!.Id;
        var fullName = message.Text?.Trim();

        if (string.IsNullOrWhiteSpace(fullName) || fullName.Length < 2)
        {
            await SendErrorMessageAsync(
                botClient,
                message.Chat.Id,
                "‚ùå –Ü–º'—è –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ (–º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏)",
                cancellationToken);
            return;
        }

        if (fullName.Length > 100)
        {
            await SendErrorMessageAsync(
                botClient,
                message.Chat.Id,
                "‚ùå –Ü–º'—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª—ñ–≤)",
                cancellationToken);
            return;
        }

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤–Ω–µ —ñ–º'—è —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É
        using var scope = _scopeFactory.CreateScope();
        var stateManager = scope.ServiceProvider.GetRequiredService<IUserStateManager>();
        await stateManager.SetDataAsync(userId, "profile_fullname", fullName, cancellationToken);
        await stateManager.SetStateAsync(userId, UserConversationState.WaitingFacultyInput, cancellationToken);

        await botClient.SendTextMessageAsync(
            chatId: message.Chat.Id,
            text: $"‚úÖ –Ü–º'—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: <b>{fullName}</b>\n\n" +
                  "üìö –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Å–≤–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É:",
            parseMode: ParseMode.Html,
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É
    /// </summary>
    public async Task HandleFacultyInputAsync(
        ITelegramBotClient botClient,
        Message message,
        CancellationToken cancellationToken)
    {
        var userId = message.From!.Id;
        var faculty = message.Text?.Trim();

        if (string.IsNullOrWhiteSpace(faculty) || faculty.Length < 2)
        {
            await SendErrorMessageAsync(
                botClient,
                message.Chat.Id,
                "‚ùå –ù–∞–∑–≤–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞ (–º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏)",
                cancellationToken);
            return;
        }

        if (faculty.Length > 100)
        {
            await SendErrorMessageAsync(
                botClient,
                message.Chat.Id,
                "‚ùå –ù–∞–∑–≤–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª—ñ–≤)",
                cancellationToken);
            return;
        }

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∫—É—Ä—Å—É
        using var scope = _scopeFactory.CreateScope();
        var stateManager = scope.ServiceProvider.GetRequiredService<IUserStateManager>();
        await stateManager.SetDataAsync(userId, "profile_faculty", faculty, cancellationToken);
        await stateManager.SetStateAsync(userId, UserConversationState.WaitingCourseInput, cancellationToken);

        await botClient.SendTextMessageAsync(
            chatId: message.Chat.Id,
            text: $"‚úÖ –§–∞–∫—É–ª—å—Ç–µ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: <b>{faculty}</b>\n\n" +
                  "üéì –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫—É—Ä—Å—É (1-6):",
            parseMode: ParseMode.Html,
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –∫—É—Ä—Å—É
    /// </summary>
    public async Task HandleCourseInputAsync(
        ITelegramBotClient botClient,
        Message message,
        CancellationToken cancellationToken)
    {
        var userId = message.From!.Id;
        var courseText = message.Text?.Trim();

        if (!int.TryParse(courseText, out int course) || course < 1 || course > 6)
        {
            await SendErrorMessageAsync(
                botClient,
                message.Chat.Id,
                "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –∫—É—Ä—Å—É. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 6",
                cancellationToken);
            return;
        }

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫—É—Ä—Å —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –≥—Ä—É–ø–∏
        using var scope = _scopeFactory.CreateScope();
        var stateManager = scope.ServiceProvider.GetRequiredService<IUserStateManager>();
        await stateManager.SetDataAsync(userId, "profile_course", course, cancellationToken);
        await stateManager.SetStateAsync(userId, UserConversationState.WaitingGroupInput, cancellationToken);

        await botClient.SendTextMessageAsync(
            chatId: message.Chat.Id,
            text: $"‚úÖ –ö—É—Ä—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ: <b>{course}</b>\n\n" +
                  "üë• –Ü –Ω–∞–æ—Å—Ç–∞–Ω–æ–∫, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ—ó –≥—Ä—É–ø–∏:",
            parseMode: ParseMode.Html,
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –≥—Ä—É–ø–∏ —Ç–∞ –∑–∞–≤–µ—Ä—à—É—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
    /// </summary>
    public async Task HandleGroupInputAsync(
        ITelegramBotClient botClient,
        Message message,
        CancellationToken cancellationToken)
    {
        var userId = message.From!.Id;
        var group = message.Text?.Trim();

        if (string.IsNullOrWhiteSpace(group) || group.Length < 1)
        {
            await SendErrorMessageAsync(
                botClient,
                message.Chat.Id,
                "‚ùå –ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é",
                cancellationToken);
            return;
        }

        if (group.Length > 50)
        {
            await SendErrorMessageAsync(
                botClient,
                message.Chat.Id,
                "‚ùå –ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª—ñ–≤)",
                cancellationToken);
            return;
        }

        try
        {
            // –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ
            using var scope = _scopeFactory.CreateScope();
            var stateManager = scope.ServiceProvider.GetRequiredService<IUserStateManager>();
            var fullName = await stateManager.GetDataAsync<string>(userId, "profile_fullname", cancellationToken);
            var faculty = await stateManager.GetDataAsync<string>(userId, "profile_faculty", cancellationToken);
            var course = await stateManager.GetDataAsync<int>(userId, "profile_course", cancellationToken);

            // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
            var command = new UpdateProfileCommand
            {
                TelegramId = userId,
                FullName = fullName,
                Faculty = faculty,
                Course = course,
                Group = group
            };

            var result = await _mediator.Send(command, cancellationToken);

            if (result.IsSuccess)
            {
                using var clearScope = _scopeFactory.CreateScope();
                var clearStateManager = clearScope.ServiceProvider.GetRequiredService<IUserStateManager>();
                await clearStateManager.ClearStateAsync(userId, cancellationToken);
                await clearStateManager.ClearAllDataAsync(userId, cancellationToken);

                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: "‚úÖ <b>–ü—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n" +
                          $"üë§ <b>–Ü–º'—è:</b> {fullName}\n" +
                          $"üèõÔ∏è <b>–§–∞–∫—É–ª—å—Ç–µ—Ç:</b> {faculty}\n" +
                          $"üéì <b>–ö—É—Ä—Å:</b> {course}\n" +
                          $"üë• <b>–ì—Ä—É–ø–∞:</b> {group}",
                    parseMode: ParseMode.Html,
                    replyMarkup: GetMainMenu(),
                    cancellationToken: cancellationToken);
            }
            else
            {
                await SendErrorMessageAsync(
                    botClient,
                    message.Chat.Id,
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é.\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                    cancellationToken);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", userId);

            await SendErrorMessageAsync(
                botClient,
                message.Chat.Id,
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é.\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                cancellationToken);

            using var errorScope = _scopeFactory.CreateScope();
            var errorStateManager = errorScope.ServiceProvider.GetRequiredService<IUserStateManager>();
            await errorStateManager.ClearStateAsync(userId, cancellationToken);
            await errorStateManager.ClearAllDataAsync(userId, cancellationToken);
        }
    }

    /// <summary>
    /// –ü–æ–∫–∞–∑—É—î –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    /// </summary>
    public async Task HandleProfileViewCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        var userId = callbackQuery.From.Id;

        var getUserQuery = new GetUserByTelegramIdQuery { TelegramId = userId };
        var userResult = await _mediator.Send(getUserQuery, cancellationToken);
        var user = userResult.Value;

        if (user == null)
        {
            await SendCallbackErrorAsync(
                botClient,
                callbackQuery,
                "‚ùå –ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                cancellationToken);
            return;
        }

        var username = user.Username ?? "–Ω–µ–º–∞—î";
        var fullName = user.FullName ?? $"{callbackQuery.From.FirstName} {callbackQuery.From.LastName}".Trim();
        var email = user.Email ?? "<i>–Ω–µ –≤–∫–∞–∑–∞–Ω–æ</i>";
        var emailStatus = user.IsEmailVerified ? "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ" : "‚ö†Ô∏è –ù–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ";
        var languageDisplay = user.Language == "uk" ? "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" : "üá¨üáß English";

        var profileText = "üë§ <b>–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å</b>\n\n" +
                         $"üÜî <b>ID:</b> {user.TelegramId}\n" +
                         $"üë§ <b>–Ü–º'—è:</b> {fullName}\n" +
                         $"üì± <b>Username:</b> @{username}\n" +
                         $"üìß <b>Email:</b> {email} ({emailStatus})\n" +
                         $"üåê <b>–ú–æ–≤–∞:</b> {languageDisplay}\n" +
                         $"üèõÔ∏è <b>–§–∞–∫—É–ª—å—Ç–µ—Ç:</b> {user.Faculty ?? "<i>–Ω–µ –≤–∫–∞–∑–∞–Ω–æ</i>"}\n" +
                         $"üéì <b>–ö—É—Ä—Å:</b> {(user.Course?.ToString() ?? "<i>–Ω–µ –≤–∫–∞–∑–∞–Ω–æ</i>")}\n" +
                         $"üë• <b>–ì—Ä—É–ø–∞:</b> {user.Group ?? "<i>–Ω–µ –≤–∫–∞–∑–∞–Ω–æ</i>"}\n" +
                         $"üìÖ <b>–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:</b> {user.JoinedAt:dd.MM.yyyy}";

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ", "profile_edit_info"),
                InlineKeyboardButton.WithCallbackData("üìß –ó–º—ñ–Ω–∏—Ç–∏ Email", "profile_edit_email")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É", "profile_change_language")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", "back_to_main")
            }
        });

        await botClient.EditMessageTextAsync(
            chatId: callbackQuery.Message!.Chat.Id,
            messageId: callbackQuery.Message.MessageId,
            text: profileText,
            parseMode: ParseMode.Html,
            replyMarkup: keyboard,
            cancellationToken: cancellationToken);

        await botClient.AnswerCallbackQueryAsync(
            callbackQueryId: callbackQuery.Id,
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –†–æ–∑–ø–æ—á–∏–Ω–∞—î —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ—Ñ—ñ–ª—é
    /// </summary>
    public async Task HandleProfileEditInfoCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        var userId = callbackQuery.From.Id;

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ
        using var scope = _scopeFactory.CreateScope();
        var stateManager = scope.ServiceProvider.GetRequiredService<IUserStateManager>();
        await stateManager.SetStateAsync(userId, UserConversationState.WaitingFullNameInput, cancellationToken);

        await botClient.EditMessageTextAsync(
            chatId: callbackQuery.Message!.Chat.Id,
            messageId: callbackQuery.Message.MessageId,
            text: "‚úèÔ∏è <b>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é</b>\n\n" +
                  "–î–∞–≤–∞–π—Ç–µ –æ–Ω–æ–≤–∏–º–æ –≤–∞—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é. –°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è:\n\n" +
                  "<i>–ü—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á</i>",
            parseMode: ParseMode.Html,
            replyMarkup: GetBackToMainMenu(),
            cancellationToken: cancellationToken);

        await botClient.AnswerCallbackQueryAsync(
            callbackQueryId: callbackQuery.Id,
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –†–æ–∑–ø–æ—á–∏–Ω–∞—î —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è email –∞–¥—Ä–µ—Å–∏
    /// </summary>
    public async Task HandleProfileEditEmailCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        var userId = callbackQuery.From.Id;

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è email
        using var scope = _scopeFactory.CreateScope();
        var stateManager = scope.ServiceProvider.GetRequiredService<IUserStateManager>();
        await stateManager.SetStateAsync(userId, UserConversationState.WaitingEmailInput, cancellationToken);

        await botClient.EditMessageTextAsync(
            chatId: callbackQuery.Message!.Chat.Id,
            messageId: callbackQuery.Message.MessageId,
            text: "üìß <b>–ó–º—ñ–Ω–∞ Email –∞–¥—Ä–µ—Å–∏</b>\n\n" +
                  "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É email –∞–¥—Ä–µ—Å—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:\n\n" +
                  "<i>–ü—Ä–∏–∫–ª–∞–¥: student@vnmu.edu.ua</i>\n\n" +
                  "üí° –î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ",
            parseMode: ParseMode.Html,
            replyMarkup: await GetCancelKeyboardAsync(userId, cancellationToken),
            cancellationToken: cancellationToken);

        await botClient.AnswerCallbackQueryAsync(
            callbackQueryId: callbackQuery.Id,
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –≤–∏–±–æ—Ä—É –º–æ–≤–∏
    /// </summary>
    public async Task HandleProfileChangeLanguageCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "set_lang_uk"),
                InlineKeyboardButton.WithCallbackData("üá¨üáß English", "set_lang_en")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é", "profile_view")
            }
        });

        await botClient.EditMessageTextAsync(
            chatId: callbackQuery.Message!.Chat.Id,
            messageId: callbackQuery.Message.MessageId,
            text: "üåê <b>–í–∏–±—ñ—Ä –º–æ–≤–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É</b>\n\n" +
                  "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –±–æ—Ç–∞:",
            parseMode: ParseMode.Html,
            replyMarkup: keyboard,
            cancellationToken: cancellationToken);

        await botClient.AnswerCallbackQueryAsync(
            callbackQueryId: callbackQuery.Id,
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    /// </summary>
    public async Task HandleSetLanguageCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        var userId = callbackQuery.From.Id;
        var data = callbackQuery.Data!;

        var language = data == "set_lang_uk" ? Language.Ukrainian : Language.English;
        var languageName = data == "set_lang_uk" ? "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫—É" : "üá¨üáß English";

        try
        {
            var command = new ChangeLanguageCommand
            {
                TelegramId = userId,
                Language = language
            };

            var result = await _mediator.Send(command, cancellationToken);

            if (result.IsSuccess)
            {
                // –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è –Ω–æ–≤–æ—ó –º–æ–≤–∏
                using var scope = _scopeFactory.CreateScope();
                var localizationService = scope.ServiceProvider.GetRequiredService<StudentUnionBot.Domain.Interfaces.ILocalizationService>();
                
                var successMessage = await localizationService.GetLocalizedStringAsync(
                    "profile.language_changed", language, cancellationToken);
                var buttonProfile = await localizationService.GetLocalizedStringAsync(
                    "button.profile", language, cancellationToken);
                var buttonMainMenu = await localizationService.GetLocalizedStringAsync(
                    "button.main_menu", language, cancellationToken);

                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: successMessage,
                    parseMode: ParseMode.Html,
                    replyMarkup: new InlineKeyboardMarkup(new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData($"üë§ {buttonProfile}", "profile_view"),
                            InlineKeyboardButton.WithCallbackData($"üè† {buttonMainMenu}", "back_to_main")
                        }
                    }),
                    cancellationToken: cancellationToken);
            }
            else
            {
                await SendCallbackErrorAsync(
                    botClient,
                    callbackQuery,
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –º–æ–≤–∏",
                    cancellationToken);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –º–æ–≤–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", userId);
            
            await SendCallbackErrorAsync(
                botClient,
                callbackQuery,
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –º–æ–≤–∏",
                cancellationToken);
        }

        await botClient.AnswerCallbackQueryAsync(
            callbackQueryId: callbackQuery.Id,
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É HandleTextMessageAsync
    /// </summary>
    public override async Task HandleTextMessageAsync(
        ITelegramBotClient botClient, 
        Message message, 
        UserConversationState state, 
        CancellationToken cancellationToken)
    {
        var userId = message.From!.Id;

        switch (state)
        {
            case UserConversationState.WaitingVerificationCode:
                await HandleVerificationCodeInputAsync(botClient, message, cancellationToken);
                break;
            case UserConversationState.WaitingFullNameInput:
                await HandleFullNameInputAsync(botClient, message, cancellationToken);
                break;
            case UserConversationState.WaitingFacultyInput:
                await HandleFacultyInputAsync(botClient, message, cancellationToken);
                break;
            case UserConversationState.WaitingCourseInput:
                await HandleCourseInputAsync(botClient, message, cancellationToken);
                break;
            case UserConversationState.WaitingGroupInput:
                await HandleGroupInputAsync(botClient, message, cancellationToken);
                break;
            case UserConversationState.WaitingEmailInput:
                await HandleEmailInputAsync(botClient, message, cancellationToken);
                break;
            default:
                // –î–ª—è —ñ–Ω—à–∏—Ö —Å—Ç–∞–Ω—ñ–≤ –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
                break;
        }
    }

    /// <summary>
    /// –û–±—Ä–æ–±–∫–∞ callback –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—Ä–æ—Ñ—ñ–ª—é
    /// </summary>
    public async Task HandleProfileViewCallbackAsync(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        await HandleProfileViewCallback(botClient, callbackQuery, cancellationToken);
    }

    /// <summary>
    /// –û–±—Ä–æ–±–∫–∞ callback –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
    /// </summary>
    public async Task HandleProfileEditCallbackAsync(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        await HandleProfileEditInfoCallback(botClient, callbackQuery, cancellationToken);
    }

    /// <summary>
    /// –û–±—Ä–æ–±–∫–∞ callback –¥–ª—è –∑–º—ñ–Ω–∏ –º–æ–≤–∏
    /// </summary>
    public async Task HandleLanguageChangeCallbackAsync(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        await HandleProfileChangeLanguageCallback(botClient, callbackQuery, cancellationToken);
    }

    /// <summary>
    /// –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–º–∏–ª–∫–∏ callback
    /// </summary>
    private async Task SendCallbackErrorAsync(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        string errorMessage,
        CancellationToken cancellationToken)
    {
        await botClient.AnswerCallbackQueryAsync(
            callbackQueryId: callbackQuery.Id,
            text: errorMessage,
            showAlert: true,
            cancellationToken: cancellationToken);
    }
}