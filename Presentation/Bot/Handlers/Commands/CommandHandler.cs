using MediatR;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using StudentUnionBot.Application.Common.Interfaces;
using StudentUnionBot.Application.Users.Queries.GetUserByTelegramId;
using StudentUnionBot.Application.Users.Queries.GetUserDashboard;
using StudentUnionBot.Core.Constants;
using StudentUnionBot.Domain.Enums;
using StudentUnionBot.Domain.Interfaces;
using StudentUnionBot.Presentation.Bot.Handlers.Common;
using StudentUnionBot.Presentation.Bot.Handlers.Interfaces;
using StudentUnionBot.Presentation.Bot.Keyboards;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace StudentUnionBot.Presentation.Bot.Handlers.Commands;

/// <summary>
/// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (/start, /help, /appeal, /contacts —Ç–æ—â–æ)
/// </summary>
public class CommandHandler : BaseHandler, ICommandHandler
{
    public CommandHandler(
        IServiceScopeFactory scopeFactory,
        ILogger<CommandHandler> logger,
        IMediator mediator)
        : base(scopeFactory, logger, mediator)
    {
    }

    /// <summary>
    /// –¶–µ–π –º–µ—Ç–æ–¥ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ CommandHandler, –æ—Å–∫—ñ–ª—å–∫–∏ –∫–æ–º–∞–Ω–¥–∏ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ
    /// </summary>
    public override Task HandleTextMessageAsync(
        ITelegramBotClient botClient, 
        Message message, 
        UserConversationState state, 
        CancellationToken cancellationToken)
    {
        // CommandHandler –æ–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥–∏ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ —á–µ—Ä–µ–∑ HandleCommandAsync
        throw new NotImplementedException("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ HandleCommandAsync –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥");
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
    /// </summary>
    public async Task HandleCommandAsync(
        ITelegramBotClient botClient,
        Message message,
        CancellationToken cancellationToken)
    {
        try
        {
            var command = message.Text!.Split(' ')[0].ToLower();
            var userId = message.From!.Id;

            _logger.LogInformation("–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏: {Command} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", command, userId);

            // –ö–æ–º–∞–Ω–¥–∏ /start —Ç–∞ /appeal —Å–∫–∞—Å–æ–≤—É—é—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ—Ü–µ—Å
            if (command == "/start" || command == "/appeal")
            {
                await ClearUserStateAsync(userId, cancellationToken);
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            var isAdmin = await IsUserAdminAsync(message.From.Id, cancellationToken);

            var (responseText, keyboard) = await GetCommandResponseAsync(command, isAdmin, userId, cancellationToken);

            await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: responseText,
                parseMode: ParseMode.Html,
                replyMarkup: keyboard,
                cancellationToken: cancellationToken);

            _logger.LogInformation("–ö–æ–º–∞–Ω–¥–∞ {Command} —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–∞", command);
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(
                botClient, 
                message.Chat.Id, 
                ex, 
                $"HandleCommandAsync - –∫–æ–º–∞–Ω–¥–∞: {message.Text}",
                cancellationToken);
        }
    }

    #region Private Methods

    /// <summary>
    /// –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    /// </summary>
    private async Task<bool> IsUserAdminAsync(long telegramId, CancellationToken cancellationToken)
    {
        try
        {
            var getUserQuery = new GetUserByTelegramIdQuery { TelegramId = telegramId };
            var userResult = await _mediator.Send(getUserQuery, cancellationToken);
            var isAdmin = userResult.IsSuccess && userResult.Value?.Role == UserRole.Admin;

            _logger.LogInformation(
                "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {TelegramId} –º–∞—î —Ä–æ–ª—å {Role}, isAdmin={IsAdmin}",
                telegramId,
                userResult.Value?.Role,
                isAdmin);

            return isAdmin;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {TelegramId}", telegramId);
            return false;
        }
    }

    /// <summary>
    /// –§–æ—Ä–º—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start –∑ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º —Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–º dashboard
    /// </summary>
    private async Task<(string responseText, IReplyMarkup? keyboard)> GetStartCommandResponseAsync(
        long userId, 
        bool isAdmin, 
        CancellationToken cancellationToken)
    {
        try
        {
            // –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π dashboard
            var dashboardQuery = new GetUserDashboardQuery { TelegramId = userId };
            var dashboardResult = await _mediator.Send(dashboardQuery, cancellationToken);

            if (!dashboardResult.IsSuccess || dashboardResult.Value == null)
            {
                // Fallback - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –º–µ–Ω—é
                return await GetFallbackStartResponseAsync(userId, isAdmin, cancellationToken);
            }

            var dashboard = dashboardResult.Value;
            var language = dashboard.User.Language?.ToLower() == "en" 
                ? Language.English 
                : Language.Ukrainian;

            // –§–æ—Ä–º—É—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            var welcomeMessage = BuildPersonalizedWelcomeMessage(dashboard, language);

            // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
            using var scope = _scopeFactory.CreateScope();
            var localizationService = scope.ServiceProvider.GetRequiredService<ILocalizationService>();
            
            var keyboard = await KeyboardFactory.GetPersonalizedMainMenuKeyboardAsync(
                localizationService,
                language,
                dashboard,
                cancellationToken);

            return (welcomeMessage, keyboard);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ dashboard –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", userId);
            return await GetFallbackStartResponseAsync(userId, isAdmin, cancellationToken);
        }
    }

    /// <summary>
    /// Fallback –º–µ—Ç–æ–¥ –¥–ª—è /start (—è–∫—â–æ dashboard –Ω–µ –ø—Ä–∞—Ü—é—î)
    /// </summary>
    private async Task<(string responseText, IReplyMarkup? keyboard)> GetFallbackStartResponseAsync(
        long userId,
        bool isAdmin,
        CancellationToken cancellationToken)
    {
        var getUserQuery = new GetUserByTelegramIdQuery { TelegramId = userId };
        var userResult = await _mediator.Send(getUserQuery, cancellationToken);

        var language = Language.Ukrainian;
        var isNewUser = true;

        if (userResult.IsSuccess && userResult.Value != null)
        {
            language = userResult.Value.Language?.ToLower() == "en" 
                ? Language.English 
                : Language.Ukrainian;
            isNewUser = string.IsNullOrWhiteSpace(userResult.Value.Email);
        }

        var welcomeMessage = WelcomeMessages.GetWelcomeMessage(language, isNewUser);
        var keyboard = await GetMainMenuAsync(userId, isAdmin, cancellationToken);

        return (welcomeMessage, keyboard);
    }

    /// <summary>
    /// –ë—É–¥—É—î –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    /// </summary>
    private string BuildPersonalizedWelcomeMessage(
        Application.Users.DTOs.UserDashboardDto dashboard, 
        Language language)
    {
        var greeting = language == Language.English ? "Hello" : "–ü—Ä–∏–≤—ñ—Ç";
        var userName = !string.IsNullOrWhiteSpace(dashboard.User.FirstName) 
            ? dashboard.User.FirstName 
            : "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á";

        var message = $"üè† {greeting}, {userName}! üëã\n\n";

        // –Ø–∫—â–æ –Ω–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –≤—ñ—Ç–∞–Ω–Ω—è
        if (dashboard.IsNewUser)
        {
            message += language == Language.English
                ? "Welcome to VNMU Student Union Bot! üéì\n\n"
                : "–í—ñ—Ç–∞—î–º–æ —É –±–æ—Ç—ñ –ü—Ä–æ—Ñ–∫–æ–º—É –í–ù–ú–£! üéì\n\n";
            
            message += language == Language.English
                ? "I can help you with:\n"
                : "–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ:\n";
            
            message += language == Language.English
                ? "‚úÖ Submit appeals\n‚úÖ Stay informed with news\n‚úÖ Register for events\n‚úÖ Contact student union\n\n"
                : "‚úÖ –°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è\n‚úÖ –î—ñ–∑–Ω–∞–≤–∞—Ç–∏—Å—å –Ω–æ–≤–∏–Ω–∏\n‚úÖ –†–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å –Ω–∞ –ø–æ–¥—ñ—ó\n‚úÖ –ó–≤'—è–∑–∞—Ç–∏—Å—å –∑ –ø—Ä–æ—Ñ–∫–æ–º–æ–º\n\n";
        }
        else
        {
            // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —è–∫—â–æ —î
            if (dashboard.RecentNotifications.Any())
            {
                var count = dashboard.RecentNotifications.Count;
                message += language == Language.English
                    ? $"üîî NEW FOR YOU ({count}):\n"
                    : $"üîî –ù–û–í–ï –î–õ–Ø –¢–ï–ë–ï ({count}):\n";

                foreach (var notification in dashboard.RecentNotifications.Take(3))
                {
                    message += $"{notification.Icon} {notification.Message}\n";
                }
                message += "\n";
            }
        }

        // –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —è–∫—â–æ —î –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
        if (dashboard.Statistics.TotalAppeals > 0)
        {
            message += language == Language.English
                ? "üìä Your activity:\n"
                : "üìä –¢–≤–æ—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:\n";
            
            message += $"‚Ä¢ {dashboard.Statistics.TotalAppeals} " + 
                      (language == Language.English ? "appeals" : "–∑–≤–µ—Ä–Ω–µ–Ω—å") + "\n";
            
            if (dashboard.Statistics.ActiveAppeals > 0)
            {
                message += $"‚Ä¢ {dashboard.Statistics.ActiveAppeals} " +
                          (language == Language.English ? "active" : "–∞–∫—Ç–∏–≤–Ω–∏—Ö") + "\n";
            }
            
            if (dashboard.Statistics.UpcomingEvents > 0)
            {
                message += $"‚Ä¢ {dashboard.Statistics.UpcomingEvents} " +
                          (language == Language.English ? "upcoming events" : "–º–∞–π–±—É—Ç–Ω—ñ—Ö –ø–æ–¥—ñ–π") + "\n";
            }
            
            message += "\n";
        }

        message += language == Language.English
            ? "Choose an action from the menu:"
            : "–û–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é:";

        return message;
    }

    /// <summary>
    /// –û—Ç—Ä–∏–º—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É
    /// </summary>
    private async Task<(string responseText, IReplyMarkup? keyboard)> GetCommandResponseAsync(string command, bool isAdmin, long userId, CancellationToken cancellationToken)
    {
        return command switch
        {
            "/start" => await GetStartCommandResponseAsync(userId, isAdmin, cancellationToken),
            
            "/help" => (
                await GetLocalizedTextForUserAsync(userId, "command.help_text", cancellationToken),
                await GetBackToMainMenuAsync(userId, cancellationToken)),
            
            "/appeal" => (
                await GetLocalizedTextForUserAsync(userId, "command.appeal_create", cancellationToken),
                await GetAppealCategoriesAsync(userId, cancellationToken)),
            
            "/myappeals" => (
                await GetLocalizedTextForUserAsync(userId, "command.loading_appeals", cancellationToken),
                null),
            
            "/news" => (
                await GetLocalizedTextForUserAsync(userId, "command.loading_news", cancellationToken),
                null),
            
            "/events" => (
                await GetLocalizedTextForUserAsync(userId, "command.loading_events", cancellationToken),
                null),
            
            "/profile" => (
                await GetLocalizedTextForUserAsync(userId, "command.loading_profile", cancellationToken),
                null),
            
            "/contacts" => (
                await GetLocalizedTextForUserAsync(userId, "command.contacts_info", cancellationToken),
                await GetBackToMainMenuAsync(userId, cancellationToken)),
            
            _ => (
                await GetLocalizedTextForUserAsync(userId, "command.unknown_command", cancellationToken),
                await GetBackToMainMenuAsync(userId, cancellationToken))
        };
    }




    #endregion

    #region ICommandHandler Implementation

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start
    /// </summary>
    public async Task HandleStartCommandAsync(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
    {
        await HandleCommandAsync(botClient, message, cancellationToken);
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /help
    /// </summary>
    public async Task HandleHelpCommandAsync(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
    {
        await HandleCommandAsync(botClient, message, cancellationToken);
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /appeal
    /// </summary>
    public async Task HandleAppealCommandAsync(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
    {
        await HandleCommandAsync(botClient, message, cancellationToken);
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /contacts
    /// </summary>
    public async Task HandleContactsCommandAsync(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
    {
        await HandleCommandAsync(botClient, message, cancellationToken);
    }

    #endregion
}