using MediatR;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using StudentUnionBot.Application.Appeals.Commands.CreateAppeal;
using StudentUnionBot.Application.Appeals.Queries.GetUserAppeals;
using StudentUnionBot.Application.Appeals.Queries.GetAppealById;
using StudentUnionBot.Application.Common.Interfaces;
using StudentUnionBot.Domain.Enums;
using StudentUnionBot.Presentation.Bot.Handlers.Common;
using StudentUnionBot.Presentation.Bot.Handlers.Interfaces;
using StudentUnionBot.Presentation.Bot.Helpers;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace StudentUnionBot.Presentation.Bot.Handlers.Appeals;

/// <summary>
/// –û–±—Ä–æ–±–Ω–∏–∫ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –∑–≤–µ—Ä–Ω–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
/// </summary>
public class AppealHandler : BaseHandler, IAppealHandler
{
    // In-memory storage –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∑–≤–µ—Ä–Ω–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    private static readonly Dictionary<long, AppealStatus?> _appealStatusFilters = new();
    private static readonly Dictionary<long, AppealCategory?> _appealCategoryFilters = new();

    public AppealHandler(
        IServiceScopeFactory scopeFactory,
        ILogger<AppealHandler> logger,
        IMediator mediator)
        : base(scopeFactory, logger, mediator)
    {
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–≤–µ—Ä–Ω–µ–Ω—å
    /// </summary>
    public override async Task HandleTextMessageAsync(
        ITelegramBotClient botClient,
        Message message,
        UserConversationState state,
        CancellationToken cancellationToken)
    {
        switch (state)
        {
            case UserConversationState.WaitingAppealSubject:
                await HandleAppealSubjectInputAsync(botClient, message, cancellationToken);
                break;
            
            case UserConversationState.WaitingAppealMessage:
                await HandleAppealMessageInputAsync(botClient, message, cancellationToken);
                break;
            
            default:
                _logger.LogWarning("–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Å—Ç–∞–Ω {State} –¥–ª—è AppealHandler", state);
                await SendErrorMessageAsync(
                    botClient,
                    message.Chat.Id,
                    "–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Å—Ç–∞–Ω. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É –∑ /appeal",
                    cancellationToken);
                break;
        }
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
    /// </summary>
    public async Task HandleAppealCategorySelectionAsync(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            var userId = callbackQuery.From.Id;
            var data = callbackQuery.Data!;
            var categoryId = int.Parse(data.Replace("appeal_cat_", ""));
            
            var categoryNames = new Dictionary<int, string>
            {
                { 1, "üè• –°—Ç–∏–ø–µ–Ω–¥—ñ—è" },
                { 2, "üè† –ì—É—Ä—Ç–æ–∂–∏—Ç–æ–∫" },
                { 3, "üçΩÔ∏è –ó–∞—Ö–æ–¥–∏" },
                { 4, "üí° –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è" },
                { 5, "üò° –°–∫–∞—Ä–≥–∞" },
                { 6, "‚ùì –Ü–Ω—à–µ" }
            };

            var categoryName = categoryNames.GetValueOrDefault(categoryId, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è");
            var category = (AppealCategory)categoryId;

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±—Ä–∞–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
            using var scope = _scopeFactory.CreateScope();
            var stateManager = scope.ServiceProvider.GetRequiredService<IUserStateManager>();
            await stateManager.SetDataAsync(userId, "appeal_category", category, cancellationToken);

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–µ–º–∏
            await stateManager.SetStateAsync(userId, UserConversationState.WaitingAppealSubject, cancellationToken);

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: $"üì© <b>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è</b>\n\n" +
                      $"üìÅ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {categoryName}\n\n" +
                      $"–ù–∞–ø–∏—à—ñ—Ç—å <b>—Ç–µ–º—É</b> –≤–∞—à–æ–≥–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:\n\n" +
                      $"<i>–ú—ñ–Ω—ñ–º—É–º 5 —Å–∏–º–≤–æ–ª—ñ–≤, –º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª—ñ–≤</i>\n\n" +
                      $"üí° –î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ",
                parseMode: ParseMode.Html,
                replyMarkup: await GetCancelKeyboardAsync(userId, cancellationToken),
                cancellationToken: cancellationToken);

            await botClient.AnswerCallbackQueryAsync(
                callbackQueryId: callbackQuery.Id,
                text: $"–û–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: {categoryName}",
                cancellationToken: cancellationToken);

            _logger.LogInformation("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {UserId} –æ–±—Ä–∞–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è: {Category}", userId, categoryName);
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(
                botClient,
                callbackQuery.Message!.Chat.Id,
                ex,
                "HandleAppealCategorySelectionAsync",
                cancellationToken);
        }
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î –ø–µ—Ä–µ–≥–ª—è–¥ –≤–ª–∞—Å–Ω–∏—Ö –∑–≤–µ—Ä–Ω–µ–Ω—å
    /// </summary>
    public async Task HandleMyAppealsCallbackAsync(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            var userId = callbackQuery.From.Id;
            
            // –ü–∞—Ä—Å–∏–º–æ –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ callback
            var pageNumber = PaginationHelper.ParsePageNumber(callbackQuery.Data!, "my_appeals_page") ?? 1;
            const int pageSize = 5;
            
            // –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—è–∫—â–æ —î)
            _appealStatusFilters.TryGetValue(userId, out var selectedStatus);
            _appealCategoryFilters.TryGetValue(userId, out var selectedCategory);
            
            var query = new GetUserAppealsQuery 
            { 
                UserId = userId,
                PageNumber = pageNumber,
                PageSize = pageSize,
                Status = selectedStatus,      // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å—É
                Category = selectedCategory    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            };

            var result = await _mediator.Send(query, cancellationToken);

            if (!result.IsSuccess)
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: $"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω—å: {result.Error}",
                    replyMarkup: await GetBackToMainMenuAsync(userId, cancellationToken),
                    cancellationToken: cancellationToken);
                return;
            }

            var appeals = result.Value;
            if (appeals == null || !appeals.Any())
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "üìã <b>–í–∞—à—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è</b>\n\n" +
                          "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–≤–µ—Ä–Ω–µ–Ω—å.\n" +
                          "–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ! üëá",
                    parseMode: ParseMode.Html,
                    replyMarkup: await GetBackToMainMenuAsync(userId, cancellationToken),
                    cancellationToken: cancellationToken);
                return;
            }

            // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å (—Ç—É—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Count –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É, –≤ —ñ–¥–µ–∞–ª—ñ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑ query)
            var totalCount = appeals.Count(); // TODO: –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ TotalCount –∑ DTO
            var totalPages = PaginationHelper.CalculateTotalPages(totalCount, pageSize);
            var validPage = PaginationHelper.ValidatePageNumber(pageNumber, totalPages);

            // –§–æ—Ä–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑—ñ —Å–ø–∏—Å–∫–æ–º –∑–≤–µ—Ä–Ω–µ–Ω—å
            var filterParts = new List<string>();
            if (selectedStatus.HasValue)
                filterParts.Add($"{selectedStatus.Value.GetEmoji()} {selectedStatus.Value.GetDisplayName()}");
            if (selectedCategory.HasValue)
                filterParts.Add($"{selectedCategory.Value.GetEmoji()} {selectedCategory.Value.GetDisplayName()}");
            
            var filterInfo = filterParts.Count > 0 ? $" ({string.Join(", ", filterParts)})" : "";
            
            var messageText = PaginationHelper.FormatListHeader(
                $"–í–∞—à—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è{filterInfo}",
                totalCount,
                validPage,
                totalPages,
                pageSize);

            foreach (var appeal in appeals)
            {
                var statusIcon = appeal.Status switch
                {
                    AppealStatus.New => "üÜï",
                    AppealStatus.InProgress => "‚è≥",
                    AppealStatus.Closed => "‚úÖ",
                    _ => "‚ùì"
                };

                messageText += $"{statusIcon} <b>#{appeal.Id}</b> - {appeal.Subject}\n" +
                              $"   üìÖ {appeal.CreatedAt:dd.MM.yyyy}\n" +
                              $"   üìä {appeal.Status}\n\n";
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
            var itemButtons = PaginationHelper.CreateItemButtons(
                appeals,
                buttonsPerRow: 2,
                itemButtonFactory: a => InlineKeyboardButton.WithCallbackData(
                    $"#{a.Id} - {a.Subject.Substring(0, Math.Min(20, a.Subject.Length))}...",
                    $"appeal_view_{a.Id}"));

            // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
            var buttons = itemButtons.ToList();
            
            // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
            var hasActiveFilters = selectedStatus.HasValue || selectedCategory.HasValue;
            FilterHelper.AddFilterButton(
                buttons, 
                "appeals_filters_menu", 
                hasActiveFilters: hasActiveFilters);

            // –î–æ–¥–∞—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏
            var navButtons = PaginationHelper.GetNavigationButtons(validPage, totalPages, "my_appeals_page");
            if (navButtons.Count > 0)
            {
                buttons.Add(navButtons);
            }

            // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"
            buttons.Add(new List<InlineKeyboardButton>
            {
                InlineKeyboardButton.WithCallbackData("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "back_to_main")
            });

            var keyboard = new InlineKeyboardMarkup(buttons);

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: messageText,
                parseMode: ParseMode.Html,
                replyMarkup: keyboard,
                cancellationToken: cancellationToken);

            await botClient.AnswerCallbackQueryAsync(
                callbackQueryId: callbackQuery.Id,
                text: $"–°—Ç–æ—Ä—ñ–Ω–∫–∞ {validPage} –∑ {totalPages}",
                cancellationToken: cancellationToken);

            _logger.LogInformation("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {UserId} –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤ —Å–≤–æ—ó –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è ({Count})", userId, appeals.Count());
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(
                botClient,
                callbackQuery.Message!.Chat.Id,
                ex,
                "HandleMyAppealsCallbackAsync",
                cancellationToken);
        }
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î –ø–µ—Ä–µ–≥–ª—è–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
    /// </summary>
    public async Task HandleAppealViewCallbackAsync(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            var data = callbackQuery.Data!;
            var appealId = int.Parse(data.Replace("appeal_view_", ""));
            
            var query = new GetAppealByIdQuery { AppealId = appealId };
            var result = await _mediator.Send(query, cancellationToken);

            if (!result.IsSuccess || result.Value == null)
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: $"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è: {result.Error ?? "–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}",
                    replyMarkup: GetBackToMainMenu(),
                    cancellationToken: cancellationToken);
                return;
            }

            var appeal = result.Value;
            var statusIcon = appeal.Status switch
            {
                AppealStatus.New => "üÜï",
                AppealStatus.InProgress => "‚è≥", 
                AppealStatus.Closed => "‚úÖ",
                _ => "‚ùì"
            };

            var messageText = $"üìÑ <b>–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è #{appeal.Id}</b>\n\n" +
                             $"{statusIcon} <b>–°—Ç–∞—Ç—É—Å:</b> {appeal.Status}\n" +
                             $"üìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {appeal.Category}\n" +
                             $"üìù <b>–¢–µ–º–∞:</b> {appeal.Subject}\n" +
                             $"üìÖ <b>–°—Ç–≤–æ—Ä–µ–Ω–æ:</b> {appeal.CreatedAt:dd.MM.yyyy HH:mm}\n\n" +
                             $"<b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n{appeal.Message}";

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: messageText,
                parseMode: ParseMode.Html,
                replyMarkup: GetBackToMainMenu(),
                cancellationToken: cancellationToken);

            await botClient.AnswerCallbackQueryAsync(
                callbackQueryId: callbackQuery.Id,
                text: $"–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è #{appealId}",
                cancellationToken: cancellationToken);

            _logger.LogInformation("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è #{AppealId}", appealId);
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(
                botClient,
                callbackQuery.Message!.Chat.Id,
                ex,
                "HandleAppealViewCallbackAsync",
                cancellationToken);
        }
    }

    #region Private Methods

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–º–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
    /// </summary>
    private async Task HandleAppealSubjectInputAsync(
        ITelegramBotClient botClient,
        Message message,
        CancellationToken cancellationToken)
    {
        try
        {
            var userId = message.From!.Id;
            var subject = message.Text?.Trim();

            if (string.IsNullOrWhiteSpace(subject) || subject.Length < 5)
            {
                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: "‚ùå –¢–µ–º–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —â–æ–Ω–∞–π–º–µ–Ω—à–µ 5 —Å–∏–º–≤–æ–ª—ñ–≤.",
                    cancellationToken: cancellationToken);
                return;
            }

            if (subject.Length > 200)
            {
                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: "‚ùå –¢–µ–º–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª—ñ–≤.",
                    cancellationToken: cancellationToken);
                return;
            }

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ–º—É
            using var scope = _scopeFactory.CreateScope();
            var stateManager = scope.ServiceProvider.GetRequiredService<IUserStateManager>();
            await stateManager.SetDataAsync(userId, "appeal_subject", subject, cancellationToken);

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
            await stateManager.SetStateAsync(userId, UserConversationState.WaitingAppealMessage, cancellationToken);

            await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: $"üìù –¢–µ–º–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞: <b>{subject}</b>\n\n" +
                      "üìñ –¢–µ–ø–µ—Ä –æ–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –¥–µ—Ç–∞–ª—å–Ω–æ.\n\n" +
                      "<i>–ú—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤, –º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª—ñ–≤.</i>\n\n" +
                      "üí° –î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ",
                parseMode: ParseMode.Html,
                replyMarkup: await GetCancelKeyboardAsync(userId, cancellationToken),
                cancellationToken: cancellationToken);

            _logger.LogInformation("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {UserId} –≤–≤—ñ–≤ —Ç–µ–º—É –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è: {Subject}", userId, subject);
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(
                botClient,
                message.Chat.Id,
                ex,
                "HandleAppealSubjectInputAsync",
                cancellationToken);
        }
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ç–∞ —Å—Ç–≤–æ—Ä—é—î –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
    /// </summary>
    private async Task HandleAppealMessageInputAsync(
        ITelegramBotClient botClient,
        Message message,
        CancellationToken cancellationToken)
    {
        try
        {
            var userId = message.From!.Id;
            var messageText = message.Text?.Trim();

            if (string.IsNullOrWhiteSpace(messageText) || messageText.Length < 10)
            {
                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: "‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ (–º—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤).",
                    cancellationToken: cancellationToken);
                return;
            }

            if (messageText.Length > 2000)
            {
                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: "‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ. –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª—ñ–≤.",
                    cancellationToken: cancellationToken);
                return;
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ
            using var scope = _scopeFactory.CreateScope();
            var stateManager = scope.ServiceProvider.GetRequiredService<IUserStateManager>();
            var rateLimiter = scope.ServiceProvider.GetRequiredService<IRateLimiter>();

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ rate limiting –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω—å
            if (!await rateLimiter.AllowAsync(userId, "CreateAppeal", cancellationToken))
            {
                var remainingTime = await rateLimiter.GetTimeUntilResetAsync(userId, "CreateAppeal", cancellationToken);
                var waitMessage = remainingTime.HasValue 
                    ? $"‚è≥ –í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –ª–∏—à–µ —Ä–∞–∑ –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω.\n–ù–∞—Å—Ç—É–ø–Ω–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —á–µ—Ä–µ–∑ {remainingTime.Value.TotalMinutes:F0} —Ö–≤–∏–ª–∏–Ω."
                    : "‚è≥ –í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –ª–∏—à–µ —Ä–∞–∑ –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.";
                    
                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: waitMessage,
                    replyMarkup: GetMainMenu(),
                    cancellationToken: cancellationToken);

                await ClearUserStateAsync(userId, cancellationToken);
                return;
            }
            var category = await stateManager.GetDataAsync<AppealCategory>(userId, "appeal_category", cancellationToken);
            var subject = await stateManager.GetDataAsync<string>(userId, "appeal_subject", cancellationToken);

            if (string.IsNullOrEmpty(subject))
            {
                await SendErrorMessageAsync(
                    botClient,
                    message.Chat.Id,
                    "–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ. –ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É /appeal",
                    cancellationToken);

                await ClearUserStateAsync(userId, cancellationToken);
                return;
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è —á–µ—Ä–µ–∑ MediatR
            var command = new CreateAppealCommand
            {
                StudentId = userId,
                StudentName = $"{message.From.FirstName} {message.From.LastName}".Trim(),
                Category = category,
                Subject = subject,
                Message = messageText
            };

            var result = await _mediator.Send(command, cancellationToken);

            if (result.IsSuccess)
            {
                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: $"‚úÖ <b>–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b>\n\n" +
                          $"üÜî –ù–æ–º–µ—Ä: #{result.Value!.Id}\n" +
                          $"üìÅ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {result.Value.Category}\n" +
                          $"üìù –¢–µ–º–∞: {result.Value.Subject}\n" +
                          $"üìä –°—Ç–∞—Ç—É—Å: {result.Value.Status}\n\n" +
                          $"–ú–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –≤–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n" +
                          $"–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É.",
                    parseMode: ParseMode.Html,
                    replyMarkup: GetBackToMainMenu(),
                    cancellationToken: cancellationToken);

                _logger.LogInformation("–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è #{AppealId} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", result.Value.Id, userId);
            }
            else
            {
                await SendErrorMessageAsync(
                    botClient,
                    message.Chat.Id,
                    $"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:\n{result.Error}\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ /appeal",
                    cancellationToken);
            }

            // –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Ç–∞ –¥–∞–Ω–∏—Ö
            await ClearUserStateAsync(userId, cancellationToken);
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(
                botClient,
                message.Chat.Id,
                ex,
                "HandleAppealMessageInputAsync",
                cancellationToken);

            await ClearUserStateAsync(message.From!.Id, cancellationToken);
        }
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
    /// </summary>
    public async Task HandleAppealCreateCallback(ITelegramBotClient botClient, CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        try
        {
            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: "üì© <b>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è</b>\n\n" +
                      "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∞—à–æ–≥–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:",
                parseMode: ParseMode.Html,
                replyMarkup: GetAppealCategories(),
                cancellationToken: cancellationToken);

            await botClient.AnswerCallbackQueryAsync(
                callbackQueryId: callbackQuery.Id,
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –≤ HandleAppealCreateCallback");
            
            await botClient.AnswerCallbackQueryAsync(
                callbackQueryId: callbackQuery.Id,
                text: "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                showAlert: true,
                cancellationToken: cancellationToken);
        }
    }

    /// <summary>
    /// –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –º–µ–Ω—é –≤–∏–±–æ—Ä—É —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–ª—è –∑–≤–µ—Ä–Ω–µ–Ω—å
    /// </summary>
    public async Task HandleAppealsFiltersMenuCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            var userId = callbackQuery.From.Id;
            
            var buttons = new List<List<InlineKeyboardButton>>
            {
                new List<InlineKeyboardButton>
                {
                    InlineKeyboardButton.WithCallbackData("üìä –§—ñ–ª—å—Ç—Ä –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º", "appeals_filter_status_menu")
                },
                new List<InlineKeyboardButton>
                {
                    InlineKeyboardButton.WithCallbackData("üìÇ –§—ñ–ª—å—Ç—Ä –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é", "appeals_filter_category_menu")
                },
                new List<InlineKeyboardButton>
                {
                    InlineKeyboardButton.WithCallbackData("üîÑ –°–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ —Ñ—ñ–ª—å—Ç—Ä–∏", "appeals_filter_clear_all")
                },
                new List<InlineKeyboardButton>
                {
                    InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", "my_appeals")
                }
            };

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: "üîç <b>–§—ñ–ª—å—Ç—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω—å</b>\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ñ—ñ–ª—å—Ç—Ä—É:",
                parseMode: ParseMode.Html,
                replyMarkup: new InlineKeyboardMarkup(buttons),
                cancellationToken: cancellationToken);

            await botClient.AnswerCallbackQueryAsync(
                callbackQueryId: callbackQuery.Id,
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –º–µ–Ω—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∑–≤–µ—Ä–Ω–µ–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", callbackQuery.From.Id);
        }
    }

    /// <summary>
    /// –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –º–µ–Ω—é –≤–∏–±–æ—Ä—É —Å—Ç–∞—Ç—É—Å—É –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
    /// </summary>
    public async Task HandleAppealsFilterStatusMenuCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            var userId = callbackQuery.From.Id;
            _appealStatusFilters.TryGetValue(userId, out var selectedStatus);

            var keyboard = FilterHelper.CreateAppealStatusFilterKeyboard(
                selectedStatus,
                backCallbackData: "appeals_filters_menu");

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: "üîç <b>–§—ñ–ª—å—Ç—Ä –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º</b>\n\n–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:",
                parseMode: ParseMode.Html,
                replyMarkup: keyboard,
                cancellationToken: cancellationToken);

            await botClient.AnswerCallbackQueryAsync(
                callbackQueryId: callbackQuery.Id,
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—É —Å—Ç–∞—Ç—É—Å—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", callbackQuery.From.Id);
        }
    }

    /// <summary>
    /// –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –º–µ–Ω—é –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
    /// </summary>
    public async Task HandleAppealsFilterCategoryMenuCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            var userId = callbackQuery.From.Id;
            _appealCategoryFilters.TryGetValue(userId, out var selectedCategory);

            var keyboard = FilterHelper.CreateAppealCategoryFilterKeyboard(
                selectedCategory,
                backCallbackData: "appeals_filters_menu");

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: "üîç <b>–§—ñ–ª—å—Ç—Ä –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é</b>\n\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:",
                parseMode: ParseMode.Html,
                replyMarkup: keyboard,
                cancellationToken: cancellationToken);

            await botClient.AnswerCallbackQueryAsync(
                callbackQueryId: callbackQuery.Id,
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", callbackQuery.From.Id);
        }
    }

    /// <summary>
    /// –ó–∞—Å—Ç–æ—Å–æ–≤—É—î —Ñ—ñ–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å—É –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
    /// </summary>
    public async Task HandleAppealsFilterStatusCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            var userId = callbackQuery.From.Id;
            var status = FilterHelper.ParseAppealStatusFromCallback(callbackQuery.Data!);

            if (status.HasValue)
            {
                _appealStatusFilters[userId] = status.Value;
                await botClient.AnswerCallbackQueryAsync(
                    callbackQueryId: callbackQuery.Id,
                    text: $"‚úÖ –§—ñ–ª—å—Ç—Ä: {status.Value.GetDisplayName()}",
                    cancellationToken: cancellationToken);
            }

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ —Å–ø–∏—Å–∫—É –∑–≤–µ—Ä–Ω–µ–Ω—å –∑ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∏–º —Ñ—ñ–ª—å—Ç—Ä–æ–º
            await HandleMyAppealsCallbackAsync(botClient, callbackQuery, cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—É —Å—Ç–∞—Ç—É—Å—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", callbackQuery.From.Id);
        }
    }

    /// <summary>
    /// –ó–∞—Å—Ç–æ—Å–æ–≤—É—î —Ñ—ñ–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
    /// </summary>
    public async Task HandleAppealsFilterCategoryCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            var userId = callbackQuery.From.Id;
            var category = FilterHelper.ParseAppealCategoryFromCallback(callbackQuery.Data!);

            if (category.HasValue)
            {
                _appealCategoryFilters[userId] = category.Value;
                await botClient.AnswerCallbackQueryAsync(
                    callbackQueryId: callbackQuery.Id,
                    text: $"‚úÖ –§—ñ–ª—å—Ç—Ä: {category.Value.GetDisplayName()}",
                    cancellationToken: cancellationToken);
            }

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ —Å–ø–∏—Å–∫—É –∑–≤–µ—Ä–Ω–µ–Ω—å –∑ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∏–º —Ñ—ñ–ª—å—Ç—Ä–æ–º
            await HandleMyAppealsCallbackAsync(botClient, callbackQuery, cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", callbackQuery.From.Id);
        }
    }

    /// <summary>
    /// –û—á–∏—â–∞—î —Ñ—ñ–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å—É –∑–≤–µ—Ä–Ω–µ–Ω—å
    /// </summary>
    public async Task HandleAppealsClearStatusFilterCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            var userId = callbackQuery.From.Id;
            _appealStatusFilters.Remove(userId);

            await botClient.AnswerCallbackQueryAsync(
                callbackQueryId: callbackQuery.Id,
                text: "‚úÖ –§—ñ–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å—É —Å–∫–∏–Ω—É—Ç–æ",
                cancellationToken: cancellationToken);

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ —Å–ø–∏—Å–∫—É –∑–≤–µ—Ä–Ω–µ–Ω—å
            await HandleMyAppealsCallbackAsync(botClient, callbackQuery, cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∏–¥–∞–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—É —Å—Ç–∞—Ç—É—Å—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", callbackQuery.From.Id);
        }
    }

    /// <summary>
    /// –û—á–∏—â–∞—î —Ñ—ñ–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–≤–µ—Ä–Ω–µ–Ω—å
    /// </summary>
    public async Task HandleAppealsClearCategoryFilterCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            var userId = callbackQuery.From.Id;
            _appealCategoryFilters.Remove(userId);

            await botClient.AnswerCallbackQueryAsync(
                callbackQueryId: callbackQuery.Id,
                text: "‚úÖ –§—ñ–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Å–∫–∏–Ω—É—Ç–æ",
                cancellationToken: cancellationToken);

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ —Å–ø–∏—Å–∫—É –∑–≤–µ—Ä–Ω–µ–Ω—å
            await HandleMyAppealsCallbackAsync(botClient, callbackQuery, cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∏–¥–∞–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", callbackQuery.From.Id);
        }
    }

    /// <summary>
    /// –û—á–∏—â–∞—î –≤—Å—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω—å
    /// </summary>
    public async Task HandleAppealsClearAllFiltersCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            var userId = callbackQuery.From.Id;
            _appealStatusFilters.Remove(userId);
            _appealCategoryFilters.Remove(userId);

            await botClient.AnswerCallbackQueryAsync(
                callbackQueryId: callbackQuery.Id,
                text: "‚úÖ –í—Å—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ —Å–∫–∏–Ω—É—Ç–æ",
                cancellationToken: cancellationToken);

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ —Å–ø–∏—Å–∫—É –∑–≤–µ—Ä–Ω–µ–Ω—å
            await HandleMyAppealsCallbackAsync(botClient, callbackQuery, cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∏–¥–∞–Ω–Ω—ñ –≤—Å—ñ—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", callbackQuery.From.Id);
        }
    }

    #endregion
}