using MediatR;
using Microsoft.Extensions.Logging;
using StudentUnionBot.Application.Common.Interfaces;
using StudentUnionBot.Domain.Enums;
using StudentUnionBot.Domain.Interfaces;
using StudentUnionBot.Application.Contacts.Queries.GetAllContacts;
using StudentUnionBot.Application.Events.Queries.GetUpcomingEvents;
using StudentUnionBot.Application.News.Queries.GetPublishedNews;
using StudentUnionBot.Application.Partners.Queries.GetActivePartners;
using StudentUnionBot.Application.Users.Commands.RegisterUser;
using StudentUnionBot.Application.Appeals.Commands.CreateAppeal;
using StudentUnionBot.Application.Appeals.Queries.GetUserAppeals;
using StudentUnionBot.Application.Appeals.Queries.GetAppealById;
using StudentUnionBot.Application.Appeals.Queries.GetAdminAppeals;
using StudentUnionBot.Application.Appeals.Commands.ReplyToAppeal;
using StudentUnionBot.Application.Appeals.Commands.CloseAppeal;
using StudentUnionBot.Application.Appeals.Commands.AssignAppeal;
using StudentUnionBot.Application.Appeals.Commands.UpdatePriority;
using StudentUnionBot.Application.Users.Commands.SendVerificationEmail;
using StudentUnionBot.Application.Users.Commands.VerifyEmail;
using StudentUnionBot.Presentation.Bot.Keyboards;
using Telegram.Bot;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace StudentUnionBot.Presentation.Bot.Handlers;

/// <summary>
/// –ì–æ–ª–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –æ–Ω–æ–≤–ª–µ–Ω—å –≤—ñ–¥ Telegram
/// </summary>
public class UpdateHandler : IBotUpdateHandler
{
    private readonly ILogger<UpdateHandler> _logger;
    private readonly IServiceScopeFactory _scopeFactory;
    private readonly IUserStateManager _stateManager;

    public UpdateHandler(
        ILogger<UpdateHandler> logger,
        IServiceScopeFactory scopeFactory,
        IUserStateManager stateManager)
    {
        _logger = logger;
        _scopeFactory = scopeFactory;
        _stateManager = stateManager;
    }

    public async Task HandleUpdateAsync(
        ITelegramBotClient botClient,
        Update update,
        CancellationToken cancellationToken)
    {
        var handler = update.Type switch
        {
            UpdateType.Message => HandleMessageAsync(botClient, update.Message!, cancellationToken),
            UpdateType.CallbackQuery => HandleCallbackQueryAsync(botClient, update.CallbackQuery!, cancellationToken),
            UpdateType.EditedMessage => HandleEditedMessageAsync(botClient, update.EditedMessage!, cancellationToken),
            _ => HandleUnknownUpdateAsync(botClient, update, cancellationToken)
        };

        try
        {
            await handler;
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(botClient, ex, cancellationToken);
        }
    }

    private async Task HandleMessageAsync(
        ITelegramBotClient botClient,
        Message message,
        CancellationToken cancellationToken)
    {
        if (message.Text is not { } messageText)
            return;

        var chatId = message.Chat.Id;
        var userId = message.From?.Id ?? 0;

        _logger.LogInformation(
            "–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {UserId} –≤ —á–∞—Ç—ñ {ChatId}: {Text}",
            userId,
            chatId,
            messageText);

        // –†–µ—î—Å—Ç—Ä—É—î–º–æ/–æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∏ –∫–æ–∂–Ω—ñ–π –≤–∑–∞—î–º–æ–¥—ñ—ó
        await RegisterOrUpdateUserAsync(message.From, cancellationToken);

        // –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
        if (messageText.StartsWith('/'))
        {
            await HandleCommandAsync(botClient, message, cancellationToken);
            return;
        }

        // –û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        await HandleTextMessageAsync(botClient, message, cancellationToken);
    }

    private async Task RegisterOrUpdateUserAsync(User? user, CancellationToken cancellationToken)
    {
        if (user == null) return;

        try
        {
            using var scope = _scopeFactory.CreateScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
            
            var command = new RegisterUserCommand
            {
                TelegramId = user.Id,
                Username = user.Username,
                FirstName = user.FirstName,
                LastName = user.LastName,
                Language = user.LanguageCode ?? "uk"
            };

            await mediator.Send(command, cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", user.Id);
        }
    }

    private async Task HandleCommandAsync(
        ITelegramBotClient botClient,
        Message message,
        CancellationToken cancellationToken)
    {
        var command = message.Text!.Split(' ')[0].ToLower();
        var userId = message.From!.Id;

        _logger.LogInformation("–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏: {Command}", command);

        // –ö–æ–º–∞–Ω–¥–∏ /start —Ç–∞ /appeal —Å–∫–∞—Å–æ–≤—É—é—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ—Ü–µ—Å
        if (command == "/start" || command == "/appeal")
        {
            await _stateManager.ClearStateAsync(userId, cancellationToken);
            await _stateManager.ClearAllDataAsync(userId, cancellationToken);
        }

        // Check if user is admin for menu display
        using var menuScope = _scopeFactory.CreateScope();
        var userRepoForMenu = menuScope.ServiceProvider.GetRequiredService<IUserRepository>();
        var userForMenu = await userRepoForMenu.GetByTelegramIdAsync(message.From.Id, cancellationToken);
        var isAdmin = userForMenu?.Role == UserRole.Admin;

        _logger.LogInformation(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {TelegramId} –º–∞—î —Ä–æ–ª—å {Role}, isAdmin={IsAdmin}",
            message.From.Id,
            userForMenu?.Role,
            isAdmin);

        var (responseText, keyboard) = command switch
        {
            "/start" => (
                "üéì <b>–í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ –°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–æ–≥–æ –ü—Ä–æ—Ñ–∫–æ–º—É –í–ù–ú–£!</b>\n\n" +
                "–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º:\n" +
                "üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø—Ä–æ—Ñ–∫–æ–º—É\n" +
                "üìã –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–≤–µ—Ä–Ω–µ–Ω—å\n" +
                "üì∞ –î—ñ–∑–Ω–∞–≤–∞—Ç–∏—Å—è –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏\n" +
                "üéâ –ë—É—Ç–∏ –≤ –∫—É—Ä—Å—ñ –º–∞–π–±—É—Ç–Ω—ñ—Ö –ø–æ–¥—ñ–π\n" +
                "ü§ù –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑–Ω–∏–∂–∫–∏ –≤—ñ–¥ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤\n\n" +
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
                KeyboardFactory.GetMainMenuKeyboard(isAdmin) as IReplyMarkup),
            
            "/help" => (
                "üìå <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n" +
                "<b>–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n" +
                "/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n" +
                "/appeal - –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è\n" +
                "/myappeals - –ú–æ—ó –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è\n" +
                "/news - –ù–æ–≤–∏–Ω–∏\n" +
                "/events - –ó–∞—Ö–æ–¥–∏\n" +
                "/profile - –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\n" +
                "/contacts - –ö–æ–Ω—Ç–∞–∫—Ç–∏\n\n" +
                "<b>–Ø–∫ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è?</b>\n" +
                "1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è'\n" +
                "2. –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é\n" +
                "3. –û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É\n" +
                "4. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó\n\n" +
                "–ó–∞ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å: @vnmu_profkom",
                KeyboardFactory.GetBackToMainMenuKeyboard() as IReplyMarkup),
            
            "/appeal" => (
                "üìù <b>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è</b>\n\n" +
                "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∞—à–æ–≥–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:",
                KeyboardFactory.GetAppealCategoriesKeyboard() as IReplyMarkup),
            
            "/myappeals" => (
                "üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∞—à–∏—Ö –∑–≤–µ—Ä–Ω–µ–Ω—å...",
                null as IReplyMarkup),
            
            "/news" => (
                "üì∞ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω...",
                null as IReplyMarkup),
            
            "/events" => (
                "üéâ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–¥—ñ–π...",
                null as IReplyMarkup),
            
            "/profile" => (
                "üë§ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é...",
                null as IReplyMarkup),
            
            "/contacts" => (
                "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</b>\n\n" +
                "üèõ <b>–°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∏–π –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–æ–≤–∏–π –∫–æ–º—ñ—Ç–µ—Ç –í–ù–ú–£</b>\n\n" +
                "üìß Email: profkom@vnmu.edu.ua\n" +
                "üì± Telegram: @vnmu_profkom\n" +
                "üìç –ê–¥—Ä–µ—Å–∞: –≤—É–ª. –ü–∏—Ä–æ–≥–æ–≤–∞, 56, –í—ñ–Ω–Ω–∏—Ü—è\n" +
                "üïê –ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏: –ü–ù-–ü–¢ 9:00-17:00\n\n" +
                "–ú–∏ –∑–∞–≤–∂–¥–∏ —Ä–∞–¥—ñ –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏! ü§ù",
                KeyboardFactory.GetBackToMainMenuKeyboard() as IReplyMarkup),
            
            _ => (
                "‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.",
                KeyboardFactory.GetBackToMainMenuKeyboard() as IReplyMarkup)
        };

        await botClient.SendTextMessageAsync(
            chatId: message.Chat.Id,
            text: responseText,
            parseMode: ParseMode.Html,
            replyMarkup: keyboard,
            cancellationToken: cancellationToken);
    }

    private async Task HandleTextMessageAsync(
        ITelegramBotClient botClient,
        Message message,
        CancellationToken cancellationToken)
    {
        var userId = message.From!.Id;
        var state = await _stateManager.GetStateAsync(userId, cancellationToken);

        // –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        switch (state)
        {
            case UserConversationState.WaitingAppealSubject:
                await HandleAppealSubjectInputAsync(botClient, message, cancellationToken);
                break;

            case UserConversationState.WaitingAppealMessage:
                await HandleAppealMessageInputAsync(botClient, message, cancellationToken);
                break;

            case UserConversationState.WaitingEmailInput:
                await HandleEmailInputAsync(botClient, message, cancellationToken);
                break;

            case UserConversationState.WaitingVerificationCode:
                await HandleVerificationCodeInputAsync(botClient, message, cancellationToken);
                break;

            default:
                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è Idle —Å—Ç–∞–Ω—É
                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: "–Ø –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥.",
                    replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                    cancellationToken: cancellationToken);
                break;
        }
    }

    private async Task HandleAppealSubjectInputAsync(
        ITelegramBotClient botClient,
        Message message,
        CancellationToken cancellationToken)
    {
        var userId = message.From!.Id;
        var subject = message.Text?.Trim();

        if (string.IsNullOrWhiteSpace(subject) || subject.Length < 5)
        {
            await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "‚ùå –¢–µ–º–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —â–æ–Ω–∞–π–º–µ–Ω—à–µ 5 —Å–∏–º–≤–æ–ª—ñ–≤.",
                cancellationToken: cancellationToken);
            return;
        }

        if (subject.Length > 200)
        {
            await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "‚ùå –¢–µ–º–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª—ñ–≤.",
                cancellationToken: cancellationToken);
            return;
        }

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ–º—É
        await _stateManager.SetDataAsync(userId, "appeal_subject", subject, cancellationToken);

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
        await _stateManager.SetStateAsync(userId, UserConversationState.WaitingAppealMessage, cancellationToken);

        await botClient.SendTextMessageAsync(
            chatId: message.Chat.Id,
            text: $"‚úÖ –¢–µ–º–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞: <b>{subject}</b>\n\n" +
                  "üìù –¢–µ–ø–µ—Ä –æ–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –¥–µ—Ç–∞–ª—å–Ω–æ.\n\n" +
                  "<i>–ú—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤, –º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª—ñ–≤.</i>",
            parseMode: ParseMode.Html,
            cancellationToken: cancellationToken);
    }

    private async Task HandleAppealMessageInputAsync(
        ITelegramBotClient botClient,
        Message message,
        CancellationToken cancellationToken)
    {
        var userId = message.From!.Id;
        var messageText = message.Text?.Trim();

        if (string.IsNullOrWhiteSpace(messageText) || messageText.Length < 10)
        {
            await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ (–º—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤).",
                cancellationToken: cancellationToken);
            return;
        }

        if (messageText.Length > 2000)
        {
            await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ. –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª—ñ–≤.",
                cancellationToken: cancellationToken);
            return;
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ
        var category = await _stateManager.GetDataAsync<AppealCategory>(userId, "appeal_category", cancellationToken);
        var subject = await _stateManager.GetDataAsync<string>(userId, "appeal_subject", cancellationToken);

        // AppealCategory —î enum, —Ç–æ–º—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ subject
        if (string.IsNullOrEmpty(subject))
        {
            await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "‚ùå –ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ. –ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É /appeal",
                replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                cancellationToken: cancellationToken);

            await _stateManager.ClearStateAsync(userId, cancellationToken);
            await _stateManager.ClearAllDataAsync(userId, cancellationToken);
            return;
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è —á–µ—Ä–µ–∑ MediatR
        try
        {
            using var scope = _scopeFactory.CreateScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

            var command = new CreateAppealCommand
            {
                StudentId = userId,
                StudentName = $"{message.From.FirstName} {message.From.LastName}".Trim(),
                Category = category,
                Subject = subject,
                Message = messageText
            };

            var result = await mediator.Send(command, cancellationToken);

            if (result.IsSuccess)
            {
                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: $"‚úÖ <b>–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b>\n\n" +
                          $"üìã –ù–æ–º–µ—Ä: #{result.Value!.Id}\n" +
                          $"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {result.Value.Category}\n" +
                          $"üìå –¢–µ–º–∞: {result.Value.Subject}\n" +
                          $"üìä –°—Ç–∞—Ç—É—Å: {result.Value.Status}\n\n" +
                          $"–ú–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –≤–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n" +
                          $"–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É.",
                    parseMode: ParseMode.Html,
                    replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                    cancellationToken: cancellationToken);

                // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
                await _stateManager.ClearStateAsync(userId, cancellationToken);
                await _stateManager.ClearAllDataAsync(userId, cancellationToken);
            }
            else
            {
                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: $"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:\n{result.Error}\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ /appeal",
                    parseMode: ParseMode.Html,
                    replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                    cancellationToken: cancellationToken);

                await _stateManager.ClearStateAsync(userId, cancellationToken);
                await _stateManager.ClearAllDataAsync(userId, cancellationToken);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", userId);

            await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "‚ùå –í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                cancellationToken: cancellationToken);

            await _stateManager.ClearStateAsync(userId, cancellationToken);
            await _stateManager.ClearAllDataAsync(userId, cancellationToken);
        }
    }

    private async Task HandleEmailInputAsync(
        ITelegramBotClient botClient,
        Message message,
        CancellationToken cancellationToken)
    {
        var userId = message.From!.Id;
        var email = message.Text?.Trim();

        // Basic email validation
        if (string.IsNullOrWhiteSpace(email) || !email.Contains("@") || email.Length < 5)
        {
            await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∞–¥—Ä–µ—Å—É.\n\n" +
                      "<i>–ù–∞–ø—Ä–∏–∫–ª–∞–¥: student@vnmu.edu.ua</i>",
                parseMode: ParseMode.Html,
                cancellationToken: cancellationToken);
            return;
        }

        if (email.Length > 100)
        {
            await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "‚ùå Email –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª—ñ–≤.",
                cancellationToken: cancellationToken);
            return;
        }

        try
        {
            using var scope = _scopeFactory.CreateScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

            // Send verification email via MediatR
            var command = new SendVerificationEmailCommand
            {
                TelegramId = userId,
                Email = email
            };

            var result = await mediator.Send(command, cancellationToken);

            if (result.IsSuccess)
            {
                // Change state to waiting for verification code
                await _stateManager.SetStateAsync(userId, UserConversationState.WaitingVerificationCode, cancellationToken);

                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: $"‚úÖ <b>–ö–æ–¥ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n" +
                          $"üìß –ù–∞ –∞–¥—Ä–µ—Å—É <code>{email}</code> –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ª–∏—Å—Ç –∑ 6-–∑–Ω–∞—á–Ω–∏–º –∫–æ–¥–æ–º.\n\n" +
                          $"‚è∞ –ö–æ–¥ –¥—ñ–π—Å–Ω–∏–π –ø—Ä–æ—Ç—è–≥–æ–º 15 —Ö–≤–∏–ª–∏–Ω.\n\n" +
                          $"–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∑ –ª–∏—Å—Ç–∞:",
                    parseMode: ParseMode.Html,
                    replyMarkup: new InlineKeyboardMarkup(InlineKeyboardButton.WithCallbackData("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", "profile_view")),
                    cancellationToken: cancellationToken);
            }
            else
            {
                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: $"‚ùå {result.Error}\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ –æ–ø–µ—Ä–∞—Ü—ñ—é /cancel",
                    replyMarkup: new InlineKeyboardMarkup(InlineKeyboardButton.WithCallbackData("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", "profile_view")),
                    cancellationToken: cancellationToken);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ verification email –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", userId);

            await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "‚ùå –í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                cancellationToken: cancellationToken);

            await _stateManager.ClearStateAsync(userId, cancellationToken);
        }
    }

    private async Task HandleVerificationCodeInputAsync(
        ITelegramBotClient botClient,
        Message message,
        CancellationToken cancellationToken)
    {
        var userId = message.From!.Id;
        var code = message.Text?.Trim();

        // Validate code format (6 digits)
        if (string.IsNullOrWhiteSpace(code) || code.Length != 6 || !code.All(char.IsDigit))
        {
            await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å 6 —Ü–∏—Ñ—Ä.\n\n" +
                      "<i>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–¥ —É –ª–∏—Å—Ç—ñ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.</i>",
                parseMode: ParseMode.Html,
                cancellationToken: cancellationToken);
            return;
        }

        try
        {
            using var scope = _scopeFactory.CreateScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

            // Verify email code via MediatR
            var command = new VerifyEmailCommand
            {
                TelegramId = userId,
                Code = code
            };

            var result = await mediator.Send(command, cancellationToken);

            if (result.IsSuccess && result.Value)
            {
                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: "‚úÖ <b>Email —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!</b>\n\n" +
                          "üéâ –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞ –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É.\n\n" +
                          "–î—è–∫—É—î–º–æ –∑–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é!",
                    parseMode: ParseMode.Html,
                    replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                    cancellationToken: cancellationToken);

                // Clear state
                await _stateManager.ClearStateAsync(userId, cancellationToken);
            }
            else
            {
                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: $"‚ùå {result.Error}\n\n" +
                          "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–¥ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑, –∞–±–æ –∑–∞–ø–∏—Ç–∞–π—Ç–µ –Ω–æ–≤–∏–π –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ.",
                    replyMarkup: new InlineKeyboardMarkup(InlineKeyboardButton.WithCallbackData("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", "profile_view")),
                    cancellationToken: cancellationToken);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó email –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", userId);

            await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "‚ùå –í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∫–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                cancellationToken: cancellationToken);

            await _stateManager.ClearStateAsync(userId, cancellationToken);
        }
    }

    private async Task HandleCallbackQueryAsync(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        _logger.LogInformation(
            "–û—Ç—Ä–∏–º–∞–Ω–æ callback –≤—ñ–¥ {UserId}: {Data}",
            callbackQuery.From.Id,
            callbackQuery.Data);

        if (callbackQuery.Data == null || callbackQuery.Message == null)
            return;

        var data = callbackQuery.Data;

        // –û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö callback'—ñ–≤
        try
        {
            if (data == "back_to_main")
            {
                // –°–∫–∞—Å–æ–≤—É—î–º–æ –±—É–¥—å-—è–∫–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å
                var userId = callbackQuery.From.Id;
                await _stateManager.ClearStateAsync(userId, cancellationToken);
                await _stateManager.ClearAllDataAsync(userId, cancellationToken);

                // Check if user is admin for menu display
                using var backScope = _scopeFactory.CreateScope();
                var userRepoForBack = backScope.ServiceProvider.GetRequiredService<IUserRepository>();
                var userForBack = await userRepoForBack.GetByTelegramIdAsync(callbackQuery.From.Id, cancellationToken);
                var isAdminBack = userForBack?.Role == UserRole.Admin;

                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "üéì <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                    parseMode: ParseMode.Html,
                    replyMarkup: KeyboardFactory.GetMainMenuKeyboard(isAdminBack),
                    cancellationToken: cancellationToken);
            }
            else if (data == "appeal_create")
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "üìù <b>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è</b>\n\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
                    parseMode: ParseMode.Html,
                    replyMarkup: KeyboardFactory.GetAppealCategoriesKeyboard(),
                    cancellationToken: cancellationToken);
            }
            else if (data.StartsWith("appeal_cat_"))
            {
                await HandleAppealCategorySelection(botClient, callbackQuery, data, cancellationToken);
            }
            else if (data.StartsWith("appeal_view_"))
            {
                await HandleAppealViewCallback(botClient, callbackQuery, data, cancellationToken);
            }
            else if (data == "appeal_list")
            {
                await HandleMyAppealsCallback(botClient, callbackQuery, cancellationToken);
            }
            else if (data == "news_list")
            {
                await HandleNewsListCallback(botClient, callbackQuery, cancellationToken);
            }
            else if (data == "events_list")
            {
                await HandleEventsListCallback(botClient, callbackQuery, cancellationToken);
            }
            else if (data == "partners_list")
            {
                await HandlePartnersListCallback(botClient, callbackQuery, cancellationToken);
            }
            else if (data == "contacts_list")
            {
                await HandleContactsListCallback(botClient, callbackQuery, cancellationToken);
            }
            else if (data == "profile_view")
            {
                await HandleProfileViewCallback(botClient, callbackQuery, cancellationToken);
            }
            else if (data == "profile_edit_email")
            {
                await HandleProfileEditEmailCallback(botClient, callbackQuery, cancellationToken);
            }
            else if (data == "help")
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "‚ÑπÔ∏è <b>–î–æ–ø–æ–º–æ–≥–∞</b>\n\n" +
                          "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.\n" +
                          "–ö–æ–º–∞–Ω–¥–∏: /start, /help, /appeal, /contacts",
                    parseMode: ParseMode.Html,
                    replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                    cancellationToken: cancellationToken);
            }
            // ==================== ADMIN CALLBACKS ====================
            else if (data == "admin_panel")
            {
                await HandleAdminPanelCallback(botClient, callbackQuery, cancellationToken);
            }
            else if (data.StartsWith("admin_appeals_"))
            {
                await HandleAdminAppealsListCallback(botClient, callbackQuery, cancellationToken);
            }
            else if (data.StartsWith("admin_view_"))
            {
                await HandleAdminAppealViewCallback(botClient, callbackQuery, cancellationToken);
            }
            else if (data.StartsWith("admin_assign_me_"))
            {
                await HandleAdminAssignToMeCallback(botClient, callbackQuery, cancellationToken);
            }
            else if (data.StartsWith("admin_unassign_"))
            {
                await HandleAdminUnassignCallback(botClient, callbackQuery, cancellationToken);
            }
            else if (data.StartsWith("admin_priority_"))
            {
                await HandleAdminPriorityMenuCallback(botClient, callbackQuery, cancellationToken);
            }
            else if (data.StartsWith("admin_set_priority_"))
            {
                await HandleAdminSetPriorityCallback(botClient, callbackQuery, cancellationToken);
            }
            else if (data.StartsWith("admin_close_"))
            {
                await HandleAdminCloseAppealCallback(botClient, callbackQuery, cancellationToken);
            }

            await botClient.AnswerCallbackQueryAsync(
                callbackQueryId: callbackQuery.Id,
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ callback: {Data}", data);
            await botClient.AnswerCallbackQueryAsync(
                callbackQueryId: callbackQuery.Id,
                text: "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                showAlert: true,
                cancellationToken: cancellationToken);
        }
    }

    private async Task HandleAppealCategorySelection(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        string data,
        CancellationToken cancellationToken)
    {
        var userId = callbackQuery.From.Id;
        var categoryId = int.Parse(data.Replace("appeal_cat_", ""));
        
        var categoryNames = new Dictionary<int, string>
        {
            { 1, "üí∞ –°—Ç–∏–ø–µ–Ω–¥—ñ—è" },
            { 2, "üè† –ì—É—Ä—Ç–æ–∂–∏—Ç–æ–∫" },
            { 3, "üéâ –ó–∞—Ö–æ–¥–∏" },
            { 4, "üí° –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è" },
            { 5, "‚ö†Ô∏è –°–∫–∞—Ä–≥–∞" },
            { 6, "üìù –Ü–Ω—à–µ" }
        };

        var categoryName = categoryNames.GetValueOrDefault(categoryId, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è");
        var category = (AppealCategory)categoryId;

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±—Ä–∞–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        await _stateManager.SetDataAsync(userId, "appeal_category", category, cancellationToken);

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–µ–º–∏
        await _stateManager.SetStateAsync(userId, UserConversationState.WaitingAppealSubject, cancellationToken);

        await botClient.EditMessageTextAsync(
            chatId: callbackQuery.Message!.Chat.Id,
            messageId: callbackQuery.Message.MessageId,
            text: $"üìù <b>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è</b>\n\n" +
                  $"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {categoryName}\n\n" +
                  $"–ù–∞–ø–∏—à—ñ—Ç—å <b>—Ç–µ–º—É</b> –≤–∞—à–æ–≥–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:\n\n" +
                  $"<i>–ú—ñ–Ω—ñ–º—É–º 5 —Å–∏–º–≤–æ–ª—ñ–≤, –º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª—ñ–≤</i>",
            parseMode: ParseMode.Html,
            replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
            cancellationToken: cancellationToken);
    }

    private async Task HandleMyAppealsCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        var userId = callbackQuery.From.Id;

        try
        {
            using var scope = _scopeFactory.CreateScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

            // –û—Ç—Ä–∏–º—É—î–º–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            var query = new GetUserAppealsQuery
            {
                UserId = userId,
                PageSize = 5,
                PageNumber = 1,
                OnlyActive = false // –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
            };

            var result = await mediator.Send(query, cancellationToken);

            if (!result.IsSuccess)
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: $"‚ùå –ü–æ–º–∏–ª–∫–∞: {result.Error}",
                    parseMode: ParseMode.Html,
                    replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                    cancellationToken: cancellationToken);
                return;
            }

            var appeals = result.Value ?? new List<StudentUnionBot.Application.Appeals.DTOs.AppealDto>();

            if (appeals.Count == 0)
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "üìã <b>–ú–æ—ó –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è</b>\n\n" +
                          "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–≤–µ—Ä–Ω–µ–Ω—å.\n\n" +
                          "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å \"üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è\" —â–æ–± –ø–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è.",
                    parseMode: ParseMode.Html,
                    replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                    cancellationToken: cancellationToken);
                return;
            }

            // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑—ñ —Å–ø–∏—Å–∫–æ–º –∑–≤–µ—Ä–Ω–µ–Ω—å
            var text = "üìã <b>–ú–æ—ó –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è</b>\n\n";

            foreach (var appeal in appeals)
            {
                var statusEmoji = appeal.Status.GetEmoji();
                var categoryEmoji = appeal.Category.GetEmoji();
                var daysAgo = (DateTime.UtcNow - appeal.CreatedAt).Days;
                var timeAgo = daysAgo == 0 ? "—Å—å–æ–≥–æ–¥–Ω—ñ" : 
                              daysAgo == 1 ? "–≤—á–æ—Ä–∞" : 
                              $"{daysAgo} –¥–Ω. —Ç–æ–º—É";

                text += $"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
                text += $"<b>#{appeal.Id}</b> {categoryEmoji} {appeal.CategoryName}\n";
                text += $"üìå <b>{appeal.Subject}</b>\n";
                text += $"{statusEmoji} {appeal.StatusName}\n";
                text += $"üìÖ {appeal.CreatedAt:dd.MM.yyyy} ({timeAgo})\n";

                if (appeal.MessageCount > 0)
                {
                    text += $"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {appeal.MessageCount}\n";
                }

                if (appeal.ClosedAt.HasValue)
                {
                    text += $"‚úÖ –ó–∞–∫—Ä–∏—Ç–æ: {appeal.ClosedAt.Value:dd.MM.yyyy HH:mm}\n";
                }

                text += "\n";
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
            var buttons = new List<List<InlineKeyboardButton>>();

            foreach (var appeal in appeals)
            {
                buttons.Add(new List<InlineKeyboardButton>
                {
                    InlineKeyboardButton.WithCallbackData(
                        $"#{appeal.Id} - {appeal.Subject}",
                        $"appeal_view_{appeal.Id}"
                    )
                });
            }

            // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            buttons.Add(new List<InlineKeyboardButton>
            {
                InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", "back_to_main")
            });

            var keyboard = new InlineKeyboardMarkup(buttons);

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: text,
                parseMode: ParseMode.Html,
                replyMarkup: keyboard,
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–≤–µ—Ä–Ω–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", userId);

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–≤–µ—Ä–Ω–µ–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                parseMode: ParseMode.Html,
                replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                cancellationToken: cancellationToken);
        }
    }

    private async Task HandleAppealViewCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        string callbackData,
        CancellationToken cancellationToken)
    {
        var userId = callbackQuery.From.Id;
        
        // –ü–∞—Ä—Å–∏–º–æ ID –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑ callback data (appeal_view_123)
        var appealIdStr = callbackData.Replace("appeal_view_", "");
        if (!int.TryParse(appealIdStr, out var appealId))
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        try
        {
            using var scope = _scopeFactory.CreateScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
            var query = new StudentUnionBot.Application.Appeals.Queries.GetAppealById.GetAppealByIdQuery
            {
                AppealId = appealId,
                RequestUserId = userId
            };

            var result = await mediator.Send(query, cancellationToken);

            if (!result.IsSuccess)
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: $"‚ùå {result.Error}",
                    parseMode: ParseMode.Html,
                    replyMarkup: new InlineKeyboardMarkup(new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üîô –î–æ —Å–ø–∏—Å–∫—É –∑–≤–µ—Ä–Ω–µ–Ω—å", "appeal_list")
                    }),
                    cancellationToken: cancellationToken);
                return;
            }

            var appeal = result.Value!;

            // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –¥–µ—Ç–∞–ª—è–º–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
            var statusEmoji = appeal.Status.GetEmoji();
            var categoryEmoji = appeal.Category.GetEmoji();
            
            var text = $"üìã <b>–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è #{appeal.Id}</b>\n\n";
            text += $"{categoryEmoji} <b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {appeal.CategoryName}\n";
            text += $"{statusEmoji} <b>–°—Ç–∞—Ç—É—Å:</b> {appeal.StatusName}\n";
            text += $"üìä <b>–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç:</b> {appeal.PriorityName}\n";
            text += $"üìÖ <b>–°—Ç–≤–æ—Ä–µ–Ω–æ:</b> {appeal.CreatedAt:dd.MM.yyyy HH:mm}\n";
            
            if (appeal.FirstResponseAt.HasValue)
            {
                text += $"‚è± <b>–ü–µ—Ä—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:</b> {appeal.FirstResponseAt.Value:dd.MM.yyyy HH:mm}\n";
            }
            
            if (appeal.ClosedAt.HasValue)
            {
                text += $"‚úÖ <b>–ó–∞–∫—Ä–∏—Ç–æ:</b> {appeal.ClosedAt.Value:dd.MM.yyyy HH:mm}\n";
                if (!string.IsNullOrEmpty(appeal.ClosedReason))
                {
                    text += $"<b>–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è:</b> {appeal.ClosedReason}\n";
                }
            }
            
            text += $"\n<b>–¢–µ–º–∞:</b>\n{appeal.Subject}\n\n";
            text += $"<b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n{appeal.Message}\n";

            // –î–æ–¥–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —è–∫—â–æ –≤–æ–Ω–∏ —î
            if (appeal.Messages.Count > 0)
            {
                text += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
                text += "<b>üì¨ –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:</b>\n\n";

                foreach (var msg in appeal.Messages)
                {
                    var senderIcon = msg.IsFromAdmin ? "üë®‚Äçüíº" : "üë§";
                    var senderLabel = msg.IsFromAdmin ? "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä" : "–í–∏";
                    
                    text += $"{senderIcon} <b>{senderLabel}</b> ({msg.SentAt:dd.MM HH:mm})\n";
                    text += $"{msg.Text}\n\n";
                }
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
            var buttons = new List<List<InlineKeyboardButton>>();

            // –Ø–∫—â–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–µ - –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if (appeal.Status != AppealStatus.Closed)
            {
                buttons.Add(new List<InlineKeyboardButton>
                {
                    InlineKeyboardButton.WithCallbackData(
                        "üí¨ –î–æ–¥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
                        $"appeal_add_msg_{appeal.Id}"
                    )
                });
            }

            // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
            buttons.Add(new List<InlineKeyboardButton>
            {
                InlineKeyboardButton.WithCallbackData("üîô –î–æ —Å–ø–∏—Å–∫—É", "appeal_list")
            });

            var keyboard = new InlineKeyboardMarkup(buttons);

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: text,
                parseMode: ParseMode.Html,
                replyMarkup: keyboard,
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–ª—è–¥—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è {AppealId}", appealId);

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è",
                parseMode: ParseMode.Html,
                replyMarkup: new InlineKeyboardMarkup(new[]
                {
                    InlineKeyboardButton.WithCallbackData("üîô –î–æ —Å–ø–∏—Å–∫—É", "appeal_list")
                }),
                cancellationToken: cancellationToken);
        }
    }

    private async Task HandleProfileViewCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        var userId = callbackQuery.From.Id;
        
        using var scope = _scopeFactory.CreateScope();
        var userRepo = scope.ServiceProvider.GetRequiredService<IUserRepository>();
        var user = await userRepo.GetByTelegramIdAsync(userId, cancellationToken);

        if (user == null)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var username = user.Username ?? "–Ω–µ–º–∞—î";
        var fullName = user.FullName ?? $"{callbackQuery.From.FirstName} {callbackQuery.From.LastName}".Trim();
        var email = user.Email ?? "<i>–Ω–µ –≤–∫–∞–∑–∞–Ω–æ</i>";
        var emailStatus = user.IsEmailVerified ? "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ" : "‚ùå –ù–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ";

        var profileText = "üë§ <b>–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å</b>\n\n" +
                         $"<b>–Ü–º'—è:</b> {fullName}\n" +
                         $"<b>Username:</b> @{username}\n" +
                         $"<b>Email:</b> {email}\n" +
                         $"<b>–°—Ç–∞—Ç—É—Å email:</b> {emailStatus}\n" +
                         $"<b>ID:</b> <code>{userId}</code>";

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üìß –ó–º—ñ–Ω–∏—Ç–∏ email", "profile_edit_email")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "back_to_main")
            }
        });

        await botClient.EditMessageTextAsync(
            chatId: callbackQuery.Message!.Chat.Id,
            messageId: callbackQuery.Message.MessageId,
            text: profileText,
            parseMode: ParseMode.Html,
            replyMarkup: keyboard,
            cancellationToken: cancellationToken);
    }

    private async Task HandleProfileEditEmailCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        var userId = callbackQuery.From.Id;

        // Set state to waiting for email input
        await _stateManager.SetStateAsync(userId, UserConversationState.WaitingEmailInput, cancellationToken);

        await botClient.EditMessageTextAsync(
            chatId: callbackQuery.Message!.Chat.Id,
            messageId: callbackQuery.Message.MessageId,
            text: "üìß <b>–ó–º—ñ–Ω–∞ email</b>\n\n" +
                  "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É email –∞–¥—Ä–µ—Å—É (–±–∞–∂–∞–Ω–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å—å–∫—É):\n\n" +
                  "<i>–ù–∞–ø—Ä–∏–∫–ª–∞–¥: student@vnmu.edu.ua</i>\n\n" +
                  "–ù–∞–¥—ñ—à–ª—ñ—Ç—å /cancel —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏",
            parseMode: ParseMode.Html,
            replyMarkup: new InlineKeyboardMarkup(InlineKeyboardButton.WithCallbackData("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", "profile_view")),
            cancellationToken: cancellationToken);
    }

    private async Task HandleNewsListCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            using var scope = _scopeFactory.CreateScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
            
            // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–∏–Ω–∏ —á–µ—Ä–µ–∑ MediatR
            var query = new GetPublishedNewsQuery
            {
                PageNumber = 1,
                PageSize = 5
            };

            var result = await mediator.Send(query, cancellationToken);

            if (!result.IsSuccess || result.Value == null)
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "üì∞ <b>–ù–æ–≤–∏–Ω–∏</b>\n\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–æ–≤–∏–Ω–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                    parseMode: ParseMode.Html,
                    replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                    cancellationToken: cancellationToken);
                return;
            }

            var newsList = result.Value;
            if (newsList.Items.Count == 0)
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "üì∞ <b>–ù–æ–≤–∏–Ω–∏</b>\n\nüì≠ –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö –Ω–æ–≤–∏–Ω.",
                    parseMode: ParseMode.Html,
                    replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                    cancellationToken: cancellationToken);
                return;
            }

            // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –Ω–æ–≤–∏–Ω–∞–º–∏
            var newsText = "üì∞ <b>–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏</b>\n\n";
            
            foreach (var news in newsList.Items.Take(5))
            {
                var pinnedMark = news.IsPinned ? "üìå " : "";
                newsText += $"{pinnedMark}{news.CategoryEmoji} <b>{news.Title}</b>\n";
                
                if (!string.IsNullOrEmpty(news.Summary))
                {
                    newsText += $"<i>{news.Summary}</i>\n";
                }
                else
                {
                    var preview = news.Content.Length > 100 
                        ? news.Content.Substring(0, 100) + "..." 
                        : news.Content;
                    newsText += $"{preview}\n";
                }
                
                newsText += $"üìÖ {news.CreatedAt:dd.MM.yyyy HH:mm}\n\n";
            }

            if (newsList.TotalCount > 5)
            {
                newsText += $"<i>–ü–æ–∫–∞–∑–∞–Ω–æ {newsList.Items.Count} –∑ {newsList.TotalCount} –Ω–æ–≤–∏–Ω</i>";
            }

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: newsText,
                parseMode: ParseMode.Html,
                replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", callbackQuery.From.Id);
            
            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: "üì∞ <b>–ù–æ–≤–∏–Ω–∏</b>\n\n‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –Ω–æ–≤–∏–Ω.",
                parseMode: ParseMode.Html,
                replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                cancellationToken: cancellationToken);
        }
    }

    private async Task HandleEventsListCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            using var scope = _scopeFactory.CreateScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
            
            // –û—Ç—Ä–∏–º—É—î–º–æ –º–∞–π–±—É—Ç–Ω—ñ –ø–æ–¥—ñ—ó —á–µ—Ä–µ–∑ MediatR
            var query = new GetUpcomingEventsQuery
            {
                PageNumber = 1,
                PageSize = 5
            };

            var result = await mediator.Send(query, cancellationToken);

            if (!result.IsSuccess || result.Value == null)
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "üéâ <b>–ó–∞—Ö–æ–¥–∏</b>\n\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–¥—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                    parseMode: ParseMode.Html,
                    replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                    cancellationToken: cancellationToken);
                return;
            }

            var eventsList = result.Value;
            if (eventsList.Items.Count == 0)
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "üéâ <b>–ó–∞—Ö–æ–¥–∏</b>\n\nüì≠ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ–¥—ñ–π.\n\n" +
                          "<i>–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏!</i>",
                    parseMode: ParseMode.Html,
                    replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                    cancellationToken: cancellationToken);
                return;
            }

            // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –ø–æ–¥—ñ—è–º–∏
            var eventsText = "üéâ <b>–ú–∞–π–±—É—Ç–Ω—ñ –∑–∞—Ö–æ–¥–∏</b>\n\n";
            
            foreach (var ev in eventsList.Items.Take(5))
            {
                var featuredMark = ev.IsFeatured ? "‚≠ê " : "";
                eventsText += $"{featuredMark}{ev.TypeEmoji} <b>{ev.Title}</b>\n";
                
                eventsText += $"üìÖ {ev.StartDate:dd.MM.yyyy HH:mm}";
                if (ev.EndDate.HasValue)
                {
                    eventsText += $" - {ev.EndDate.Value:HH:mm}";
                }
                eventsText += "\n";
                
                if (!string.IsNullOrEmpty(ev.Location))
                {
                    eventsText += $"üìç {ev.Location}\n";
                }
                
                if (ev.RequiresRegistration)
                {
                    var spotsLeft = ev.MaxParticipants.HasValue 
                        ? $"{ev.MaxParticipants.Value - ev.CurrentParticipants}" 
                        : "‚àû";
                    eventsText += $"üë• –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {ev.CurrentParticipants}/{(ev.MaxParticipants?.ToString() ?? "‚àû")} (–≤—ñ–ª—å–Ω–æ: {spotsLeft})\n";
                    
                    if (ev.RegistrationDeadline.HasValue)
                    {
                        eventsText += $"‚è∞ –î–µ–¥–ª–∞–π–Ω: {ev.RegistrationDeadline.Value:dd.MM.yyyy HH:mm}\n";
                    }
                }
                
                eventsText += "\n";
            }

            if (eventsList.TotalCount > 5)
            {
                eventsText += $"<i>–ü–æ–∫–∞–∑–∞–Ω–æ {eventsList.Items.Count} –∑ {eventsList.TotalCount} –ø–æ–¥—ñ–π</i>";
            }

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: eventsText,
                parseMode: ParseMode.Html,
                replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–¥—ñ–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", callbackQuery.From.Id);
            
            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: "üéâ <b>–ó–∞—Ö–æ–¥–∏</b>\n\n‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø–æ–¥—ñ–π.",
                parseMode: ParseMode.Html,
                replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                cancellationToken: cancellationToken);
        }
    }

    private async Task HandlePartnersListCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            using var scope = _scopeFactory.CreateScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
            
            // –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ —á–µ—Ä–µ–∑ MediatR
            var query = new GetActivePartnersQuery();
            var result = await mediator.Send(query, cancellationToken);

            if (!result.IsSuccess || result.Value == null)
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "ü§ù <b>–ü–∞—Ä—Ç–Ω–µ—Ä–∏</b>\n\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                    parseMode: ParseMode.Html,
                    replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                    cancellationToken: cancellationToken);
                return;
            }

            var partnersList = result.Value;
            if (partnersList.Items.Count == 0)
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "ü§ù <b>–ü–∞—Ä—Ç–Ω–µ—Ä–∏</b>\n\nüì≠ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤.\n\n" +
                          "<i>–ú–∏ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ –Ω–æ–≤–∏–º–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞–º–∏!</i>",
                    parseMode: ParseMode.Html,
                    replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                    cancellationToken: cancellationToken);
                return;
            }

            // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏
            var partnersText = "ü§ù <b>–ù–∞—à—ñ –ø–∞—Ä—Ç–Ω–µ—Ä–∏</b>\n\n";
            partnersText += "<i>–ü—Ä–æ–ø–æ–Ω—É—î–º–æ –∑–Ω–∏–∂–∫–∏ —Ç–∞ –ø—Ä–∏–≤—ñ–ª–µ—ó –¥–ª—è —á–ª–µ–Ω—ñ–≤ –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–∏:</i>\n\n";
            
            foreach (var partner in partnersList.Items)
            {
                var featuredMark = partner.IsFeatured ? "‚≠ê " : "";
                partnersText += $"{featuredMark}{partner.TypeEmoji} <b>{partner.Name}</b>\n";
                
                if (!string.IsNullOrEmpty(partner.Description))
                {
                    partnersText += $"{partner.Description}\n";
                }
                
                if (!string.IsNullOrEmpty(partner.DiscountInfo))
                {
                    partnersText += $"üí∞ <b>–ó–Ω–∏–∂–∫–∞:</b> {partner.DiscountInfo}\n";
                }
                
                if (!string.IsNullOrEmpty(partner.Address))
                {
                    partnersText += $"üìç {partner.Address}\n";
                }
                
                if (!string.IsNullOrEmpty(partner.PhoneNumber))
                {
                    partnersText += $"üìû {partner.PhoneNumber}\n";
                }
                
                partnersText += "\n";
            }

            partnersText += $"<i>–í—Å—å–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤: {partnersList.TotalCount}</i>";

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: partnersText,
                parseMode: ParseMode.Html,
                replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", callbackQuery.From.Id);
            
            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: "ü§ù <b>–ü–∞—Ä—Ç–Ω–µ—Ä–∏</b>\n\n‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤.",
                parseMode: ParseMode.Html,
                replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                cancellationToken: cancellationToken);
        }
    }

    private async Task HandleContactsListCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            using var scope = _scopeFactory.CreateScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
            
            // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç–∏ —á–µ—Ä–µ–∑ MediatR
            var query = new GetAllContactsQuery();
            var result = await mediator.Send(query, cancellationToken);

            if (!result.IsSuccess || result.Value == null)
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–∏</b>\n\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                    parseMode: ParseMode.Html,
                    replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                    cancellationToken: cancellationToken);
                return;
            }

            var contactsList = result.Value;
            if (contactsList.Items.Count == 0)
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</b>\n\n" +
                          "üèõ <b>–°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∏–π –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–æ–≤–∏–π –∫–æ–º—ñ—Ç–µ—Ç</b>\n\n" +
                          "üìß Email: profkom@vnmu.edu.ua\n" +
                          "üì± Telegram: @vnmu_profkom\n" +
                          "üìç –ê–¥—Ä–µ—Å–∞: –≤—É–ª. –ü–∏—Ä–æ–≥–æ–≤–∞, 56, –í—ñ–Ω–Ω–∏—Ü—è\n" +
                          "üïê –ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏: –ü–ù-–ü–¢ 9:00-17:00",
                    parseMode: ParseMode.Html,
                    replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                    cancellationToken: cancellationToken);
                return;
            }

            // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
            var contactsText = "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</b>\n\n";
            
            foreach (var contact in contactsList.Items)
            {
                contactsText += $"üèõ <b>{contact.Title}</b>\n";
                
                if (!string.IsNullOrEmpty(contact.Description))
                {
                    contactsText += $"<i>{contact.Description}</i>\n";
                }
                
                if (!string.IsNullOrEmpty(contact.PhoneNumber))
                {
                    contactsText += $"üìû {contact.PhoneNumber}\n";
                }
                
                if (!string.IsNullOrEmpty(contact.Email))
                {
                    contactsText += $"üìß {contact.Email}\n";
                }
                
                if (!string.IsNullOrEmpty(contact.TelegramUsername))
                {
                    contactsText += $"üì± @{contact.TelegramUsername}\n";
                }
                
                if (!string.IsNullOrEmpty(contact.Address))
                {
                    contactsText += $"üìç {contact.Address}\n";
                }
                
                if (!string.IsNullOrEmpty(contact.WorkingHours))
                {
                    contactsText += $"üïê {contact.WorkingHours}\n";
                }
                
                contactsText += "\n";
            }

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: contactsText.TrimEnd(),
                parseMode: ParseMode.Html,
                replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", callbackQuery.From.Id);
            
            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–∏</b>\n\n‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤.",
                parseMode: ParseMode.Html,
                replyMarkup: KeyboardFactory.GetBackToMainMenuKeyboard(),
                cancellationToken: cancellationToken);
        }
    }

    #region Admin Panel Handlers

    private async Task HandleAdminPanelCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var userRepo = scope.ServiceProvider.GetRequiredService<IUserRepository>();

        var user = await userRepo.GetByTelegramIdAsync(callbackQuery.From.Id, cancellationToken);
        if (user?.Role != Domain.Enums.UserRole.Admin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        
        // Get statistics
        var allAppealsResult = await mediator.Send(new GetAdminAppealsQuery
        {
            AdminId = user.TelegramId,
            PageNumber = 1,
            PageSize = 1
        }, cancellationToken);

        var newAppealsResult = await mediator.Send(new GetAdminAppealsQuery
        {
            AdminId = user.TelegramId,
            Status = Domain.Enums.AppealStatus.New,
            PageNumber = 1,
            PageSize = 1
        }, cancellationToken);

        var myAppealsResult = await mediator.Send(new GetAdminAppealsQuery
        {
            AdminId = user.TelegramId,
            OnlyMy = true,
            PageNumber = 1,
            PageSize = 1
        }, cancellationToken);

        var unassignedResult = await mediator.Send(new GetAdminAppealsQuery
        {
            AdminId = user.TelegramId,
            OnlyUnassigned = true,
            PageNumber = 1,
            PageSize = 1
        }, cancellationToken);

        var statsText = $"üë®‚Äçüíº <b>–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å</b>\n\n" +
                       $"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n" +
                       $"üìã –í—Å—å–æ–≥–æ –∑–≤–µ—Ä–Ω–µ–Ω—å: {allAppealsResult.Value?.TotalCount ?? 0}\n" +
                       $"üÜï –ù–æ–≤–∏—Ö: {newAppealsResult.Value?.TotalCount ?? 0}\n" +
                       $"üë§ –ú–æ—ó—Ö: {myAppealsResult.Value?.TotalCount ?? 0}\n" +
                       $"‚ùì –ù–µ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏—Ö: {unassignedResult.Value?.TotalCount ?? 0}\n\n" +
                       $"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:";

        await botClient.EditMessageTextAsync(
            chatId: callbackQuery.Message!.Chat.Id,
            messageId: callbackQuery.Message.MessageId,
            text: statsText,
            parseMode: ParseMode.Html,
            replyMarkup: KeyboardFactory.GetAdminPanelKeyboard(),
            cancellationToken: cancellationToken);
    }

    private async Task HandleAdminAppealsListCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var userRepo = scope.ServiceProvider.GetRequiredService<IUserRepository>();

        var user = await userRepo.GetByTelegramIdAsync(callbackQuery.From.Id, cancellationToken);
        if (user?.Role != Domain.Enums.UserRole.Admin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var callbackData = callbackQuery.Data!;

        var query = new GetAdminAppealsQuery
        {
            AdminId = user.TelegramId,
            PageNumber = 1,
            PageSize = 10,
            SortBy = "CreatedAt",
            Descending = true
        };

        if (callbackData.Contains("_new"))
        {
            query.Status = Domain.Enums.AppealStatus.New;
        }
        else if (callbackData.Contains("_my"))
        {
            query.OnlyMy = true;
        }
        else if (callbackData.Contains("_unassigned"))
        {
            query.OnlyUnassigned = true;
        }

        var result = await mediator.Send(query, cancellationToken);

        if (!result.IsSuccess || result.Value == null || !result.Value.Appeals.Any())
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "üì≠ –ó–≤–µ—Ä–Ω–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                cancellationToken: cancellationToken);
            return;
        }

        var appealsText = "üìã <b>–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è:</b>\n\n";
        foreach (var appeal in result.Value.Appeals)
        {
            var statusEmoji = appeal.Status switch
            {
                Domain.Enums.AppealStatus.New => "üÜï",
                Domain.Enums.AppealStatus.InProgress => "‚è≥",
                Domain.Enums.AppealStatus.Closed => "‚úÖ",
                _ => "‚ùì"
            };

            var priorityEmoji = appeal.Priority switch
            {
                Domain.Enums.AppealPriority.Low => "üü¢",
                Domain.Enums.AppealPriority.Normal => "üü°",
                Domain.Enums.AppealPriority.High => "üü†",
                Domain.Enums.AppealPriority.Urgent => "üî¥",
                _ => "‚ö™"
            };

            var assignedText = appeal.AssignedToAdminId.HasValue ? "üë§" : "‚ùì";

            appealsText += $"{statusEmoji} {priorityEmoji} #{appeal.Id} | {appeal.Category.GetDisplayName()}\n" +
                          $"<b>{appeal.Subject}</b>\n" +
                          $"{assignedText} –°—Ç–∞—Ç—É—Å: {appeal.Status.GetDisplayName()}\n\n";
        }

        appealsText += $"–°—Ç–æ—Ä—ñ–Ω–∫–∞ 1 –∑ {Math.Ceiling((double)result.Value.TotalCount / 10)}";

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            result.Value.Appeals.Select(a => 
                InlineKeyboardButton.WithCallbackData($"#{a.Id}", $"admin_view_{a.Id}")
            ).ToArray(),
            new[] { InlineKeyboardButton.WithCallbackData("¬´ –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", "admin_panel") }
        });

        await botClient.EditMessageTextAsync(
            chatId: callbackQuery.Message!.Chat.Id,
            messageId: callbackQuery.Message.MessageId,
            text: appealsText,
            parseMode: ParseMode.Html,
            replyMarkup: keyboard,
            cancellationToken: cancellationToken);
    }

    private async Task HandleAdminAppealViewCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var userRepo = scope.ServiceProvider.GetRequiredService<IUserRepository>();

        var user = await userRepo.GetByTelegramIdAsync(callbackQuery.From.Id, cancellationToken);
        if (user?.Role != Domain.Enums.UserRole.Admin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var appealIdStr = callbackQuery.Data!.Replace("admin_view_", "");
        if (!int.TryParse(appealIdStr, out var appealId))
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var result = await mediator.Send(new GetAppealByIdQuery { AppealId = appealId, RequestUserId = user.TelegramId }, cancellationToken);

        if (!result.IsSuccess || result.Value == null)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var appeal = result.Value;
        var isAssignedToMe = appeal.AssignedToAdminId == user.TelegramId;
        var isClosed = appeal.Status == Domain.Enums.AppealStatus.Closed;

        var appealText = $"üìã <b>–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è #{appeal.Id}</b>\n\n" +
                        $"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {appeal.CategoryName}\n" +
                        $"üìå –¢–µ–º–∞: {appeal.Subject}\n" +
                        $"üìù –û–ø–∏—Å:\n{appeal.Message}\n\n" +
                        $"üìä –°—Ç–∞—Ç—É—Å: {appeal.StatusName}\n" +
                        $"üéØ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {appeal.PriorityName}\n" +
                        $"üë§ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ: {(appeal.AssignedToAdminId.HasValue ? $"–ê–¥–º—ñ–Ω #{appeal.AssignedToAdminId}" : "–ù–µ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ")}\n" +
                        $"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {appeal.CreatedAt:dd.MM.yyyy HH:mm}\n";

        if (appeal.FirstResponseAt.HasValue)
        {
            appealText += $"‚è±Ô∏è –ü–µ—Ä—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {appeal.FirstResponseAt:dd.MM.yyyy HH:mm}\n";
        }

        if (appeal.ClosedAt.HasValue)
        {
            appealText += $"‚úÖ –ó–∞–∫—Ä–∏—Ç–æ: {appeal.ClosedAt:dd.MM.yyyy HH:mm}\n";
            if (!string.IsNullOrEmpty(appeal.ClosedReason))
            {
                appealText += $"üìù –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è: {appeal.ClosedReason}\n";
            }
        }

        if (appeal.Messages.Any())
        {
            appealText += $"\nüí¨ <b>–Ü—Å—Ç–æ—Ä—ñ—è ({appeal.Messages.Count}):</b>\n";
            foreach (var msg in appeal.Messages.OrderBy(m => m.SentAt).Take(3))
            {
                var senderType = msg.IsFromAdmin ? "üë®‚Äçüíº –ê–¥–º—ñ–Ω" : "üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á";
                appealText += $"{senderType} ({msg.SentAt:dd.MM HH:mm}):\n{msg.Text}\n\n";
            }
            if (appeal.Messages.Count > 3)
            {
                appealText += $"... —Ç–∞ —â–µ {appeal.Messages.Count - 3} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å\n";
            }
        }

        await botClient.EditMessageTextAsync(
            chatId: callbackQuery.Message!.Chat.Id,
            messageId: callbackQuery.Message.MessageId,
            text: appealText,
            parseMode: ParseMode.Html,
            replyMarkup: KeyboardFactory.GetAdminAppealActionsKeyboard(appealId, isAssignedToMe, isClosed),
            cancellationToken: cancellationToken);
    }

    private async Task HandleAdminAssignToMeCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var userRepo = scope.ServiceProvider.GetRequiredService<IUserRepository>();

        var user = await userRepo.GetByTelegramIdAsync(callbackQuery.From.Id, cancellationToken);
        if (user?.Role != Domain.Enums.UserRole.Admin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var appealIdStr = callbackQuery.Data!.Replace("admin_assign_me_", "");
        if (!int.TryParse(appealIdStr, out var appealId))
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var result = await mediator.Send(new AssignAppealCommand
        {
            AppealId = appealId,
            RequestAdminId = user.TelegramId,
            AssignToAdminId = user.TelegramId
        }, cancellationToken);

        if (result.IsSuccess)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚úÖ –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –≤–∞–º",
                cancellationToken: cancellationToken);

            // Refresh the view
            await HandleAdminAppealViewCallback(botClient, new CallbackQuery
            {
                Id = callbackQuery.Id,
                From = callbackQuery.From,
                Message = callbackQuery.Message,
                Data = $"admin_view_{appealId}"
            }, cancellationToken);
        }
        else
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                $"‚ùå {result.Error}",
                showAlert: true,
                cancellationToken: cancellationToken);
        }
    }

    private async Task HandleAdminUnassignCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var userRepo = scope.ServiceProvider.GetRequiredService<IUserRepository>();

        var user = await userRepo.GetByTelegramIdAsync(callbackQuery.From.Id, cancellationToken);
        if (user?.Role != Domain.Enums.UserRole.Admin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var appealIdStr = callbackQuery.Data!.Replace("admin_unassign_", "");
        if (!int.TryParse(appealIdStr, out var appealId))
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var result = await mediator.Send(new AssignAppealCommand
        {
            AppealId = appealId,
            RequestAdminId = user.TelegramId,
            AssignToAdminId = null
        }, cancellationToken);

        if (result.IsSuccess)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚úÖ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–Ω—è—Ç–æ",
                cancellationToken: cancellationToken);

            // Refresh the view
            await HandleAdminAppealViewCallback(botClient, new CallbackQuery
            {
                Id = callbackQuery.Id,
                From = callbackQuery.From,
                Message = callbackQuery.Message,
                Data = $"admin_view_{appealId}"
            }, cancellationToken);
        }
        else
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                $"‚ùå {result.Error}",
                showAlert: true,
                cancellationToken: cancellationToken);
        }
    }

    private async Task HandleAdminPriorityMenuCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var userRepo = scope.ServiceProvider.GetRequiredService<IUserRepository>();

        var user = await userRepo.GetByTelegramIdAsync(callbackQuery.From.Id, cancellationToken);
        if (user?.Role != Domain.Enums.UserRole.Admin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var appealIdStr = callbackQuery.Data!.Replace("admin_priority_", "");
        if (!int.TryParse(appealIdStr, out var appealId))
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        await botClient.EditMessageReplyMarkupAsync(
            chatId: callbackQuery.Message!.Chat.Id,
            messageId: callbackQuery.Message.MessageId,
            replyMarkup: KeyboardFactory.GetPrioritySelectionKeyboard(appealId),
            cancellationToken: cancellationToken);

        await botClient.AnswerCallbackQueryAsync(
            callbackQuery.Id,
            "–û–±–µ—Ä—ñ—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç:",
            cancellationToken: cancellationToken);
    }

    private async Task HandleAdminSetPriorityCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var userRepo = scope.ServiceProvider.GetRequiredService<IUserRepository>();

        var user = await userRepo.GetByTelegramIdAsync(callbackQuery.From.Id, cancellationToken);
        if (user?.Role != Domain.Enums.UserRole.Admin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var parts = callbackQuery.Data!.Replace("admin_set_priority_", "").Split('_');
        if (parts.Length != 2 || !int.TryParse(parts[0], out var appealId) || !int.TryParse(parts[1], out var priorityValue))
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var result = await mediator.Send(new UpdatePriorityCommand
        {
            AppealId = appealId,
            AdminId = user.TelegramId,
            Priority = (Domain.Enums.AppealPriority)priorityValue
        }, cancellationToken);

        if (result.IsSuccess)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚úÖ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ",
                cancellationToken: cancellationToken);

            // Refresh the view
            await HandleAdminAppealViewCallback(botClient, new CallbackQuery
            {
                Id = callbackQuery.Id,
                From = callbackQuery.From,
                Message = callbackQuery.Message,
                Data = $"admin_view_{appealId}"
            }, cancellationToken);
        }
        else
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                $"‚ùå {result.Error}",
                showAlert: true,
                cancellationToken: cancellationToken);
        }
    }

    private async Task HandleAdminCloseAppealCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var userRepo = scope.ServiceProvider.GetRequiredService<IUserRepository>();

        var user = await userRepo.GetByTelegramIdAsync(callbackQuery.From.Id, cancellationToken);
        if (user?.Role != Domain.Enums.UserRole.Admin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var appealIdStr = callbackQuery.Data!.Replace("admin_close_", "");
        if (!int.TryParse(appealIdStr, out var appealId))
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        // TODO: Implement state management for close reason input
        // For now, close with default reason
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var result = await mediator.Send(new CloseAppealCommand
        {
            AppealId = appealId,
            AdminId = user.TelegramId,
            Reason = "–†–æ–∑–≥–ª—è–Ω—É—Ç–æ —Ç–∞ –≤–∏—Ä—ñ—à–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        }, cancellationToken);

        if (result.IsSuccess)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚úÖ –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ",
                cancellationToken: cancellationToken);

            // Refresh the view
            await HandleAdminAppealViewCallback(botClient, new CallbackQuery
            {
                Id = callbackQuery.Id,
                From = callbackQuery.From,
                Message = callbackQuery.Message,
                Data = $"admin_view_{appealId}"
            }, cancellationToken);
        }
        else
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                $"‚ùå {result.Error}",
                showAlert: true,
                cancellationToken: cancellationToken);
        }
    }

    #endregion

    private Task HandleEditedMessageAsync(
        ITelegramBotClient botClient,
        Message message,
        CancellationToken cancellationToken)
    {
        _logger.LogInformation("–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {UserId}", message.From?.Id);
        return Task.CompletedTask;
    }

    private Task HandleUnknownUpdateAsync(
        ITelegramBotClient botClient,
        Update update,
        CancellationToken cancellationToken)
    {
        _logger.LogWarning("–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {UpdateType}", update.Type);
        return Task.CompletedTask;
    }

    public Task HandleErrorAsync(
        ITelegramBotClient botClient,
        Exception exception,
        CancellationToken cancellationToken)
    {
        var errorMessage = exception switch
        {
            ApiRequestException apiEx => $"Telegram API Error:\n[{apiEx.ErrorCode}]\n{apiEx.Message}",
            _ => exception.ToString()
        };

        _logger.LogError(exception, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {ErrorMessage}", errorMessage);
        return Task.CompletedTask;
    }
}
