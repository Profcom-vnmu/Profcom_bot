using MediatR;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using StudentUnionBot.Application.Appeals.Commands.AssignAppeal;
using StudentUnionBot.Application.Appeals.Commands.CloseAppeal;
using StudentUnionBot.Application.Appeals.Commands.ReplyToAppeal;
using StudentUnionBot.Application.Appeals.Commands.UpdatePriority;
using StudentUnionBot.Application.Appeals.Queries.GetAdminAppeals;
using StudentUnionBot.Application.Appeals.Queries.GetAppealById;
using StudentUnionBot.Application.Common.Interfaces;
using StudentUnionBot.Domain.Enums;
using StudentUnionBot.Domain.Interfaces;
using StudentUnionBot.Presentation.Bot.Handlers.Common;
using StudentUnionBot.Presentation.Bot.Handlers.Interfaces;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace StudentUnionBot.Presentation.Bot.Handlers.Admin;

/// <summary>
/// –û–±—Ä–æ–±–Ω–∏–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è–º–∏
/// </summary>
public class AdminAppealHandler : BaseHandler, IAdminAppealHandler
{
    public AdminAppealHandler(
        IServiceScopeFactory scopeFactory,
        ILogger<AdminAppealHandler> logger,
        IMediator mediator)
        : base(scopeFactory, logger, mediator)
    {
    }

    /// <summary>
    /// –ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∑–≤–µ—Ä–Ω–µ–Ω—å –¥–ª—è –∞–¥–º—ñ–Ω–∞
    /// </summary>
    public async Task HandleAdminAppealsListCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var userRepo = scope.ServiceProvider.GetRequiredService<IUserRepository>();

        var user = await userRepo.GetByTelegramIdAsync(callbackQuery.From.Id, cancellationToken);
        if (user?.Role != UserRole.Admin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var callbackData = callbackQuery.Data!;

        var query = new GetAdminAppealsQuery
        {
            AdminId = user.TelegramId,
            PageNumber = 1,
            PageSize = 10,
            SortBy = "CreatedAt",
            Descending = true
        };

        if (callbackData.Contains("_new"))
        {
            query.Status = AppealStatus.New;
        }
        else if (callbackData.Contains("_my"))
        {
            query.OnlyMy = true;
        }
        else if (callbackData.Contains("_unassigned"))
        {
            query.OnlyUnassigned = true;
        }

        var result = await mediator.Send(query, cancellationToken);

        if (!result.IsSuccess || result.Value == null || !result.Value.Appeals.Any())
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "üìÑ –ó–≤–µ—Ä–Ω–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                cancellationToken: cancellationToken);
            return;
        }

        var appealsText = "üìã <b>–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è:</b>\n\n";
        foreach (var appeal in result.Value.Appeals)
        {
            var statusEmoji = appeal.Status switch
            {
                AppealStatus.New => "üÜï",
                AppealStatus.InProgress => "‚öôÔ∏è",
                AppealStatus.Closed => "‚úÖ",
                _ => "‚ùì"
            };

            var priorityEmoji = appeal.Priority switch
            {
                AppealPriority.Low => "üü¢",
                AppealPriority.Normal => "üü°",
                AppealPriority.High => "üü†",
                AppealPriority.Urgent => "üî¥",
                _ => "‚ö™"
            };

            var assignedText = appeal.AssignedToAdminId.HasValue ? "üë§" : "‚ùå";

            appealsText += $"{statusEmoji} {priorityEmoji} #{appeal.Id} | {appeal.CategoryName}\n" +
                          $"<b>{appeal.Subject}</b>\n" +
                          $"{assignedText} –°—Ç–∞—Ç—É—Å: {appeal.StatusName}\n\n";
        }

        appealsText += $"–°—Ç–æ—Ä—ñ–Ω–∫–∞ 1 –∑ {Math.Ceiling((double)result.Value.TotalCount / 10)}";

        var buttons = new List<List<InlineKeyboardButton>>();
        
        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
        var appealButtons = result.Value.Appeals
            .Select(a => InlineKeyboardButton.WithCallbackData($"#{a.Id}", $"admin_view_{a.Id}"))
            .ToArray();
        
        // –†–æ–∑–±–∏–≤–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä—è–¥–∫–∞—Ö (–ø–æ 3 –≤ —Ä—è–¥–∫—É)
        for (int i = 0; i < appealButtons.Length; i += 3)
        {
            buttons.Add(appealButtons.Skip(i).Take(3).ToList());
        }

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        buttons.Add(new List<InlineKeyboardButton>
        {
            InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", "admin_panel")
        });

        var keyboard = new InlineKeyboardMarkup(buttons);

        await botClient.EditMessageTextAsync(
            chatId: callbackQuery.Message!.Chat.Id,
            messageId: callbackQuery.Message.MessageId,
            text: appealsText,
            parseMode: ParseMode.Html,
            replyMarkup: keyboard,
            cancellationToken: cancellationToken);

        await botClient.AnswerCallbackQueryAsync(
            callbackQueryId: callbackQuery.Id,
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞
    /// </summary>
    public async Task HandleAdminAppealViewCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var userRepo = scope.ServiceProvider.GetRequiredService<IUserRepository>();

        var user = await userRepo.GetByTelegramIdAsync(callbackQuery.From.Id, cancellationToken);
        if (user?.Role != UserRole.Admin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var appealIdStr = callbackQuery.Data!.Replace("admin_view_", "");
        if (!int.TryParse(appealIdStr, out var appealId))
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var result = await mediator.Send(new GetAppealByIdQuery 
        { 
            AppealId = appealId, 
            RequestUserId = user.TelegramId 
        }, cancellationToken);

        if (!result.IsSuccess || result.Value == null)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var appeal = result.Value;
        var isAssignedToMe = appeal.AssignedToAdminId == user.TelegramId;
        var isClosed = appeal.Status == AppealStatus.Closed;

        var appealText = $"üìã <b>–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è #{appeal.Id}</b>\n\n" +
                        $"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {appeal.CategoryName}\n" +
                        $"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {appeal.StatusName}\n" +
                        $"üéØ <b>–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç:</b> {appeal.PriorityName}\n" +
                        $"üìÖ <b>–°—Ç–≤–æ—Ä–µ–Ω–æ:</b> {appeal.CreatedAt:dd.MM.yyyy HH:mm}\n";

        if (appeal.FirstResponseAt.HasValue)
        {
            appealText += $"‚è∞ <b>–ü–µ—Ä—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:</b> {appeal.FirstResponseAt:dd.MM.yyyy HH:mm}\n";
        }

        if (appeal.ClosedAt.HasValue)
        {
            appealText += $"‚úÖ <b>–ó–∞–∫—Ä–∏—Ç–æ:</b> {appeal.ClosedAt:dd.MM.yyyy HH:mm}\n";
            if (!string.IsNullOrEmpty(appeal.ClosedReason))
            {
                appealText += $"üìù <b>–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è:</b> {appeal.ClosedReason}\n";
            }
        }

        appealText += $"\n<b>–¢–µ–º–∞:</b>\n{appeal.Subject}\n\n";
        appealText += $"<b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n{appeal.Message}\n";

        if (appeal.Messages.Any())
        {
            appealText += "\n<b>–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:</b>\n";
            foreach (var msg in appeal.Messages.OrderBy(m => m.SentAt))
            {
                var senderType = msg.IsFromAdmin ? "üë®‚Äçüíº –ê–¥–º—ñ–Ω" : "üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á";
                appealText += $"{senderType} ({msg.SentAt:dd.MM HH:mm}): {msg.Text}\n";
            }
        }

        await botClient.EditMessageTextAsync(
            chatId: callbackQuery.Message!.Chat.Id,
            messageId: callbackQuery.Message.MessageId,
            text: appealText,
            parseMode: ParseMode.Html,
            replyMarkup: GetAdminAppealActionsKeyboard(appealId, isAssignedToMe, isClosed),
            cancellationToken: cancellationToken);

        await botClient.AnswerCallbackQueryAsync(
            callbackQueryId: callbackQuery.Id,
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –ü—Ä–∏–∑–Ω–∞—á–∞—î –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è —Å–æ–±—ñ
    /// </summary>
    public async Task HandleAdminAssignToMeCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var userRepo = scope.ServiceProvider.GetRequiredService<IUserRepository>();

        var user = await userRepo.GetByTelegramIdAsync(callbackQuery.From.Id, cancellationToken);
        if (user?.Role != UserRole.Admin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var appealIdStr = callbackQuery.Data!.Replace("admin_assign_me_", "");
        if (!int.TryParse(appealIdStr, out var appealId))
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var result = await mediator.Send(new AssignAppealCommand(
            appealId,
            user.TelegramId,
            user.TelegramId,
            "–ê–¥–º—ñ–Ω –ø—Ä–∏–∑–Ω–∞—á–∏–≤ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è —Å–æ–±—ñ"
        ), cancellationToken);

        if (result.IsSuccess)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚úÖ –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –≤–∞–º",
                cancellationToken: cancellationToken);

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
            var newCallbackQuery1 = new CallbackQuery
            {
                Id = callbackQuery.Id,
                From = callbackQuery.From,
                Message = callbackQuery.Message,
                Data = $"admin_view_{appealId}"
            };
            await HandleAdminAppealViewCallback(botClient, newCallbackQuery1, cancellationToken);
        }
        else
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                $"‚ùå –ü–æ–º–∏–ª–∫–∞: {result.Error}",
                showAlert: true,
                cancellationToken: cancellationToken);
        }
    }

    /// <summary>
    /// –í—ñ–¥–º—ñ–Ω—è—î –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
    /// </summary>
    public async Task HandleAdminUnassignCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var userRepo = scope.ServiceProvider.GetRequiredService<IUserRepository>();

        var user = await userRepo.GetByTelegramIdAsync(callbackQuery.From.Id, cancellationToken);
        if (user?.Role != UserRole.Admin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var appealIdStr = callbackQuery.Data!.Replace("admin_unassign_", "");
        if (!int.TryParse(appealIdStr, out var appealId))
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var result = await mediator.Send(new AssignAppealCommand(
            appealId,
            user.TelegramId
        ), cancellationToken);

        if (result.IsSuccess)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚úÖ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
                cancellationToken: cancellationToken);

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
            var newCallbackQuery2 = new CallbackQuery
            {
                Id = callbackQuery.Id,
                From = callbackQuery.From,
                Message = callbackQuery.Message,
                Data = $"admin_view_{appealId}"
            };
            await HandleAdminAppealViewCallback(botClient, newCallbackQuery2, cancellationToken);
        }
        else
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                $"‚ùå –ü–æ–º–∏–ª–∫–∞: {result.Error}",
                showAlert: true,
                cancellationToken: cancellationToken);
        }
    }

    /// <summary>
    /// –ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∑–º—ñ–Ω–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
    /// </summary>
    public async Task HandleAdminPriorityMenuCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var userRepo = scope.ServiceProvider.GetRequiredService<IUserRepository>();

        var user = await userRepo.GetByTelegramIdAsync(callbackQuery.From.Id, cancellationToken);
        if (user?.Role != UserRole.Admin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var appealIdStr = callbackQuery.Data!.Replace("admin_priority_", "");
        if (!int.TryParse(appealIdStr, out var appealId))
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        await botClient.EditMessageReplyMarkupAsync(
            chatId: callbackQuery.Message!.Chat.Id,
            messageId: callbackQuery.Message.MessageId,
            replyMarkup: GetPrioritySelectionKeyboard(appealId),
            cancellationToken: cancellationToken);

        await botClient.AnswerCallbackQueryAsync(
            callbackQueryId: callbackQuery.Id,
            text: "–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç:",
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
    /// </summary>
    public async Task HandleAdminSetPriorityCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var userRepo = scope.ServiceProvider.GetRequiredService<IUserRepository>();

        var user = await userRepo.GetByTelegramIdAsync(callbackQuery.From.Id, cancellationToken);
        if (user?.Role != UserRole.Admin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var parts = callbackQuery.Data!.Replace("admin_set_priority_", "").Split('_');
        if (parts.Length != 2 || !int.TryParse(parts[0], out var appealId) || !int.TryParse(parts[1], out var priorityValue))
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var result = await mediator.Send(new UpdatePriorityCommand
        {
            AppealId = appealId,
            AdminId = user.TelegramId,
            Priority = (AppealPriority)priorityValue
        }, cancellationToken);

        if (result.IsSuccess)
        {
            var priorityName = ((AppealPriority)priorityValue) switch
            {
                AppealPriority.Low => "–ù–∏–∑—å–∫–∏–π",
                AppealPriority.Normal => "–ó–≤–∏—á–∞–π–Ω–∏–π", 
                AppealPriority.High => "–í–∏—Å–æ–∫–∏–π",
                AppealPriority.Urgent => "–¢–µ—Ä–º—ñ–Ω–æ–≤–∏–π",
                _ => "–ù–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π"
            };

            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                $"‚úÖ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {priorityName}",
                cancellationToken: cancellationToken);

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
            var newCallbackQuery3 = new CallbackQuery
            {
                Id = callbackQuery.Id,
                From = callbackQuery.From,
                Message = callbackQuery.Message,
                Data = $"admin_view_{appealId}"
            };
            await HandleAdminAppealViewCallback(botClient, newCallbackQuery3, cancellationToken);
        }
        else
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                $"‚ùå –ü–æ–º–∏–ª–∫–∞: {result.Error}",
                showAlert: true,
                cancellationToken: cancellationToken);
        }
    }

    /// <summary>
    /// –†–æ–∑–ø–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
    /// </summary>
    public async Task HandleAdminReplyCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var userRepo = scope.ServiceProvider.GetRequiredService<IUserRepository>();

        var user = await userRepo.GetByTelegramIdAsync(callbackQuery.From.Id, cancellationToken);
        if (user?.Role != UserRole.Admin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var appealIdStr = callbackQuery.Data!.Replace("admin_reply_", "");
        if (!int.TryParse(appealIdStr, out var appealId))
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
        using var stateScope = _scopeFactory.CreateScope();
        var stateManager = stateScope.ServiceProvider.GetRequiredService<IUserStateManager>();
        await stateManager.SetDataAsync(user.TelegramId, "reply_appeal_id", appealId, cancellationToken);
        await stateManager.SetStateAsync(user.TelegramId, UserConversationState.WaitingAdminReply, cancellationToken);

        await botClient.AnswerCallbackQueryAsync(
            callbackQueryId: callbackQuery.Id,
            text: "–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å:",
            cancellationToken: cancellationToken);

        await botClient.SendTextMessageAsync(
            chatId: callbackQuery.Message!.Chat.Id,
            text: $"‚úçÔ∏è <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è #{appealId}</b>\n\n" +
                  "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –≤–∞—à–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:\n\n" +
                  "<i>–ú—ñ–Ω—ñ–º—É–º 5 —Å–∏–º–≤–æ–ª—ñ–≤, –º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª—ñ–≤</i>",
            parseMode: ParseMode.Html,
            replyMarkup: GetBackToMainMenu(),
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –†–æ–∑–ø–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –∑–∞–∫—Ä–∏—Ç—Ç—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
    /// </summary>
    public async Task HandleAdminCloseAppealCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var userRepo = scope.ServiceProvider.GetRequiredService<IUserRepository>();

        var user = await userRepo.GetByTelegramIdAsync(callbackQuery.From.Id, cancellationToken);
        if (user?.Role != UserRole.Admin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var appealIdStr = callbackQuery.Data!.Replace("admin_close_", "");
        if (!int.TryParse(appealIdStr, out var appealId))
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
        using var stateScope = _scopeFactory.CreateScope();
        var stateManager = stateScope.ServiceProvider.GetRequiredService<IUserStateManager>();
        await stateManager.SetDataAsync(user.TelegramId, "close_appeal_id", appealId, cancellationToken);
        await stateManager.SetStateAsync(user.TelegramId, UserConversationState.WaitingCloseReason, cancellationToken);

        await botClient.AnswerCallbackQueryAsync(
            callbackQueryId: callbackQuery.Id,
            text: "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –∑–∞–∫—Ä–∏—Ç—Ç—è:",
            cancellationToken: cancellationToken);

        await botClient.SendTextMessageAsync(
            chatId: callbackQuery.Message!.Chat.Id,
            text: $"‚ùå <b>–ó–∞–∫—Ä–∏—Ç—Ç—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è #{appealId}</b>\n\n" +
                  "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –∑–∞–∫—Ä–∏—Ç—Ç—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:\n\n" +
                  "<i>–ú—ñ–Ω—ñ–º—É–º 5 —Å–∏–º–≤–æ–ª—ñ–≤, –º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª—ñ–≤</i>",
            parseMode: ParseMode.Html,
            replyMarkup: GetBackToMainMenu(),
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–¥–º—ñ–Ω–æ–º
    /// </summary>
    public async Task HandleAdminReplyInputAsync(
        ITelegramBotClient botClient,
        Message message,
        CancellationToken cancellationToken)
    {
        var userId = message.From!.Id;
        var replyText = message.Text?.Trim();

        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–æ–≤–∂–∏–Ω–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if (string.IsNullOrWhiteSpace(replyText) || replyText.Length < 5)
        {
            await SendErrorMessageAsync(
                botClient,
                message.Chat.Id,
                "‚ùå –í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞ (–º—ñ–Ω—ñ–º—É–º 5 —Å–∏–º–≤–æ–ª—ñ–≤)",
                cancellationToken);
            return;
        }

        if (replyText.Length > 2000)
        {
            await SendErrorMessageAsync(
                botClient,
                message.Chat.Id,
                "‚ùå –í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª—ñ–≤)",
                cancellationToken);
            return;
        }

        try
        {
            using var stateScope = _scopeFactory.CreateScope();
            var stateManager = stateScope.ServiceProvider.GetRequiredService<IUserStateManager>();
            
            // –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π ID –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
            var appealId = await stateManager.GetDataAsync<int>(userId, "reply_appeal_id", cancellationToken);

            if (appealId == 0)
            {
                await SendErrorMessageAsync(
                    botClient,
                    message.Chat.Id,
                    "‚ùå –ü–æ–º–∏–ª–∫–∞: ID –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                    cancellationToken);

                await stateManager.ClearStateAsync(userId, cancellationToken);
                await stateManager.ClearAllDataAsync(userId, cancellationToken);
                return;
            }

            // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
            var result = await _mediator.Send(new ReplyToAppealCommand
            {
                AppealId = appealId,
                AdminId = userId,
                Text = replyText
            }, cancellationToken);

            if (result.IsSuccess)
            {
                await stateManager.ClearStateAsync(userId, cancellationToken);
                await stateManager.ClearAllDataAsync(userId, cancellationToken);

                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: "‚úÖ <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞!</b>\n\n" +
                          "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—Ç—Ä–∏–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.",
                    parseMode: ParseMode.Html,
                    replyMarkup: GetMainMenu(),
                    cancellationToken: cancellationToken);
            }
            else
            {
                await SendErrorMessageAsync(
                    botClient,
                    message.Chat.Id,
                    $"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {result.Error}",
                    cancellationToken);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–¥–º—ñ–Ω–∞ –¥–ª—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", userId);

            await SendErrorMessageAsync(
                botClient,
                message.Chat.Id,
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                cancellationToken);

            using var errorStateScope = _scopeFactory.CreateScope();
            var errorStateManager = errorStateScope.ServiceProvider.GetRequiredService<IUserStateManager>();
            await errorStateManager.ClearStateAsync(userId, cancellationToken);
            await errorStateManager.ClearAllDataAsync(userId, cancellationToken);
        }
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –ø—Ä–∏—á–∏–Ω–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
    /// </summary>
    public async Task HandleCloseReasonInputAsync(
        ITelegramBotClient botClient,
        Message message,
        CancellationToken cancellationToken)
    {
        var userId = message.From!.Id;
        var reason = message.Text?.Trim();

        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–æ–≤–∂–∏–Ω–∏ –ø—Ä–∏—á–∏–Ω–∏
        if (string.IsNullOrWhiteSpace(reason) || reason.Length < 5)
        {
            await SendErrorMessageAsync(
                botClient,
                message.Chat.Id,
                "‚ùå –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞ (–º—ñ–Ω—ñ–º—É–º 5 —Å–∏–º–≤–æ–ª—ñ–≤)",
                cancellationToken);
            return;
        }

        if (reason.Length > 500)
        {
            await SendErrorMessageAsync(
                botClient,
                message.Chat.Id,
                "‚ùå –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª—ñ–≤)",
                cancellationToken);
            return;
        }

        try
        {
            using var stateScope = _scopeFactory.CreateScope();
            var stateManager = stateScope.ServiceProvider.GetRequiredService<IUserStateManager>();
            
            // –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π ID –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
            var appealId = await stateManager.GetDataAsync<int>(userId, "close_appeal_id", cancellationToken);

            if (appealId == 0)
            {
                await SendErrorMessageAsync(
                    botClient,
                    message.Chat.Id,
                    "‚ùå –ü–æ–º–∏–ª–∫–∞: ID –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                    cancellationToken);

                await stateManager.ClearStateAsync(userId, cancellationToken);
                await stateManager.ClearAllDataAsync(userId, cancellationToken);
                return;
            }

            // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑ –≤–∫–∞–∑–∞–Ω–æ—é –ø—Ä–∏—á–∏–Ω–æ—é
            var result = await _mediator.Send(new CloseAppealCommand
            {
                AppealId = appealId,
                AdminId = userId,
                Reason = reason
            }, cancellationToken);

            if (result.IsSuccess)
            {
                await stateManager.ClearStateAsync(userId, cancellationToken);
                await stateManager.ClearAllDataAsync(userId, cancellationToken);

                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: "‚úÖ <b>–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ!</b>\n\n" +
                          $"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n" +
                          "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—Ç—Ä–∏–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è.",
                    parseMode: ParseMode.Html,
                    replyMarkup: GetMainMenu(),
                    cancellationToken: cancellationToken);
            }
            else
            {
                await SendErrorMessageAsync(
                    botClient,
                    message.Chat.Id,
                    $"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è: {result.Error}",
                    cancellationToken);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø—Ä–∏—á–∏–Ω–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", userId);

            await SendErrorMessageAsync(
                botClient,
                message.Chat.Id,
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫rit—Ç—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                cancellationToken);

            using var errorStateScope = _scopeFactory.CreateScope();
            var errorStateManager = errorStateScope.ServiceProvider.GetRequiredService<IUserStateManager>();
            await errorStateManager.ClearStateAsync(userId, cancellationToken);
            await errorStateManager.ClearAllDataAsync(userId, cancellationToken);
        }
    }

    /// <summary>
    /// –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥—ñ–π –¥–ª—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    /// </summary>
    private InlineKeyboardMarkup GetAdminAppealActionsKeyboard(int appealId, bool isAssignedToMe, bool isClosed)
    {
        var buttons = new List<List<InlineKeyboardButton>>();

        if (!isClosed)
        {
            // –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ - –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
            if (isAssignedToMe)
            {
                buttons.Add(new List<InlineKeyboardButton>
                {
                    InlineKeyboardButton.WithCallbackData("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è", $"admin_unassign_{appealId}")
                });
            }
            else
            {
                buttons.Add(new List<InlineKeyboardButton>
                {
                    InlineKeyboardButton.WithCallbackData("üë§ –ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ —Å–æ–±—ñ", $"admin_assign_me_{appealId}")
                });
            }

            // –î—Ä—É–≥–∏–π —Ä—è–¥–æ–∫ - –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            buttons.Add(new List<InlineKeyboardButton>
            {
                InlineKeyboardButton.WithCallbackData("üéØ –ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç", $"admin_priority_{appealId}"),
                InlineKeyboardButton.WithCallbackData("‚úçÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", $"admin_reply_{appealId}")
            });

            // –¢—Ä–µ—Ç—ñ–π —Ä—è–¥–æ–∫ - –∑–∞–∫—Ä–∏—Ç—Ç—è
            buttons.Add(new List<InlineKeyboardButton>
            {
                InlineKeyboardButton.WithCallbackData("‚ùå –ó–∞–∫—Ä–∏—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è", $"admin_close_{appealId}")
            });
        }

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        buttons.Add(new List<InlineKeyboardButton>
        {
            InlineKeyboardButton.WithCallbackData("üîô –°–ø–∏—Å–æ–∫ –∑–≤–µ—Ä–Ω–µ–Ω—å", "admin_appeals"),
            InlineKeyboardButton.WithCallbackData("üè† –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", "admin_panel")
        });

        return new InlineKeyboardMarkup(buttons);
    }

    /// <summary>
    /// –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤–∏–±–æ—Ä—É –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
    /// </summary>
    private InlineKeyboardMarkup GetPrioritySelectionKeyboard(int appealId)
    {
        return new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üü¢ –ù–∏–∑—å–∫–∏–π", $"admin_set_priority_{appealId}_{(int)AppealPriority.Low}"),
                InlineKeyboardButton.WithCallbackData("üü° –ó–≤–∏—á–∞–π–Ω–∏–π", $"admin_set_priority_{appealId}_{(int)AppealPriority.Normal}")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üü† –í–∏—Å–æ–∫–∏–π", $"admin_set_priority_{appealId}_{(int)AppealPriority.High}"),
                InlineKeyboardButton.WithCallbackData("üî¥ –¢–µ—Ä–º—ñ–Ω–æ–≤–∏–π", $"admin_set_priority_{appealId}_{(int)AppealPriority.Urgent}")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", $"admin_view_{appealId}")
            }
        });
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞
    /// </summary>
    public override async Task HandleTextMessageAsync(
        ITelegramBotClient botClient,
        Message message,
        UserConversationState state,
        CancellationToken cancellationToken)
    {
        switch (state)
        {
            case UserConversationState.WaitingAdminReply:
                await HandleAdminReplyInputAsync(botClient, message, cancellationToken);
                break;

            case UserConversationState.WaitingCloseReason:
                await HandleCloseReasonInputAsync(botClient, message, cancellationToken);
                break;

            default:
                // –Ü–Ω—à—ñ —Å—Ç–∞–Ω–∏ –Ω–µ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è —Ü–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º
                break;
        }
    }
}