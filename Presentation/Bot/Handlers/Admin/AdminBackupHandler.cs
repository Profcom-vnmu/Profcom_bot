using MediatR;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using StudentUnionBot.Application.Admin.Commands.CreateBackup;
using StudentUnionBot.Application.Users.Queries.GetUserByTelegramId;
using StudentUnionBot.Core.Results;
using StudentUnionBot.Domain.Enums;
using StudentUnionBot.Domain.Interfaces;
using StudentUnionBot.Presentation.Bot.Handlers.Common;
using StudentUnionBot.Presentation.Bot.Handlers.Interfaces;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace StudentUnionBot.Presentation.Bot.Handlers.Admin;

/// <summary>
/// –û–±—Ä–æ–±–Ω–∏–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –±–µ–∫–∞–ø—ñ–≤
/// </summary>
public class AdminBackupHandler : BaseHandler, IAdminBackupHandler
{
    public AdminBackupHandler(
        IServiceScopeFactory scopeFactory,
        ILogger<AdminBackupHandler> logger,
        IMediator mediator)
        : base(scopeFactory, logger, mediator)
    {
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (AdminBackupHandler –Ω–µ –æ–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
    /// </summary>
    public override async Task HandleTextMessageAsync(ITelegramBotClient botClient, Message message, UserConversationState state, CancellationToken cancellationToken)
    {
        // AdminBackupHandler –Ω–µ –æ–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await Task.CompletedTask;
    }

    /// <summary>
    /// –ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –±–µ–∫–∞–ø—ñ–≤
    /// </summary>
    public async Task HandleAdminBackupMenuCallback(ITelegramBotClient botClient, CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ MediatR
        var getUserQuery = new GetUserByTelegramIdQuery { TelegramId = callbackQuery.From.Id };
        var userResult = await mediator.Send(getUserQuery, cancellationToken);
        
        if (!userResult.IsSuccess || userResult.Value?.Role != UserRole.Admin && userResult.Value?.Role != UserRole.SuperAdmin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var menuText = "üíæ <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–∏–º–∏ –∫–æ–ø—ñ—è–º–∏</b>\n\n" +
                      "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ä–µ–∑–µ—Ä–≤–Ω–∏–º–∏ –∫–æ–ø—ñ—è–º–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:\n\n" +
                      "üîπ <b>–°—Ç–≤–æ—Ä–∏—Ç–∏</b> - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é\n" +
                      "üîπ <b>–°–ø–∏—Å–æ–∫</b> - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó\n" +
                      "üîπ <b>–í—ñ–¥–Ω–æ–≤–∏—Ç–∏</b> - –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö –∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó";

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üìÅ –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é", "admin_backup_create"),
                InlineKeyboardButton.WithCallbackData("üìã –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π", "admin_backup_list")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", "admin_panel")
            }
        });

        await botClient.EditMessageTextAsync(
            chatId: callbackQuery.Message!.Chat.Id,
            messageId: callbackQuery.Message.MessageId,
            text: menuText,
            parseMode: ParseMode.Html,
            replyMarkup: keyboard,
            cancellationToken: cancellationToken);

        await botClient.AnswerCallbackQueryAsync(
            callbackQuery.Id,
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó
    /// </summary>
    public async Task HandleAdminRestoreConfirmCallback(ITelegramBotClient botClient, CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ MediatR
        var getUserQuery = new GetUserByTelegramIdQuery { TelegramId = callbackQuery.From.Id };
        var userResult = await mediator.Send(getUserQuery, cancellationToken);
        
        if (!userResult.IsSuccess || userResult.Value?.Role != UserRole.Admin && userResult.Value?.Role != UserRole.SuperAdmin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var user = userResult.Value!;
        var backupName = callbackQuery.Data!.Replace("admin_restore_confirm_", "");
        var backupDirectory = Path.Combine(Directory.GetCurrentDirectory(), "Backups");
        var backupFilePath = Path.Combine(backupDirectory, $"{backupName}.db");

        if (!System.IO.File.Exists(backupFilePath))
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        await botClient.AnswerCallbackQueryAsync(
            callbackQuery.Id,
            "‚è≥ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...",
            cancellationToken: cancellationToken);

        await botClient.EditMessageTextAsync(
            chatId: callbackQuery.Message!.Chat.Id,
            messageId: callbackQuery.Message.MessageId,
            text: "‚è≥ <b>–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö</b>\n\n" +
                  "–ó–∞—á–µ–∫–∞–π—Ç–µ, –π–¥–µ –ø—Ä–æ—Ü–µ—Å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó...\n\n" +
                  "‚ùó <b>–ù–ï –í–ò–ú–ò–ö–ê–ô–¢–ï –ë–û–¢!</b>",
            parseMode: ParseMode.Html,
            cancellationToken: cancellationToken);

        try
        {
            var backupService = scope.ServiceProvider.GetRequiredService<IBackupService>();
            var result = await backupService.RestoreBackupAsync(backupFilePath, cancellationToken);

            if (result.IsSuccess)
            {
                var successText = "‚úÖ <b>–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!</b>\n\n" +
                                $"üìÅ <b>–ó —Ñ–∞–π–ª—É:</b> {backupName}.db\n" +
                                $"üìÖ <b>–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ:</b> {DateTime.Now:dd.MM.yyyy HH:mm:ss}\n\n" +
                                "‚úÖ –ü–æ—Ç–æ—á–Ω–∞ –ë–î –±—É–ª–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —è–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è\n" +
                                "‚úÖ –í—Å—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω—ñ\n\n" +
                                "‚ö†Ô∏è <b>–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω</b>";

                var keyboard = new InlineKeyboardMarkup(new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üìã –°–ø–∏—Å–æ–∫ –∫–æ–ø—ñ–π", "admin_backup_list"),
                        InlineKeyboardButton.WithCallbackData("üè† –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", "admin_panel")
                    }
                });

                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: successText,
                    parseMode: ParseMode.Html,
                    replyMarkup: keyboard,
                    cancellationToken: cancellationToken);
            }
            else
            {
                var errorText = "‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö</b>\n\n" +
                              $"–ü–æ–º–∏–ª–∫–∞: {result.Error}\n\n" +
                              "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∑–∞–ª–∏—à–∏–ª–∞—Å—å –±–µ–∑ –∑–º—ñ–Ω.\n" +
                              "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.";

                var keyboard = new InlineKeyboardMarkup(new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", $"admin_backup_restore_{backupName}"),
                        InlineKeyboardButton.WithCallbackData("üìã –°–ø–∏—Å–æ–∫ –∫–æ–ø—ñ–π", "admin_backup_list")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", "admin_backup")
                    }
                });

                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: errorText,
                    parseMode: ParseMode.Html,
                    replyMarkup: keyboard,
                    cancellationToken: cancellationToken);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó {BackupName} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", backupName, user.TelegramId);

            var errorText = "‚ùå <b>–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è</b>\n\n" +
                          "–í–∏–Ω–∏–∫–ª–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.\n" +
                          "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∞!\n\n" +
                          "‚ö†Ô∏è <b>–¢–ï–†–ú–Ü–ù–û–í–Ü –î–Ü–á:</b>\n" +
                          "1. –ó—É–ø–∏–Ω—ñ—Ç—å –±–æ—Ç\n" +
                          "2. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞\n" +
                          "3. –ù–ï –≤–∏–∫–æ–Ω—É–π—Ç–µ —ñ–Ω—à—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –ë–î";

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üìã –°–ø–∏—Å–æ–∫ –∫–æ–ø—ñ–π", "admin_backup_list"),
                    InlineKeyboardButton.WithCallbackData("üè† –ì–æ–ª–æ–≤–Ω–∞", "back_to_main")
                }
            });

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: errorText,
                parseMode: ParseMode.Html,
                replyMarkup: keyboard,
                cancellationToken: cancellationToken);
        }
    }

    /// <summary>
    /// –§–æ—Ä–º–∞—Ç—É—î —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É —É –∑—Ä—É—á–Ω–æ–º—É –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –≤–∏–≥–ª—è–¥—ñ
    /// </summary>
    private static string FormatBytes(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }

        return $"{len:0.##} {sizes[order]}";
    }

    /// <summary>
    /// –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –±–µ–∫–∞–ø
    /// </summary>
    public async Task HandleAdminBackupCreateCallback(ITelegramBotClient botClient, CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ MediatR
        var getUserQuery = new GetUserByTelegramIdQuery { TelegramId = callbackQuery.From.Id };
        var userResult = await mediator.Send(getUserQuery, cancellationToken);
        
        if (!userResult.IsSuccess || userResult.Value?.Role != UserRole.Admin && userResult.Value?.Role != UserRole.SuperAdmin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var user = userResult.Value!;

        await botClient.AnswerCallbackQueryAsync(
            callbackQuery.Id,
            "‚è≥ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó...",
            cancellationToken: cancellationToken);

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
        await botClient.EditMessageTextAsync(
            chatId: callbackQuery.Message!.Chat.Id,
            messageId: callbackQuery.Message.MessageId,
            text: "‚è≥ <b>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó</b>\n\n–ó–∞—á–µ–∫–∞–π—Ç–µ, –π–¥–µ –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...",
            parseMode: ParseMode.Html,
            cancellationToken: cancellationToken);

        try
        {
            var command = new CreateBackupCommand { AdminId = user.TelegramId };
            var result = await mediator.Send(command, cancellationToken);

            if (result.IsSuccess && result.Value != null)
            {
                var backup = result.Value;
                var successText = "‚úÖ <b>–†–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!</b>\n\n" +
                                $"üìÅ <b>–ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É:</b> {backup.BackupFileName}\n" +
                                $"üìè <b>–†–æ–∑–º—ñ—Ä:</b> {FormatBytes(backup.FileSizeBytes)}\n" +
                                $"üìÖ <b>–°—Ç–≤–æ—Ä–µ–Ω–æ:</b> {backup.CreatedAt:dd.MM.yyyy HH:mm:ss}\n" +
                                $"üíæ <b>–†–æ–∑–º—ñ—Ä –ë–î:</b> {backup.DatabaseSize}";

                var keyboard = new InlineKeyboardMarkup(new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üìã –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π", "admin_backup_list"),
                        InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", "admin_backup")
                    }
                });

                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: successText,
                    parseMode: ParseMode.Html,
                    replyMarkup: keyboard,
                    cancellationToken: cancellationToken);
            }
            else
            {
                var errorText = "‚ùå <b>–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó</b>\n\n" +
                              $"–ü–æ–º–∏–ª–∫–∞: {result.Error}\n\n" +
                              "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.";

                var keyboard = new InlineKeyboardMarkup(new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", "admin_backup_create"),
                        InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", "admin_backup")
                    }
                });

                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: errorText,
                    parseMode: ParseMode.Html,
                    replyMarkup: keyboard,
                    cancellationToken: cancellationToken);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", user.TelegramId);

            var errorText = "‚ùå <b>–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞</b>\n\n" +
                          "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó.\n" +
                          "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.";

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", "admin_backup_create"),
                    InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", "admin_backup")
                }
            });

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: errorText,
                parseMode: ParseMode.Html,
                replyMarkup: keyboard,
                cancellationToken: cancellationToken);
        }
    }

    /// <summary>
    /// –ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø—ñ–≤
    /// </summary>
    public async Task HandleAdminBackupListCallback(ITelegramBotClient botClient, CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ MediatR
        var getUserQuery = new GetUserByTelegramIdQuery { TelegramId = callbackQuery.From.Id };
        var userResult = await mediator.Send(getUserQuery, cancellationToken);
        
        if (!userResult.IsSuccess || userResult.Value?.Role != UserRole.Admin && userResult.Value?.Role != UserRole.SuperAdmin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var user = userResult.Value!;

        await botClient.AnswerCallbackQueryAsync(
            callbackQuery.Id,
            "üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É...",
            cancellationToken: cancellationToken);

        try
        {
            var backupService = scope.ServiceProvider.GetRequiredService<IBackupService>();
            var result = await backupService.GetAvailableBackupsAsync(cancellationToken);

            if (result.IsSuccess && result.Value != null)
            {
                var backups = result.Value;
                
                if (backups.Count == 0)
                {
                    var noBackupsText = "üìã <b>–°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π</b>\n\n" +
                                       "‚ùå –†–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ.\n\n" +
                                       "–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à—É —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏.";

                    var noBackupsKeyboard = new InlineKeyboardMarkup(new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üìÅ –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é", "admin_backup_create")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", "admin_backup")
                        }
                    });

                    await botClient.EditMessageTextAsync(
                        chatId: callbackQuery.Message!.Chat.Id,
                        messageId: callbackQuery.Message.MessageId,
                        text: noBackupsText,
                        parseMode: ParseMode.Html,
                        replyMarkup: noBackupsKeyboard,
                        cancellationToken: cancellationToken);
                    return;
                }

                var listText = "üìã <b>–°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π</b>\n\n";
                listText += $"–ó–Ω–∞–π–¥–µ–Ω–æ {backups.Count} —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π:\n\n";

                var buttons = new List<List<InlineKeyboardButton>>();

                for (int i = 0; i < Math.Min(backups.Count, 10); i++) // –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 10
                {
                    var backup = backups[i];
                    listText += $"üìÅ <b>{backup.FileName}</b>\n";
                    listText += $"   üìè –†–æ–∑–º—ñ—Ä: {backup.FormattedSize}\n";
                    listText += $"   üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {backup.FormattedDate}\n\n";

                    // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
                    var restoreCallbackData = $"admin_backup_restore_{Path.GetFileNameWithoutExtension(backup.FileName)}";
                    buttons.Add(new List<InlineKeyboardButton>
                    {
                        InlineKeyboardButton.WithCallbackData($"üîÑ –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ {backup.FileName}", restoreCallbackData)
                    });
                }

                if (backups.Count > 10)
                {
                    listText += $"... —Ç–∞ —â–µ {backups.Count - 10} —Ñ–∞–π–ª—ñ–≤\n\n";
                }

                listText += "‚ö†Ô∏è <b>–£–í–ê–ì–ê:</b> –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–º—ñ–Ω–∏—Ç—å –ø–æ—Ç–æ—á–Ω—É –±–∞–∑—É –¥–∞–Ω–∏—Ö!";

                // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
                buttons.Add(new List<InlineKeyboardButton>
                {
                    InlineKeyboardButton.WithCallbackData("üìÅ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∫–æ–ø—ñ—é", "admin_backup_create"),
                    InlineKeyboardButton.WithCallbackData("üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫", "admin_backup_list")
                });

                buttons.Add(new List<InlineKeyboardButton>
                {
                    InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", "admin_backup")
                });

                var keyboard = new InlineKeyboardMarkup(buttons);

                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: listText,
                    parseMode: ParseMode.Html,
                    replyMarkup: keyboard,
                    cancellationToken: cancellationToken);
            }
            else
            {
                var errorText = "‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É</b>\n\n" +
                              $"–ü–æ–º–∏–ª–∫–∞: {result.Error}\n\n" +
                              "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.";

                var keyboard = new InlineKeyboardMarkup(new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", "admin_backup_list"),
                        InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", "admin_backup")
                    }
                });

                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: errorText,
                    parseMode: ParseMode.Html,
                    replyMarkup: keyboard,
                    cancellationToken: cancellationToken);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", user.TelegramId);

            var errorText = "‚ùå <b>–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞</b>\n\n" +
                          "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π.\n" +
                          "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.";

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", "admin_backup_list"),
                    InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", "admin_backup")
                }
            });

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: errorText,
                parseMode: ParseMode.Html,
                replyMarkup: keyboard,
                cancellationToken: cancellationToken);
        }
    }

    /// <summary>
    /// –í—ñ–¥–Ω–æ–≤–ª—é—î –±–µ–∫–∞–ø
    /// </summary>
    public async Task HandleAdminBackupRestoreCallback(ITelegramBotClient botClient, CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ MediatR
        var getUserQuery = new GetUserByTelegramIdQuery { TelegramId = callbackQuery.From.Id };
        var userResult = await mediator.Send(getUserQuery, cancellationToken);
        
        if (!userResult.IsSuccess || userResult.Value?.Role != UserRole.Admin && userResult.Value?.Role != UserRole.SuperAdmin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var user = userResult.Value!;
        var backupName = callbackQuery.Data!.Replace("admin_backup_restore_", "");
        var backupFileName = $"{backupName}.db";

        // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
        var confirmText = "‚ö†Ô∏è <b>–ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø</b>\n\n" +
                         $"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö –∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó:\n" +
                         $"<code>{backupFileName}</code>\n\n" +
                         "‚ùó <b>–£–í–ê–ì–ê:</b>\n" +
                         "‚Ä¢ –ü–æ—Ç–æ—á–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö –±—É–¥–µ –∑–∞–º—ñ–Ω–µ–Ω–∞\n" +
                         "‚Ä¢ –í—Å—ñ –∑–º—ñ–Ω–∏ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–ø—ñ—ó –±—É–¥—É—Ç—å –≤—Ç—Ä–∞—á–µ–Ω—ñ\n" +
                         "‚Ä¢ –ü–µ—Ä–µ–¥ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è–º –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è –ø–æ—Ç–æ—á–Ω–æ—ó –ë–î\n" +
                         "‚Ä¢ –ü—Ä–æ—Ü–µ—Å –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∏–π!\n\n" +
                         "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?";

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚úÖ –¢–ê–ö, –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏", $"admin_restore_confirm_{backupName}"),
                InlineKeyboardButton.WithCallbackData("‚ùå –ù–Ü, —Å–∫–∞—Å—É–≤–∞—Ç–∏", "admin_backup_list")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", "admin_backup_list")
            }
        });

        await botClient.EditMessageTextAsync(
            chatId: callbackQuery.Message!.Chat.Id,
            messageId: callbackQuery.Message.MessageId,
            text: confirmText,
            parseMode: ParseMode.Html,
            replyMarkup: keyboard,
            cancellationToken: cancellationToken);

        await botClient.AnswerCallbackQueryAsync(
            callbackQuery.Id,
            "–§—É–Ω–∫—Ü—ñ—è —É —Ä–æ–∑—Ä–æ–±—Ü—ñ",
            cancellationToken: cancellationToken);
    }
}