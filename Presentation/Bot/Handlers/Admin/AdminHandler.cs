using MediatR;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using StudentUnionBot.Application.Admin.Queries.GetAppealStatistics;
using StudentUnionBot.Application.Appeals.Queries.GetAdminAppeals;
using StudentUnionBot.Application.Common.Interfaces;
using StudentUnionBot.Application.Users.Queries.GetUserByTelegramId;
using StudentUnionBot.Presentation.Bot.Handlers.Common;
using StudentUnionBot.Presentation.Bot.Handlers.Interfaces;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace StudentUnionBot.Presentation.Bot.Handlers.Admin;

/// <summary>
/// –û–±—Ä–æ–±–Ω–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
/// </summary>
public class AdminHandler : BaseHandler, IAdminHandler
{
    public AdminHandler(
        IServiceScopeFactory scopeFactory,
        ILogger<AdminHandler> logger,
        IMediator mediator)
        : base(scopeFactory, logger, mediator)
    {
    }

    /// <summary>
    /// –ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω—É –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    /// </summary>
    public async Task HandleAdminPanelCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ MediatR
        var getUserQuery = new StudentUnionBot.Application.Users.Queries.GetUserByTelegramId.GetUserByTelegramIdQuery 
        { 
            TelegramId = callbackQuery.From.Id 
        };
        
        var userResult = await mediator.Send(getUserQuery, cancellationToken);
        if (!userResult.IsSuccess || userResult.Value?.Role != Domain.Enums.UserRole.Admin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var user = userResult.Value!;
        
        // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        var allAppealsResult = await mediator.Send(new GetAdminAppealsQuery
        {
            AdminId = user.TelegramId,
            PageNumber = 1,
            PageSize = 1
        }, cancellationToken);

        var newAppealsResult = await mediator.Send(new GetAdminAppealsQuery
        {
            AdminId = user.TelegramId,
            Status = Domain.Enums.AppealStatus.New,
            PageNumber = 1,
            PageSize = 1
        }, cancellationToken);

        var myAppealsResult = await mediator.Send(new GetAdminAppealsQuery
        {
            AdminId = user.TelegramId,
            OnlyMy = true,
            PageNumber = 1,
            PageSize = 1
        }, cancellationToken);

        var unassignedResult = await mediator.Send(new GetAdminAppealsQuery
        {
            AdminId = user.TelegramId,
            OnlyUnassigned = true,
            PageNumber = 1,
            PageSize = 1
        }, cancellationToken);

        var statsText = $"üîß‚öôÔ∏è <b>–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å</b>\n\n" +
                       $"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n" +
                       $"üìã –í—Å—å–æ–≥–æ –∑–≤–µ—Ä–Ω–µ–Ω—å: {allAppealsResult.Value?.TotalCount ?? 0}\n" +
                       $"üÜï –ù–æ–≤–∏—Ö: {newAppealsResult.Value?.TotalCount ?? 0}\n" +
                       $"üë§ –ú–æ—ó—Ö: {myAppealsResult.Value?.TotalCount ?? 0}\n" +
                       $"‚ùå –ù–µ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏—Ö: {unassignedResult.Value?.TotalCount ?? 0}\n\n" +
                       $"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:";

        await botClient.EditMessageTextAsync(
            chatId: callbackQuery.Message!.Chat.Id,
            messageId: callbackQuery.Message.MessageId,
            text: statsText,
            parseMode: ParseMode.Html,
            replyMarkup: GetAdminPanelKeyboard(),
            cancellationToken: cancellationToken);

        await botClient.AnswerCallbackQueryAsync(
            callbackQueryId: callbackQuery.Id,
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–≤–µ—Ä–Ω–µ–Ω—å
    /// </summary>
    public async Task HandleAdminStatisticsCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        using var scope = _scopeFactory.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ MediatR
        var getUserQuery = new StudentUnionBot.Application.Users.Queries.GetUserByTelegramId.GetUserByTelegramIdQuery 
        { 
            TelegramId = callbackQuery.From.Id 
        };
        
        var userResult = await mediator.Send(getUserQuery, cancellationToken);
        if (!userResult.IsSuccess || userResult.Value?.Role != Domain.Enums.UserRole.Admin)
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        var user = userResult.Value!;

        try
        {
            
            var query = new GetAppealStatisticsQuery
            {
                AdminId = user.TelegramId,
                Days = 30
            };

            var result = await mediator.Send(query, cancellationToken);

            if (!result.IsSuccess || result.Value == null)
            {
                await botClient.AnswerCallbackQueryAsync(
                    callbackQuery.Id,
                    $"‚ùå {result.Error}",
                    showAlert: true,
                    cancellationToken: cancellationToken);
                return;
            }

            var stats = result.Value;
            
            // –§–æ—Ä–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
            var statsText = $"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–≤–µ—Ä–Ω–µ–Ω—å</b>\n" +
                           $"üìÖ –ü–µ—Ä—ñ–æ–¥: {stats.FromDate:dd.MM.yyyy} - {stats.ToDate:dd.MM.yyyy}\n\n" +
                           
                           $"üìã <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n" +
                           $"‚Ä¢ –í—Å—å–æ–≥–æ –∑–≤–µ—Ä–Ω–µ–Ω—å: {stats.TotalAppeals}\n" +
                           $"‚Ä¢ üü¢ –í—ñ–¥–∫—Ä–∏—Ç–æ: {stats.OpenAppeals}\n" +
                           $"‚Ä¢ ‚öôÔ∏è –í —Ä–æ–±–æ—Ç—ñ: {stats.InProgressAppeals}\n" +
                           $"‚Ä¢ ‚úÖ –ó–∞–∫—Ä–∏—Ç–æ: {stats.ClosedAppeals}\n" +
                           $"‚Ä¢ ‚è± –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤–∏—Ä—ñ—à–µ–Ω–Ω—è: {stats.FormattedAverageResolutionTime}\n\n";

            // –î–æ–¥–∞—î–º–æ —Ä–æ–∑–±–∏–≤–∫—É –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
            if (stats.CategoryBreakdown.Any())
            {
                statsText += "üìÇ <b>–ó–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏:</b>\n";
                foreach (var category in stats.CategoryBreakdown.OrderByDescending(c => c.Count).Take(5))
                {
                    var progressBar = CreateProgressBar(category.Percentage);
                    statsText += $"{category.Icon} {category.Category}: {category.Count} ({category.Percentage:0.0}%)\n";
                    statsText += $"{progressBar}\n";
                }
                statsText += "\n";
            }

            // –î–æ–¥–∞—î–º–æ —Ä–æ–∑–±–∏–≤–∫—É –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
            if (stats.PriorityBreakdown.Any())
            {
                statsText += "üéØ <b>–ó–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏:</b>\n";
                foreach (var priority in stats.PriorityBreakdown.OrderByDescending(p => p.Count))
                {
                    var progressBar = CreateProgressBar(priority.Percentage);
                    statsText += $"{priority.Icon} {priority.Priority}: {priority.Count} ({priority.Percentage:0.0}%)\n";
                    statsText += $"{progressBar}\n";
                }
                statsText += "\n";
            }

            // –î–æ–¥–∞—î–º–æ —Ç—Ä–µ–Ω–¥ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ –¥–Ω—ñ (—Ç–æ–ø 7)
            if (stats.DailyStats.Any())
            {
                statsText += "üìà <b>–¢—Ä–µ–Ω–¥ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤:</b>\n";
                foreach (var day in stats.DailyStats.OrderByDescending(d => d.Date).Take(7))
                {
                    var trend = day.Created > day.Closed ? "üìà" : day.Created < day.Closed ? "üìâ" : "‚û°Ô∏è";
                    statsText += $"{trend} {day.FormattedDate}: +{day.Created} / -{day.Closed}\n";
                }
            }

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üîô –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", "admin_panel")
                }
            });

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: statsText,
                parseMode: ParseMode.Html,
                replyMarkup: keyboard,
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞ {AdminId}", user?.TelegramId);
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                showAlert: true,
                cancellationToken: cancellationToken);
        }

        await botClient.AnswerCallbackQueryAsync(
            callbackQueryId: callbackQuery.Id,
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –°—Ç–≤–æ—Ä—é—î –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä –¥–ª—è –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤
    /// </summary>
    private string CreateProgressBar(double percentage, int length = 10)
    {
        var filled = (int)Math.Round(percentage / 100 * length);
        var empty = length - filled;
        return new string('‚ñì', filled) + new string('‚ñë', empty);
    }

    /// <summary>
    /// –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ
    /// </summary>
    private InlineKeyboardMarkup GetAdminPanelKeyboard()
    {
        return new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "admin_stats"),
                InlineKeyboardButton.WithCallbackData("üìã –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è", "admin_appeals")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üÜï –ù–æ–≤—ñ", "admin_appeals_new"),
                InlineKeyboardButton.WithCallbackData("üë§ –ú–æ—ó", "admin_appeals_my")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚ùå –ù–µ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ", "admin_appeals_unassigned")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üíæ –ë–µ–∫–∞–ø–∏", "admin_backup"),
                InlineKeyboardButton.WithCallbackData("üì¢ –†–æ–∑—Å–∏–ª–∫–∏", "admin_broadcast")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üì∞ –ù–æ–≤–∏–Ω–∏", "news_management"),
                InlineKeyboardButton.WithCallbackData("üìÖ –ü–æ–¥—ñ—ó", "events_management")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "back_to_main")
            }
        });
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Ü—å–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞)
    /// </summary>
    public override async Task HandleTextMessageAsync(
        ITelegramBotClient botClient,
        Message message,
        Domain.Enums.UserConversationState state,
        CancellationToken cancellationToken)
    {
        // AdminHandler –Ω–µ –æ–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await Task.CompletedTask;
    }



    /// <summary>
    /// –û–±—Ä–æ–±–∫–∞ callback –¥–ª—è —Å–ø–∏—Å–∫—É –∑–≤–µ—Ä–Ω–µ–Ω—å (—Ç–∏–º—á–∞—Å–æ–≤–æ –ø—É—Å—Ç–æ)
    /// </summary>
    public async Task HandleAdminAppealsListCallbackAsync(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        // TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–≤–µ—Ä–Ω–µ–Ω—å
        await botClient.AnswerCallbackQueryAsync(
            callbackQuery.Id,
            "üöß –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ",
            showAlert: true,
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –û–±—Ä–æ–±–∫–∞ callback –¥–ª—è —Ä–æ–∑—Å–∏–ª–æ–∫ (—Ç–∏–º—á–∞—Å–æ–≤–æ –ø—É—Å—Ç–æ)
    /// </summary>
    public async Task HandleBroadcastCallbackAsync(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        // TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫–∏
        await botClient.AnswerCallbackQueryAsync(
            callbackQuery.Id,
            "üöß –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ",
            showAlert: true,
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –±–µ–∫–∞–ø—ñ–≤
    /// </summary>
    public async Task HandleAdminBackupMenuCallback(ITelegramBotClient botClient, CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        try
        {
            var backupMenu = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ Backup", "admin_backup_create")
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üìã –°–ø–∏—Å–æ–∫ Backups", "admin_backup_list")
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üîô –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", "admin_panel")
                }
            });

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: "üíæ <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–µ–∫–∞–ø–∞–º–∏</b>\n\n" +
                      "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                parseMode: ParseMode.Html,
                replyMarkup: backupMenu,
                cancellationToken: cancellationToken);

            await botClient.AnswerCallbackQueryAsync(
                callbackQueryId: callbackQuery.Id,
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –≤ HandleAdminBackupMenuCallback");
            
            await botClient.AnswerCallbackQueryAsync(
                callbackQueryId: callbackQuery.Id,
                text: "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                showAlert: true,
                cancellationToken: cancellationToken);
        }
    }
}