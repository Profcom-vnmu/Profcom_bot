using MediatR;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using StudentUnionBot.Application.Common.Interfaces;
using StudentUnionBot.Domain.Interfaces;
// using StudentUnionBot.Application.Notifications.Commands.SendBroadcast;
// using StudentUnionBot.Application.Users.Queries.GetAllActiveUsers;
using StudentUnionBot.Domain.Enums;
using StudentUnionBot.Presentation.Bot.Handlers.Common;
using StudentUnionBot.Presentation.Bot.Handlers.Interfaces;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace StudentUnionBot.Presentation.Bot.Handlers.Admin;

/// <summary>
/// –û–±—Ä–æ–±–Ω–∏–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
/// </summary>
public class AdminBroadcastHandler : BaseHandler, IAdminBroadcastHandler
{
    public AdminBroadcastHandler(
        IServiceScopeFactory scopeFactory,
        ILogger<AdminBroadcastHandler> logger,
        IMediator mediator)
        : base(scopeFactory, logger, mediator)
    {
    }

    /// <summary>
    /// –ü–æ–∫–∞–∑—É—î –º–µ–Ω—é —Ä–æ–∑—Å–∏–ª–æ–∫
    /// </summary>
    public async Task HandleAdminBroadcastMenuCallback(ITelegramBotClient botClient, CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        var userId = callbackQuery.From.Id;
        
        try
        {
            using var scope = _scopeFactory.CreateScope();
            var stateManager = scope.ServiceProvider.GetRequiredService<IUserStateManager>();
            
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Ä–æ–∑—Å–∏–ª–∫–∏
            await stateManager.SetStateAsync(userId, UserConversationState.WaitingBroadcastMessage, cancellationToken);

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: "üì¢ <b>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏</b>\n\n" +
                      "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:\n\n" +
                      "‚ö†Ô∏è <i>–ë—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ! –†–æ–∑—Å–∏–ª–∫–∞ –ø—ñ–¥–µ –≤—Å—ñ–º –∞–∫—Ç–∏–≤–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–æ—Ç–∞.</i>",
                parseMode: ParseMode.Html,
                replyMarkup: GetCancelBroadcastKeyboard(),
                cancellationToken: cancellationToken);

            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id, 
                "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏", 
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞ {UserId}", userId);
            
            await SendErrorMessageAsync(
                botClient, 
                callbackQuery.Message!.Chat.Id,
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ä–æ–∑—Å–∏–ª–∫–∏.",
                cancellationToken);
        }
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏
    /// </summary>
    public async Task HandleBroadcastMessageInputAsync(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
    {
        var userId = message.From!.Id;
        var broadcastText = message.Text?.Trim();

        if (string.IsNullOrWhiteSpace(broadcastText))
        {
            await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "‚ùå –¢–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
                parseMode: ParseMode.Html,
                replyMarkup: GetCancelBroadcastKeyboard(),
                cancellationToken: cancellationToken);
            return;
        }

        if (broadcastText.Length > 4000)
        {
            await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "‚ùå –¢–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª—ñ–≤). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
                parseMode: ParseMode.Html,
                replyMarkup: GetCancelBroadcastKeyboard(),
                cancellationToken: cancellationToken);
            return;
        }

        try
        {
            using var scope = _scopeFactory.CreateScope();
            var stateManager = scope.ServiceProvider.GetRequiredService<IUserStateManager>();
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏
            await stateManager.SetDataAsync(userId, "broadcast_text", broadcastText, cancellationToken);
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            await stateManager.SetStateAsync(userId, UserConversationState.WaitingBroadcastConfirmation, cancellationToken);

            // –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            var unitOfWork = scope.ServiceProvider.GetRequiredService<IUnitOfWork>();
            var activeUsers = await unitOfWork.Users.GetActiveUsersAsync(cancellationToken);
            var usersCount = activeUsers.Count;

            await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "üì¢ <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏</b>\n\n" +
                      $"<b>–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n{broadcastText}\n\n" +
                      $"<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤:</b> {usersCount} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n\n" +
                      "‚ö†Ô∏è <b>–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ü—é —Ä–æ–∑—Å–∏–ª–∫—É?</b>",
                parseMode: ParseMode.Html,
                replyMarkup: GetConfirmBroadcastKeyboard(),
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç–µ–∫—Å—Ç—É —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ {UserId}", userId);
            
            using var scope = _scopeFactory.CreateScope();
            var stateManager = scope.ServiceProvider.GetRequiredService<IUserStateManager>();
            await stateManager.ClearStateAsync(userId, cancellationToken);
            
            await SendErrorMessageAsync(
                botClient,
                message.Chat.Id,
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ä–æ–∑—Å–∏–ª–∫–∏.\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                cancellationToken);
        }
    }

    /// <summary>
    /// –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î —Ä–æ–∑—Å–∏–ª–∫—É
    /// </summary>
    public async Task HandleBroadcastConfirmCallback(ITelegramBotClient botClient, CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        var userId = callbackQuery.From.Id;
        
        try
        {
            using var scope = _scopeFactory.CreateScope();
            var stateManager = scope.ServiceProvider.GetRequiredService<IUserStateManager>();
            
            // –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏
            var broadcastText = await stateManager.GetDataAsync<string>(userId, "broadcast_text", cancellationToken);
            
            if (string.IsNullOrWhiteSpace(broadcastText))
            {
                await botClient.AnswerCallbackQueryAsync(
                    callbackQuery.Id,
                    "‚ùå –¢–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                    cancellationToken: cancellationToken);
                return;
            }

            // –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
            await stateManager.ClearStateAsync(userId, cancellationToken);
            await stateManager.ClearAllDataAsync(userId, cancellationToken);

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É —á–µ—Ä–µ–∑ MediatR
            var broadcastCommand = new Application.Notifications.Commands.SendBroadcast.SendBroadcastCommand
            {
                AdminTelegramId = userId,
                Message = broadcastText,
                NotificationType = NotificationType.Push,
                SendImmediately = true
            };
            
            var result = await _mediator.Send(broadcastCommand, cancellationToken);

            // –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (result.IsSuccess && result.Value != null)
            {
                var broadcastResult = result.Value;
                
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "‚úÖ <b>–†–æ–∑—Å–∏–ª–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n" +
                          $"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n" +
                          $"‚Ä¢ –£—Å–ø—ñ—à–Ω–æ: {broadcastResult.SuccessCount}\n" +
                          $"‚Ä¢ –ü–æ–º–∏–ª–æ–∫: {broadcastResult.FailureCount}\n" +
                          $"‚Ä¢ –ó–∞–≥–∞–ª–æ–º —Å–ø—Ä–æ–±: {broadcastResult.TotalAttempts}\n\n" +
                          $"‚è±Ô∏è –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {(broadcastResult.CompletedAt - broadcastResult.StartedAt).TotalSeconds:F1}—Å\n\n" +
                          $"üìù <b>–¢–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏:</b>\n{broadcastText}",
                    parseMode: ParseMode.Html,
                    replyMarkup: GetBackToAdminPanelKeyboard(),
                    cancellationToken: cancellationToken);

                _logger.LogInformation(
                    "–ê–¥–º—ñ–Ω {AdminId} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ —Ä–æ–∑—Å–∏–ª–∫—É. –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {Success}/{Total} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å",
                    userId, 
                    broadcastResult.SuccessCount,
                    broadcastResult.TotalAttempts
                );
            }
            else
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: $"‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ä–æ–∑—Å–∏–ª–∫–∏</b>\n\n" +
                          $"–î–µ—Ç–∞–ª—ñ: {result.Error}",
                    parseMode: ParseMode.Html,
                    replyMarkup: GetBackToAdminPanelKeyboard(),
                    cancellationToken: cancellationToken);

                _logger.LogWarning(
                    "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Å–∏–ª—Ü—ñ –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ {AdminId}: {Error}",
                    userId,
                    result.Error
                );
            }

            await botClient.AnswerCallbackQueryAsync(callbackQuery.Id, cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏ –∞–¥–º—ñ–Ω–æ–º {UserId}", userId);
            
            using var scope = _scopeFactory.CreateScope();
            var stateManager = scope.ServiceProvider.GetRequiredService<IUserStateManager>();
            await stateManager.ClearStateAsync(userId, cancellationToken);
            await stateManager.ClearAllDataAsync(userId, cancellationToken);
            
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Å–∏–ª—Ü—ñ",
                cancellationToken: cancellationToken);
        }
    }

    /// <summary>
    /// –°–∫–∞—Å–æ–≤—É—î —Ä–æ–∑—Å–∏–ª–∫—É
    /// </summary>
    public async Task HandleBroadcastCancelCallback(ITelegramBotClient botClient, CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        var userId = callbackQuery.From.Id;
        
        try
        {
            using var scope = _scopeFactory.CreateScope();
            var stateManager = scope.ServiceProvider.GetRequiredService<IUserStateManager>();
            
            // –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω —ñ –¥–∞–Ω—ñ
            await stateManager.ClearStateAsync(userId, cancellationToken);
            await stateManager.ClearAllDataAsync(userId, cancellationToken);

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: "‚ùå <b>–†–æ–∑—Å–∏–ª–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞</b>\n\n–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ.",
                parseMode: ParseMode.Html,
                replyMarkup: GetBackToAdminPanelKeyboard(),
                cancellationToken: cancellationToken);

            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "–†–æ–∑—Å–∏–ª–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞",
                cancellationToken: cancellationToken);

            _logger.LogInformation("–ê–¥–º—ñ–Ω {AdminId} —Å–∫–∞—Å—É–≤–∞–≤ —Ä–æ–∑—Å–∏–ª–∫—É", userId);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏ –∞–¥–º—ñ–Ω–æ–º {UserId}", userId);
            
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞",
                cancellationToken: cancellationToken);
        }
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –∞—É–¥–∏—Ç–æ—Ä—ñ—ó –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
    /// </summary>
    public async Task HandleBroadcastAudienceCallback(ITelegramBotClient botClient, CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        // TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤–∏–±—ñ—Ä –∞—É–¥–∏—Ç–æ—Ä—ñ—ó
        await botClient.AnswerCallbackQueryAsync(
            callbackQuery.Id,
            "–§—É–Ω–∫—Ü—ñ—è —É —Ä–æ–∑—Ä–æ–±—Ü—ñ",
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É email –∞–¥—Ä–µ—Å –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
    /// </summary>
    public async Task HandleBroadcastCustomEmailsInputAsync(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
    {
        // TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–∏—Ö email
        await botClient.SendTextMessageAsync(
            chatId: message.Chat.Id,
            text: "–§—É–Ω–∫—Ü—ñ—è —É —Ä–æ–∑—Ä–æ–±—Ü—ñ",
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É)
    /// </summary>
    public override async Task HandleTextMessageAsync(ITelegramBotClient botClient, Message message, UserConversationState state, CancellationToken cancellationToken)
    {
        switch (state)
        {
            case UserConversationState.WaitingBroadcastMessage:
                await HandleBroadcastMessageInputAsync(botClient, message, cancellationToken);
                break;
        }
    }

    #region Private Methods

    /// <summary>
    /// –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏
    /// </summary>
    private static InlineKeyboardMarkup GetCancelBroadcastKeyboard()
    {
        return new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", "admin_cancel_broadcast")
            }
        });
    }

    /// <summary>
    /// –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏
    /// </summary>
    private static InlineKeyboardMarkup GetConfirmBroadcastKeyboard()
    {
        return new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏", "admin_confirm_broadcast"),
                InlineKeyboardButton.WithCallbackData("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", "admin_cancel_broadcast")
            }
        });
    }

    /// <summary>
    /// –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ
    /// </summary>
    private static InlineKeyboardMarkup GetBackToAdminPanelKeyboard()
    {
        return new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üîô –î–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ", "admin_panel")
            }
        });
    }

    #endregion
}