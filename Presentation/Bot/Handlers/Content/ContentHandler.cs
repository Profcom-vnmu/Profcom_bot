using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using MediatR;
using StudentUnionBot.Application.Common.Interfaces;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using StudentUnionBot.Application.News.Queries.GetPublishedNews;
using StudentUnionBot.Application.Events.Queries.GetUpcomingEvents;
using StudentUnionBot.Application.Events.Queries.GetEventById;
using StudentUnionBot.Application.Events.Commands.RegisterForEvent;
using StudentUnionBot.Application.Events.Commands.UnregisterFromEvent;
using StudentUnionBot.Application.Partners.Queries.GetActivePartners;
using StudentUnionBot.Application.Contacts.Queries.GetAllContacts;
using StudentUnionBot.Domain.Enums;
using StudentUnionBot.Presentation.Bot.Handlers.Common;
using StudentUnionBot.Presentation.Bot.Handlers.Interfaces;

namespace StudentUnionBot.Presentation.Bot.Handlers.Content;

public class ContentHandler : BaseHandler, IContentHandler
{
    public ContentHandler(IServiceScopeFactory scopeFactory, ILogger<ContentHandler> logger, IMediator mediator)
        : base(scopeFactory, logger, mediator)
    {
    }

    /// <summary>
    /// –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (ContentHandler –Ω–µ –æ–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
    /// </summary>
    public override async Task HandleTextMessageAsync(ITelegramBotClient botClient, Message message, UserConversationState state, CancellationToken cancellationToken)
    {
        // ContentHandler –Ω–µ –æ–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await Task.CompletedTask;
    }

    /// <summary>
    /// –û–±—Ä–æ–±–∫–∞ callback'—É –¥–ª—è —Å–ø–∏—Å–∫—É –Ω–æ–≤–∏–Ω
    /// </summary>
    public async Task HandleNewsListCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–∏–Ω–∏ —á–µ—Ä–µ–∑ MediatR
            var query = new GetPublishedNewsQuery
            {
                PageNumber = 1,
                PageSize = 5
            };

            var result = await _mediator.Send(query, cancellationToken);

            if (!result.IsSuccess || result.Value == null)
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "üì∞ <b>–ù–æ–≤–∏–Ω–∏</b>\n\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–æ–≤–∏–Ω–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                    parseMode: ParseMode.Html,
                    replyMarkup: GetBackToMainMenu(),
                    cancellationToken: cancellationToken);
                return;
            }

            var newsList = result.Value;
            if (newsList.Items.Count == 0)
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "üì∞ <b>–ù–æ–≤–∏–Ω–∏</b>\n\nüìù –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö –Ω–æ–≤–∏–Ω.",
                    parseMode: ParseMode.Html,
                    replyMarkup: GetBackToMainMenu(),
                    cancellationToken: cancellationToken);
                return;
            }

            // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –Ω–æ–≤–∏–Ω–∞–º–∏
            var newsText = "üì∞ <b>–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏</b>\n\n";
            
            foreach (var news in newsList.Items.Take(5))
            {
                var pinnedMark = news.IsPinned ? "üìå " : "";
                newsText += $"{pinnedMark}{news.CategoryEmoji} <b>{news.Title}</b>\n";
                
                if (!string.IsNullOrEmpty(news.Summary))
                {
                    newsText += $"<i>{news.Summary}</i>\n";
                }
                else
                {
                    var preview = news.Content.Length > 100 
                        ? news.Content.Substring(0, 100) + "..." 
                        : news.Content;
                    newsText += $"{preview}\n";
                }
                
                newsText += $"üìÖ {news.CreatedAt:dd.MM.yyyy HH:mm}\n\n";
            }

            if (newsList.TotalCount > 5)
            {
                newsText += $"<i>–ü–æ–∫–∞–∑–∞–Ω–æ {newsList.Items.Count} –∑ {newsList.TotalCount} –Ω–æ–≤–∏–Ω</i>";
            }

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: newsText,
                parseMode: ParseMode.Html,
                replyMarkup: GetBackToMainMenu(),
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", callbackQuery.From.Id);
            
            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: "üì∞ <b>–ù–æ–≤–∏–Ω–∏</b>\n\n‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –Ω–æ–≤–∏–Ω.",
                parseMode: ParseMode.Html,
                replyMarkup: GetBackToMainMenu(),
                cancellationToken: cancellationToken);
        }
    }

    /// <summary>
    /// –û–±—Ä–æ–±–∫–∞ callback'—É –¥–ª—è —Å–ø–∏—Å–∫—É –ø–æ–¥—ñ–π
    /// </summary>
    public async Task HandleEventsListCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            // –û—Ç—Ä–∏–º—É—î–º–æ –º–∞–π–±—É—Ç–Ω—ñ –ø–æ–¥—ñ—ó —á–µ—Ä–µ–∑ MediatR
            var query = new GetUpcomingEventsQuery
            {
                PageNumber = 1,
                PageSize = 5
            };

            var result = await _mediator.Send(query, cancellationToken);

            if (!result.IsSuccess || result.Value == null)
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "üé´ <b>–ó–∞—Ö–æ–¥–∏</b>\n\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞—Ö–æ–¥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                    parseMode: ParseMode.Html,
                    replyMarkup: GetBackToMainMenu(),
                    cancellationToken: cancellationToken);
                return;
            }

            var eventsList = result.Value;
            if (eventsList.Items.Count == 0)
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "üé´ <b>–ó–∞—Ö–æ–¥–∏</b>\n\nüìù –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ–¥—ñ–π.\n\n" +
                          "<i>–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏!</i>",
                    parseMode: ParseMode.Html,
                    replyMarkup: GetBackToMainMenu(),
                    cancellationToken: cancellationToken);
                return;
            }

            // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –ø–æ–¥—ñ—è–º–∏
            var eventsText = "üé´ <b>–ú–∞–π–±—É—Ç–Ω—ñ –∑–∞—Ö–æ–¥–∏</b>\n\n";
            
            foreach (var ev in eventsList.Items.Take(5))
            {
                var featuredMark = ev.IsFeatured ? "‚≠ê " : "";
                eventsText += $"{featuredMark}{ev.TypeEmoji} <b>{ev.Title}</b>\n";
                
                eventsText += $"üìÖ {ev.StartDate:dd.MM.yyyy HH:mm}";
                if (ev.EndDate.HasValue)
                {
                    eventsText += $" - {ev.EndDate.Value:HH:mm}";
                }
                eventsText += "\n";
                
                if (!string.IsNullOrEmpty(ev.Location))
                {
                    eventsText += $"üìç {ev.Location}\n";
                }
                
                if (ev.RequiresRegistration)
                {
                    var spotsLeft = ev.MaxParticipants.HasValue 
                        ? $"{ev.MaxParticipants.Value - ev.CurrentParticipants}" 
                        : "‚àû";
                    eventsText += $"üë• –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {ev.CurrentParticipants}/{(ev.MaxParticipants?.ToString() ?? "‚àû")} (–≤—ñ–ª—å–Ω–æ: {spotsLeft})\n";
                    
                    if (ev.RegistrationDeadline.HasValue)
                    {
                        eventsText += $"‚è∞ –î–µ–¥–ª–∞–π–Ω: {ev.RegistrationDeadline.Value:dd.MM.yyyy HH:mm}\n";
                    }
                }
                
                eventsText += "\n";
            }

            if (eventsList.TotalCount > 5)
            {
                eventsText += $"<i>–ü–æ–∫–∞–∑–∞–Ω–æ {eventsList.Items.Count} –∑ {eventsList.TotalCount} –ø–æ–¥—ñ–π</i>";
            }

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: eventsText,
                parseMode: ParseMode.Html,
                replyMarkup: GetBackToMainMenu(),
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–¥—ñ–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", callbackQuery.From.Id);
            
            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: "üé´ <b>–ó–∞—Ö–æ–¥–∏</b>\n\n‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø–æ–¥—ñ–π.",
                parseMode: ParseMode.Html,
                replyMarkup: GetBackToMainMenu(),
                cancellationToken: cancellationToken);
        }
    }

    /// <summary>
    /// –û–±—Ä–æ–±–∫–∞ callback'—É –¥–ª—è —Å–ø–∏—Å–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
    /// </summary>
    public async Task HandlePartnersListCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            // –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ —á–µ—Ä–µ–∑ MediatR
            var query = new GetActivePartnersQuery();
            var result = await _mediator.Send(query, cancellationToken);

            if (!result.IsSuccess || result.Value == null)
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "ü§ù <b>–ü–∞—Ä—Ç–Ω–µ—Ä–∏</b>\n\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                    parseMode: ParseMode.Html,
                    replyMarkup: GetBackToMainMenu(),
                    cancellationToken: cancellationToken);
                return;
            }

            var partnersList = result.Value;
            if (partnersList.Items.Count == 0)
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "ü§ù <b>–ü–∞—Ä—Ç–Ω–µ—Ä–∏</b>\n\nüìù –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤.\n\n" +
                          "<i>–ú–∏ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ –Ω–æ–≤–∏–º–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞–º–∏!</i>",
                    parseMode: ParseMode.Html,
                    replyMarkup: GetBackToMainMenu(),
                    cancellationToken: cancellationToken);
                return;
            }

            // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏
            var partnersText = "ü§ù <b>–ù–∞—à—ñ –ø–∞—Ä—Ç–Ω–µ—Ä–∏</b>\n\n";
            partnersText += "<i>–ü—Ä–æ–ø–æ–Ω—É—î–º–æ –∑–Ω–∏–∂–∫–∏ —Ç–∞ –ø—Ä–∏–≤—ñ–ª–µ—ó –¥–ª—è —á–ª–µ–Ω—ñ–≤ –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–∏:</i>\n\n";
            
            foreach (var partner in partnersList.Items)
            {
                var featuredMark = partner.IsFeatured ? "‚≠ê " : "";
                partnersText += $"{featuredMark}{partner.TypeEmoji} <b>{partner.Name}</b>\n";
                
                if (!string.IsNullOrEmpty(partner.Description))
                {
                    partnersText += $"{partner.Description}\n";
                }
                
                if (!string.IsNullOrEmpty(partner.DiscountInfo))
                {
                    partnersText += $"üéØ <b>–ó–Ω–∏–∂–∫–∞:</b> {partner.DiscountInfo}\n";
                }
                
                if (!string.IsNullOrEmpty(partner.Address))
                {
                    partnersText += $"üìç {partner.Address}\n";
                }
                
                if (!string.IsNullOrEmpty(partner.PhoneNumber))
                {
                    partnersText += $"üìû {partner.PhoneNumber}\n";
                }
                
                partnersText += "\n";
            }

            partnersText += $"<i>–í—Å—å–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤: {partnersList.TotalCount}</i>";

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: partnersText,
                parseMode: ParseMode.Html,
                replyMarkup: GetBackToMainMenu(),
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", callbackQuery.From.Id);
            
            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: "ü§ù <b>–ü–∞—Ä—Ç–Ω–µ—Ä–∏</b>\n\n‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤.",
                parseMode: ParseMode.Html,
                replyMarkup: GetBackToMainMenu(),
                cancellationToken: cancellationToken);
        }
    }

    /// <summary>
    /// –û–±—Ä–æ–±–∫–∞ callback'—É –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
    /// </summary>
    public async Task HandleContactsListCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç–∏ —á–µ—Ä–µ–∑ MediatR
            var query = new GetAllContactsQuery();
            var result = await _mediator.Send(query, cancellationToken);

            if (!result.IsSuccess || result.Value == null)
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–∏</b>\n\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                    parseMode: ParseMode.Html,
                    replyMarkup: GetBackToMainMenu(),
                    cancellationToken: cancellationToken);
                return;
            }

            var contactsList = result.Value;
            if (contactsList.Items.Count == 0)
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message!.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</b>\n\n" +
                          "üè¢ <b>–°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∏–π –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–æ–≤–∏–π –∫–æ–º—ñ—Ç–µ—Ç</b>\n\n" +
                          "üìß Email: profkom@vnmu.edu.ua\n" +
                          "üì± Telegram: @vnmu_profkom\n" +
                          "üìç –ê–¥—Ä–µ—Å–∞: –≤—É–ª. –ü–∏—Ä–æ–≥–æ–≤–∞, 56, –í—ñ–Ω–Ω–∏—Ü—è\n" +
                          "üïí –ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏: –ü–ù-–ü–¢ 9:00-17:00",
                    parseMode: ParseMode.Html,
                    replyMarkup: GetBackToMainMenu(),
                    cancellationToken: cancellationToken);
                return;
            }

            // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
            var contactsText = "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</b>\n\n";
            
            foreach (var contact in contactsList.Items)
            {
                contactsText += $"üè¢ <b>{contact.Title}</b>\n";
                
                if (!string.IsNullOrEmpty(contact.Description))
                {
                    contactsText += $"<i>{contact.Description}</i>\n";
                }
                
                if (!string.IsNullOrEmpty(contact.PhoneNumber))
                {
                    contactsText += $"üìû {contact.PhoneNumber}\n";
                }
                
                if (!string.IsNullOrEmpty(contact.Email))
                {
                    contactsText += $"üìß {contact.Email}\n";
                }
                
                if (!string.IsNullOrEmpty(contact.TelegramUsername))
                {
                    contactsText += $"üì± @{contact.TelegramUsername}\n";
                }
                
                if (!string.IsNullOrEmpty(contact.Address))
                {
                    contactsText += $"üìç {contact.Address}\n";
                }
                
                if (!string.IsNullOrEmpty(contact.WorkingHours))
                {
                    contactsText += $"üïí {contact.WorkingHours}\n";
                }
                
                contactsText += "\n";
            }

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: contactsText.TrimEnd(),
                parseMode: ParseMode.Html,
                replyMarkup: GetBackToMainMenu(),
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", callbackQuery.From.Id);
            
            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–∏</b>\n\n‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤.",
                parseMode: ParseMode.Html,
                replyMarkup: GetBackToMainMenu(),
                cancellationToken: cancellationToken);
        }
    }

    /// <summary>
    /// –û–±—Ä–æ–±–∫–∞ callback'—É –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥—ñ—ó
    /// </summary>
    public async Task HandleEventDetailsCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        var eventIdStr = callbackQuery.Data!.Replace("event_details_", "");
        if (!int.TryParse(eventIdStr, out var eventId))
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID –ø–æ–¥—ñ—ó",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        try
        {
            var query = new GetEventByIdQuery(eventId, callbackQuery.From.Id);
            var result = await _mediator.Send(query, cancellationToken);

            if (!result.IsSuccess || result.Value == null)
            {
                await botClient.AnswerCallbackQueryAsync(
                    callbackQuery.Id,
                    "‚ùå –ü–æ–¥—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                    showAlert: true,
                    cancellationToken: cancellationToken);
                return;
            }

            var ev = result.Value;
            
            var text = $"{ev.TypeEmoji} <b>{ev.Title}</b>\n\n";
            text += $"<b>–û–ø–∏—Å:</b>\n{ev.Description}\n\n";
            text += $"üìÖ <b>–ü–æ—á–∞—Ç–æ–∫:</b> {ev.StartDate:dd.MM.yyyy HH:mm}\n";
            
            if (ev.EndDate.HasValue)
            {
                text += $"üèÅ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è:</b> {ev.EndDate.Value:dd.MM.yyyy HH:mm}\n";
            }
            
            if (!string.IsNullOrEmpty(ev.Location))
            {
                text += $"üìç <b>–ú—ñ—Å—Ü–µ:</b> {ev.Location}\n";
            }
            
            text += $"\nüìã <b>–¢–∏–ø:</b> {ev.TypeDisplayName}\n";
            text += $"üè∑Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> {ev.Status.GetDisplayName()}\n";
            
            if (ev.RequiresRegistration)
            {
                text += $"\nüë• <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è:</b>\n";
                text += $"‚Ä¢ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: {ev.CurrentParticipants}";
                
                if (ev.MaxParticipants.HasValue)
                {
                    var spotsLeft = ev.MaxParticipants.Value - ev.CurrentParticipants;
                    text += $" / {ev.MaxParticipants.Value}\n";
                    text += $"‚Ä¢ –í—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å: {spotsLeft}\n";
                }
                else
                {
                    text += " (–±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å)\n";
                }
                
                if (ev.RegistrationDeadline.HasValue)
                {
                    text += $"‚è∞ <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –¥–æ:</b> {ev.RegistrationDeadline.Value:dd.MM.yyyy HH:mm}\n";
                }
                
                if (ev.IsUserRegistered)
                {
                    text += "\n‚úÖ <b>–í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω–∞ —Ü—é –ø–æ–¥—ñ—é</b>";
                }
            }

            var buttons = new List<InlineKeyboardButton[]>();
            
            if (ev.RequiresRegistration)
            {
                if (ev.IsUserRegistered)
                {
                    buttons.Add(new[]
                    {
                        InlineKeyboardButton.WithCallbackData("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é", $"event_unregister_{eventId}")
                    });
                }
                else if (ev.CanRegister)
                {
                    buttons.Add(new[]
                    {
                        InlineKeyboardButton.WithCallbackData("‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è", $"event_register_{eventId}")
                    });
                }
                else
                {
                    text += "\n\n‚ö†Ô∏è <i>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ–º–∞—î –º—ñ—Å—Ü—å –∞–±–æ –º–∏–Ω—É–≤ –¥–µ–¥–ª–∞–π–Ω)</i>";
                }
            }
            
            buttons.Add(new[]
            {
                InlineKeyboardButton.WithCallbackData("üîô –î–æ —Å–ø–∏—Å–∫—É –ø–æ–¥—ñ–π", "events_list")
            });

            var keyboard = new InlineKeyboardMarkup(buttons);

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: text,
                parseMode: ParseMode.Html,
                replyMarkup: keyboard,
                cancellationToken: cancellationToken);

            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥—ñ—ó {EventId}", eventId);
            
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
        }
    }

    /// <summary>
    /// –û–±—Ä–æ–±–∫–∞ callback'—É –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ –ø–æ–¥—ñ—é
    /// </summary>
    public async Task HandleEventRegisterCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        var eventIdStr = callbackQuery.Data!.Replace("event_register_", "");
        if (!int.TryParse(eventIdStr, out var eventId))
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID –ø–æ–¥—ñ—ó",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        try
        {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ rate limiting –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ –ø–æ–¥—ñ—ó
            using var scope = _scopeFactory.CreateScope();
            var rateLimiter = scope.ServiceProvider.GetRequiredService<IRateLimiter>();
            var userId = callbackQuery.From.Id;

            if (!await rateLimiter.AllowAsync(userId, "RegisterEvent", cancellationToken))
            {
                var remainingTime = await rateLimiter.GetTimeUntilResetAsync(userId, "RegisterEvent", cancellationToken);
                var waitMessage = remainingTime.HasValue 
                    ? $"‚è≥ –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π! –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {remainingTime.Value.TotalMinutes:F0} —Ö–≤–∏–ª–∏–Ω."
                    : "‚è≥ –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π! –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.";
                    
                await botClient.AnswerCallbackQueryAsync(
                    callbackQuery.Id,
                    waitMessage,
                    showAlert: true,
                    cancellationToken: cancellationToken);
                return;
            }

            var command = new RegisterForEventCommand(callbackQuery.From.Id, eventId);
            var result = await _mediator.Send(command, cancellationToken);

            if (result.IsSuccess)
            {
                await botClient.AnswerCallbackQueryAsync(
                    callbackQuery.Id,
                    "‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è –Ω–∞ –ø–æ–¥—ñ—é!",
                    showAlert: true,
                    cancellationToken: cancellationToken);
                
                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø–æ–¥—ñ—ó
                await HandleEventDetailsCallback(botClient, new CallbackQuery 
                { 
                    Id = callbackQuery.Id,
                    From = callbackQuery.From,
                    Message = callbackQuery.Message,
                    Data = $"event_details_{eventId}"
                }, cancellationToken);
            }
            else
            {
                await botClient.AnswerCallbackQueryAsync(
                    callbackQuery.Id,
                    $"‚ùå {result.Error}",
                    showAlert: true,
                    cancellationToken: cancellationToken);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ –ø–æ–¥—ñ—é {EventId}", eventId);
            
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó",
                showAlert: true,
                cancellationToken: cancellationToken);
        }
    }

    /// <summary>
    /// –û–±—Ä–æ–±–∫–∞ callback'—É –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ –ø–æ–¥—ñ—é
    /// </summary>
    public async Task HandleEventUnregisterCallback(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        var eventIdStr = callbackQuery.Data!.Replace("event_unregister_", "");
        if (!int.TryParse(eventIdStr, out var eventId))
        {
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID –ø–æ–¥—ñ—ó",
                showAlert: true,
                cancellationToken: cancellationToken);
            return;
        }

        try
        {
            var command = new UnregisterFromEventCommand(callbackQuery.From.Id, eventId);
            var result = await _mediator.Send(command, cancellationToken);

            if (result.IsSuccess)
            {
                await botClient.AnswerCallbackQueryAsync(
                    callbackQuery.Id,
                    "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
                    showAlert: true,
                    cancellationToken: cancellationToken);
                
                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø–æ–¥—ñ—ó
                await HandleEventDetailsCallback(botClient, new CallbackQuery 
                { 
                    Id = callbackQuery.Id,
                    From = callbackQuery.From,
                    Message = callbackQuery.Message,
                    Data = $"event_details_{eventId}"
                }, cancellationToken);
            }
            else
            {
                await botClient.AnswerCallbackQueryAsync(
                    callbackQuery.Id,
                    $"‚ùå {result.Error}",
                    showAlert: true,
                    cancellationToken: cancellationToken);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ –ø–æ–¥—ñ—é {EventId}", eventId);
            
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ",
                showAlert: true,
                cancellationToken: cancellationToken);
        }
    }
}