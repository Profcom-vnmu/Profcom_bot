using MediatR;
using Microsoft.Extensions.Logging;
using StudentUnionBot.Application.Tutorial.Commands.UpdateTutorialProgress;
using StudentUnionBot.Application.Users.Queries.GetUserByTelegramId;
using StudentUnionBot.Domain.Enums;
using StudentUnionBot.Domain.Interfaces;
using StudentUnionBot.Presentation.Bot.Keyboards;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace StudentUnionBot.Presentation.Bot.Handlers.Tutorial;

/// <summary>
/// –û–±—Ä–æ–±–Ω–∏–∫ callback'—ñ–≤ —Ç—É—Ç–æ—Ä—ñ–∞–ª—É
/// </summary>
public class TutorialHandler
{
    private readonly IMediator _mediator;
    private readonly ILogger<TutorialHandler> _logger;
    private readonly ILocalizationService _localizationService;

    public TutorialHandler(
        IMediator mediator,
        ILogger<TutorialHandler> logger,
        ILocalizationService localizationService)
    {
        _mediator = mediator;
        _logger = logger;
        _localizationService = localizationService;
    }

    /// <summary>
    /// –û–±—Ä–æ–±–∫–∞ –ø–æ—á–∞—Ç–∫—É —Ç—É—Ç–æ—Ä—ñ–∞–ª—É
    /// </summary>
    public async Task HandleTutorialStartAsync(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            var userId = callbackQuery.From.Id;
            
            // –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            var getUserQuery = new GetUserByTelegramIdQuery { TelegramId = userId };
            var userResult = await _mediator.Send(getUserQuery, cancellationToken);
            var userLanguage = Language.Ukrainian;
            
            if (userResult.IsSuccess && userResult.Value != null)
            {
                Enum.TryParse<Language>(userResult.Value.Language, out userLanguage);
            }
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
            var command = new UpdateTutorialProgressCommand
            {
                TelegramId = userId,
                Step = TutorialStep.Welcome
            };
            
            var result = await _mediator.Send(command, cancellationToken);
            
            if (!result.IsSuccess)
            {
                await botClient.AnswerCallbackQueryAsync(
                    callbackQuery.Id,
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Ç—É—Ç–æ—Ä—ñ–∞–ª—É",
                    showAlert: true,
                    cancellationToken: cancellationToken);
                return;
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏–π –∫—Ä–æ–∫
            var tutorialText = GetTutorialStepText(TutorialStep.Welcome);
            var keyboard = await KeyboardFactory.GetTutorialKeyboardAsync(
                _localizationService,
                userLanguage,
                1, // currentStep
                5, // totalSteps (Welcome, Appeals, Events, News, Profile)
                cancellationToken);
            
            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: tutorialText,
                parseMode: ParseMode.Html,
                replyMarkup: keyboard,
                cancellationToken: cancellationToken);

            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –≤ HandleTutorialStartAsync");
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
        }
    }

    /// <summary>
    /// –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
    /// </summary>
    public async Task HandleTutorialStepAsync(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            var userId = callbackQuery.From.Id;
            var data = callbackQuery.Data!;
            
            // –í–∏—Ç—è–≥—É—î–º–æ –Ω–æ–º–µ—Ä –∫—Ä–æ–∫—É –∑ callback_data (tutorial_step_2)
            if (!int.TryParse(data.Replace("tutorial_step_", ""), out int stepNumber))
            {
                _logger.LogWarning("–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback_data: {Data}", data);
                return;
            }

            var step = (TutorialStep)stepNumber;
            
            // –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            var getUserQuery = new GetUserByTelegramIdQuery { TelegramId = userId };
            var userResult = await _mediator.Send(getUserQuery, cancellationToken);
            var userLanguage = Language.Ukrainian;
            
            if (userResult.IsSuccess && userResult.Value != null)
            {
                Enum.TryParse<Language>(userResult.Value.Language, out userLanguage);
            }
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
            var command = new UpdateTutorialProgressCommand
            {
                TelegramId = userId,
                Step = step
            };
            
            var result = await _mediator.Send(command, cancellationToken);
            
            if (!result.IsSuccess)
            {
                await botClient.AnswerCallbackQueryAsync(
                    callbackQuery.Id,
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ–≥—Ä–µ—Å—É",
                    showAlert: true,
                    cancellationToken: cancellationToken);
                return;
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∫—Ä–æ–∫
            var tutorialText = GetTutorialStepText(step);
            var keyboard = await KeyboardFactory.GetTutorialKeyboardAsync(
                _localizationService,
                userLanguage,
                stepNumber, // currentStep
                5, // totalSteps (Welcome, Appeals, Events, News, Profile)
                cancellationToken);
            
            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: tutorialText,
                parseMode: ParseMode.Html,
                replyMarkup: keyboard,
                cancellationToken: cancellationToken);

            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –≤ HandleTutorialStepAsync");
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
        }
    }

    /// <summary>
    /// –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—É—Ç–æ—Ä—ñ–∞–ª—É
    /// </summary>
    public async Task HandleTutorialCompleteAsync(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            var userId = callbackQuery.From.Id;
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
            var command = new UpdateTutorialProgressCommand
            {
                TelegramId = userId,
                Step = TutorialStep.Completed
            };
            
            var result = await _mediator.Send(command, cancellationToken);
            
            if (!result.IsSuccess)
            {
                await botClient.AnswerCallbackQueryAsync(
                    callbackQuery.Id,
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ç—É—Ç–æ—Ä—ñ–∞–ª—É",
                    showAlert: true,
                    cancellationToken: cancellationToken);
                return;
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            var completionText = "üéâ <b>–í—ñ—Ç–∞—î–º–æ! –¢—É—Ç–æ—Ä—ñ–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n" +
                               "–¢–µ–ø–µ—Ä –≤–∏ –∑–Ω–∞—î—Ç–µ —è–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å —É—Å—ñ–º–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞.\n\n" +
                               "–ü—Ä–∏—î–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è! üòä";
            
            var mainMenuKeyboard = new Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithCallbackData("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "back_to_main")
                }
            });
            
            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: completionText,
                parseMode: ParseMode.Html,
                replyMarkup: mainMenuKeyboard,
                cancellationToken: cancellationToken);

            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚úÖ –¢—É—Ç–æ—Ä—ñ–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –≤ HandleTutorialCompleteAsync");
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
        }
    }

    /// <summary>
    /// –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫—É —Ç—É—Ç–æ—Ä—ñ–∞–ª—É
    /// </summary>
    public async Task HandleTutorialSkipAsync(
        ITelegramBotClient botClient,
        CallbackQuery callbackQuery,
        CancellationToken cancellationToken)
    {
        try
        {
            var userId = callbackQuery.From.Id;
            
            // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —Ç—É—Ç–æ—Ä—ñ–∞–ª —è–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π
            var command = new UpdateTutorialProgressCommand
            {
                TelegramId = userId,
                Step = TutorialStep.Completed
            };
            
            var result = await _mediator.Send(command, cancellationToken);
            
            if (!result.IsSuccess)
            {
                await botClient.AnswerCallbackQueryAsync(
                    callbackQuery.Id,
                    "‚ùå –ü–æ–º–∏–ª–∫–∞",
                    showAlert: true,
                    cancellationToken: cancellationToken);
                return;
            }

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
            var skipText = "‚è≠Ô∏è <b>–¢—É—Ç–æ—Ä—ñ–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω–æ</b>\n\n" +
                          "–í–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ç—É—Ç–æ—Ä—ñ–∞–ª –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.";
            
            var mainMenuKeyboard = new Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithCallbackData("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "back_to_main")
                }
            });
            
            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message!.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: skipText,
                parseMode: ParseMode.Html,
                replyMarkup: mainMenuKeyboard,
                cancellationToken: cancellationToken);

            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –≤ HandleTutorialSkipAsync");
            await botClient.AnswerCallbackQueryAsync(
                callbackQuery.Id,
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞",
                showAlert: true,
                cancellationToken: cancellationToken);
        }
    }

    /// <summary>
    /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫—Ä–æ–∫—É —Ç—É—Ç–æ—Ä—ñ–∞–ª—É
    /// </summary>
    private string GetTutorialStepText(TutorialStep step)
    {
        return step switch
        {
            TutorialStep.Welcome => 
                "üëã <b>–í—ñ—Ç–∞—î–º–æ –≤ StudentUnionBot!</b>\n\n" +
                "–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º:\n" +
                "üì© –ü–æ–¥–∞–≤–∞—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø—Ä–æ—Ñ–∫–æ–º—É\n" +
                "üì∞ –î—ñ–∑–Ω–∞–≤–∞—Ç–∏—Å—å –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è\n" +
                "üéâ –†–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å –Ω–∞ –ø–æ–¥—ñ—ó\n" +
                "üë§ –ö–µ—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—ó–º –ø—Ä–æ—Ñ—ñ–ª–µ–º\n\n" +
                "–î–∞–≤–∞–π—Ç–µ —à–≤–∏–¥–∫–æ –æ–∑–Ω–∞–π–æ–º–∏–º–æ—Å—å –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏!",
            
            TutorialStep.Appeals => 
                "üì© <b>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω—å</b>\n\n" +
                "–í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø—Ä–æ—Ñ–∫–æ–º—É –∑ –±—É–¥—å-—è–∫–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è:\n" +
                "‚Ä¢ –ê–∫–∞–¥–µ–º—ñ—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è\n" +
                "‚Ä¢ –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è\n" +
                "‚Ä¢ –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è\n\n" +
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å <b>\"–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è\"</b> –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é, " +
                "–æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–∞ –æ–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.\n\n" +
                "–í–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–≤–µ—Ä–Ω–µ–Ω—å –≤ —Ä–æ–∑–¥—ñ–ª—ñ <b>\"–ú–æ—ó –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è\"</b>.",
            
            TutorialStep.Events => 
                "üéâ <b>–ü–æ–¥—ñ—ó —Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</b>\n\n" +
                "–í —Ä–æ–∑–¥—ñ–ª—ñ <b>\"–ü–æ–¥—ñ—ó\"</b> –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ:\n" +
                "‚Ä¢ –ú–∞–π–±—É—Ç–Ω—ñ –∑–∞—Ö–æ–¥–∏\n" +
                "‚Ä¢ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Å —Ç–∞ –º—ñ—Å—Ü–µ\n" +
                "‚Ä¢ –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å\n\n" +
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ–¥—ñ—é —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∞–±–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å –Ω–∞ —É—á–∞—Å—Ç—å.",
            
            TutorialStep.News => 
                "üì∞ <b>–ù–æ–≤–∏–Ω–∏ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è</b>\n\n" +
                "–ó–∞–ª–∏—à–∞–π—Ç–µ—Å—å –≤ –∫—É—Ä—Å—ñ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –Ω–æ–≤–∏–Ω:\n" +
                "‚Ä¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥ –ø—Ä–æ—Ñ–∫–æ–º—É\n" +
                "‚Ä¢ –í–∞–∂–ª–∏–≤—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è\n" +
                "‚Ä¢ –ö–æ—Ä–∏—Å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è\n\n" +
                "–í—Å—ñ –Ω–æ–≤–∏–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –≤ —Ä–æ–∑–¥—ñ–ª—ñ <b>\"–ù–æ–≤–∏–Ω–∏\"</b>.",
            
            TutorialStep.Profile => 
                "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å</b>\n\n" +
                "–í —Ä–æ–∑–¥—ñ–ª—ñ <b>\"–ü—Ä–æ—Ñ—ñ–ª—å\"</b> –≤–∏ –º–æ–∂–µ—Ç–µ:\n" +
                "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∞—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é\n" +
                "‚Ä¢ –í–∫–∞–∑–∞—Ç–∏ email –¥–ª—è –∑–≤'—è–∑–∫—É\n" +
                "‚Ä¢ –î–æ–¥–∞—Ç–∏ –≥—Ä—É–ø—É —Ç–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç\n" +
                "‚Ä¢ –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É\n\n" +
                "–ó–∞–ø–æ–≤–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º —à–≤–∏–¥—à–µ –æ–±—Ä–æ–±–ª—è—Ç–∏ –≤–∞—à—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!",
            
            _ => "‚ùì –ù–µ–≤—ñ–¥–æ–º–∏–π –∫—Ä–æ–∫ —Ç—É—Ç–æ—Ä—ñ–∞–ª—É"
        };
    }
}
