using Telegram.Bot.Types.ReplyMarkups;
using StudentUnionBot.Domain.Enums;

namespace StudentUnionBot.Presentation.Bot.Helpers;

/// <summary>
/// –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –∫–ª–∞—Å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ —É —Å–ø–∏—Å–∫–∞—Ö
/// </summary>
public static class FilterHelper
{
    /// <summary>
    /// –°—Ç–≤–æ—Ä—é—î inline keyboard –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –Ω–æ–≤–∏–Ω
    /// </summary>
    /// <param name="selectedCategory">–û–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è (—è–∫—â–æ —î)</param>
    /// <param name="backCallbackData">Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"</param>
    /// <returns>InlineKeyboardMarkup –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏</returns>
    public static InlineKeyboardMarkup CreateNewsCategoryFilterKeyboard(
        NewsCategory? selectedCategory = null,
        string backCallbackData = "main_menu")
    {
        var buttons = new List<List<InlineKeyboardButton>>();

        // –í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        var categories = Enum.GetValues<NewsCategory>()
            .Where(c => c != NewsCategory.Event) // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ Event (–¥—É–±–ª—ñ–∫–∞—Ç Events)
            .ToList();

        // –ö–Ω–æ–ø–∫–∞ "–í—Å—ñ –Ω–æ–≤–∏–Ω–∏"
        var allNewsText = selectedCategory == null 
            ? "‚úÖ –í—Å—ñ –Ω–æ–≤–∏–Ω–∏" 
            : "üì∞ –í—Å—ñ –Ω–æ–≤–∏–Ω–∏";
        buttons.Add(new List<InlineKeyboardButton>
        {
            InlineKeyboardButton.WithCallbackData(allNewsText, "news_filter_clear")
        });

        // –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π (–ø–æ 2 –≤ —Ä—è–¥)
        for (int i = 0; i < categories.Count; i += 2)
        {
            var row = new List<InlineKeyboardButton>();
            
            var category1 = categories[i];
            var isSelected1 = selectedCategory == category1;
            var text1 = $"{(isSelected1 ? "‚úÖ" : category1.GetEmoji())} {category1.GetDisplayName()}";
            row.Add(InlineKeyboardButton.WithCallbackData(text1, $"news_filter_category_{(int)category1}"));

            if (i + 1 < categories.Count)
            {
                var category2 = categories[i + 1];
                var isSelected2 = selectedCategory == category2;
                var text2 = $"{(isSelected2 ? "‚úÖ" : category2.GetEmoji())} {category2.GetDisplayName()}";
                row.Add(InlineKeyboardButton.WithCallbackData(text2, $"news_filter_category_{(int)category2}"));
            }

            buttons.Add(row);
        }

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        buttons.Add(new List<InlineKeyboardButton>
        {
            InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", backCallbackData)
        });

        return new InlineKeyboardMarkup(buttons);
    }

    /// <summary>
    /// –°—Ç–≤–æ—Ä—é—î inline keyboard –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ —Ç–∏–ø—ñ–≤ –ø–æ–¥—ñ–π
    /// </summary>
    /// <param name="selectedType">–û–±—Ä–∞–Ω–∏–π —Ç–∏–ø (—è–∫—â–æ —î)</param>
    /// <param name="backCallbackData">Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"</param>
    /// <returns>InlineKeyboardMarkup –∑ —Ç–∏–ø–∞–º–∏ –ø–æ–¥—ñ–π</returns>
    public static InlineKeyboardMarkup CreateEventTypeFilterKeyboard(
        EventType? selectedType = null,
        string backCallbackData = "main_menu")
    {
        var buttons = new List<List<InlineKeyboardButton>>();

        // –í—Å—ñ —Ç–∏–ø–∏ –ø–æ–¥—ñ–π
        var eventTypes = Enum.GetValues<EventType>().ToList();

        // –ö–Ω–æ–ø–∫–∞ "–í—Å—ñ –ø–æ–¥—ñ—ó"
        var allEventsText = selectedType == null 
            ? "‚úÖ –í—Å—ñ –ø–æ–¥—ñ—ó" 
            : "üìÖ –í—Å—ñ –ø–æ–¥—ñ—ó";
        buttons.Add(new List<InlineKeyboardButton>
        {
            InlineKeyboardButton.WithCallbackData(allEventsText, "events_filter_clear")
        });

        // –ö–Ω–æ–ø–∫–∏ —Ç–∏–ø—ñ–≤ (–ø–æ 2 –≤ —Ä—è–¥)
        for (int i = 0; i < eventTypes.Count; i += 2)
        {
            var row = new List<InlineKeyboardButton>();
            
            var type1 = eventTypes[i];
            var isSelected1 = selectedType == type1;
            var text1 = $"{(isSelected1 ? "‚úÖ" : type1.GetEmoji())} {type1.GetDisplayName()}";
            row.Add(InlineKeyboardButton.WithCallbackData(text1, $"events_filter_type_{(int)type1}"));

            if (i + 1 < eventTypes.Count)
            {
                var type2 = eventTypes[i + 1];
                var isSelected2 = selectedType == type2;
                var text2 = $"{(isSelected2 ? "‚úÖ" : type2.GetEmoji())} {type2.GetDisplayName()}";
                row.Add(InlineKeyboardButton.WithCallbackData(text2, $"events_filter_type_{(int)type2}"));
            }

            buttons.Add(row);
        }

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        buttons.Add(new List<InlineKeyboardButton>
        {
            InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", backCallbackData)
        });

        return new InlineKeyboardMarkup(buttons);
    }

    /// <summary>
    /// –°—Ç–≤–æ—Ä—é—î inline keyboard –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ —Å—Ç–∞—Ç—É—Å—ñ–≤ –∑–≤–µ—Ä–Ω–µ–Ω—å
    /// </summary>
    /// <param name="selectedStatus">–û–±—Ä–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å (—è–∫—â–æ —î)</param>
    /// <param name="backCallbackData">Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"</param>
    /// <returns>InlineKeyboardMarkup –∑—ñ —Å—Ç–∞—Ç—É—Å–∞–º–∏</returns>
    public static InlineKeyboardMarkup CreateAppealStatusFilterKeyboard(
        AppealStatus? selectedStatus = null,
        string backCallbackData = "main_menu")
    {
        var buttons = new List<List<InlineKeyboardButton>>();

        // –í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏
        var statuses = Enum.GetValues<AppealStatus>().ToList();

        // –ö–Ω–æ–ø–∫–∞ "–í—Å—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è"
        var allAppealsText = selectedStatus == null 
            ? "‚úÖ –í—Å—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è" 
            : "üìã –í—Å—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è";
        buttons.Add(new List<InlineKeyboardButton>
        {
            InlineKeyboardButton.WithCallbackData(allAppealsText, "appeals_filter_clear")
        });

        // –ö–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å—ñ–≤ (–ø–æ 2 –≤ —Ä—è–¥)
        for (int i = 0; i < statuses.Count; i += 2)
        {
            var row = new List<InlineKeyboardButton>();
            
            var status1 = statuses[i];
            var isSelected1 = selectedStatus == status1;
            var text1 = $"{(isSelected1 ? "‚úÖ" : status1.GetEmoji())} {status1.GetDisplayName()}";
            row.Add(InlineKeyboardButton.WithCallbackData(text1, $"appeals_filter_status_{(int)status1}"));

            if (i + 1 < statuses.Count)
            {
                var status2 = statuses[i + 1];
                var isSelected2 = selectedStatus == status2;
                var text2 = $"{(isSelected2 ? "‚úÖ" : status2.GetEmoji())} {status2.GetDisplayName()}";
                row.Add(InlineKeyboardButton.WithCallbackData(text2, $"appeals_filter_status_{(int)status2}"));
            }

            buttons.Add(row);
        }

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        buttons.Add(new List<InlineKeyboardButton>
        {
            InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", backCallbackData)
        });

        return new InlineKeyboardMarkup(buttons);
    }

    /// <summary>
    /// –°—Ç–≤–æ—Ä—é—î inline keyboard –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–≤–µ—Ä–Ω–µ–Ω—å
    /// </summary>
    /// <param name="selectedCategory">–û–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è (—è–∫—â–æ —î)</param>
    /// <param name="backCallbackData">Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"</param>
    /// <returns>InlineKeyboardMarkup –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏</returns>
    public static InlineKeyboardMarkup CreateAppealCategoryFilterKeyboard(
        AppealCategory? selectedCategory = null,
        string backCallbackData = "main_menu")
    {
        var buttons = new List<List<InlineKeyboardButton>>();

        // –í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        var categories = Enum.GetValues<AppealCategory>().ToList();

        // –ö–Ω–æ–ø–∫–∞ "–í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
        var allCategoriesText = selectedCategory == null 
            ? "‚úÖ –í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó" 
            : "üìÇ –í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó";
        buttons.Add(new List<InlineKeyboardButton>
        {
            InlineKeyboardButton.WithCallbackData(allCategoriesText, "appeals_filter_category_clear")
        });

        // –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π (–ø–æ 1 –≤ —Ä—è–¥ —á–µ—Ä–µ–∑ –¥–æ–≤–≥—ñ –Ω–∞–∑–≤–∏)
        foreach (var category in categories)
        {
            var isSelected = selectedCategory == category;
            var text = $"{(isSelected ? "‚úÖ" : category.GetEmoji())} {category.GetDisplayName()}";
            buttons.Add(new List<InlineKeyboardButton>
            {
                InlineKeyboardButton.WithCallbackData(text, $"appeals_filter_category_{(int)category}")
            });
        }

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        buttons.Add(new List<InlineKeyboardButton>
        {
            InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", backCallbackData)
        });

        return new InlineKeyboardMarkup(buttons);
    }

    /// <summary>
    /// –î–æ–¥–∞—î –∫–Ω–æ–ø–∫—É "–§—ñ–ª—å—Ç—Ä–∏" –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ keyboard
    /// </summary>
    /// <param name="buttons">–°–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤ –∫–Ω–æ–ø–æ–∫</param>
    /// <param name="filterCallbackData">Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤</param>
    /// <param name="hasActiveFilters">–ß–∏ —î –∞–∫—Ç–∏–≤–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏</param>
    public static void AddFilterButton(
        List<List<InlineKeyboardButton>> buttons,
        string filterCallbackData,
        bool hasActiveFilters = false)
    {
        var filterText = hasActiveFilters ? "üîç –§—ñ–ª—å—Ç—Ä–∏ ‚úÖ" : "üîç –§—ñ–ª—å—Ç—Ä–∏";
        buttons.Insert(0, new List<InlineKeyboardButton>
        {
            InlineKeyboardButton.WithCallbackData(filterText, filterCallbackData)
        });
    }

    /// <summary>
    /// –ü–∞—Ä—Å–∏—Ç—å ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–æ–≤–∏–Ω –∑ callback data
    /// </summary>
    /// <param name="callbackData">Callback data —É —Ñ–æ—Ä–º–∞—Ç—ñ "news_filter_category_{id}"</param>
    /// <returns>NewsCategory –∞–±–æ null</returns>
    public static NewsCategory? ParseNewsCategoryFromCallback(string callbackData)
    {
        if (string.IsNullOrEmpty(callbackData) || !callbackData.StartsWith("news_filter_category_"))
            return null;

        var idStr = callbackData.Replace("news_filter_category_", "");
        if (int.TryParse(idStr, out int categoryId) && Enum.IsDefined(typeof(NewsCategory), categoryId))
        {
            return (NewsCategory)categoryId;
        }

        return null;
    }

    /// <summary>
    /// –ü–∞—Ä—Å–∏—Ç—å ID —Ç–∏–ø—É –ø–æ–¥—ñ—ó –∑ callback data
    /// </summary>
    /// <param name="callbackData">Callback data —É —Ñ–æ—Ä–º–∞—Ç—ñ "events_filter_type_{id}"</param>
    /// <returns>EventType –∞–±–æ null</returns>
    public static EventType? ParseEventTypeFromCallback(string callbackData)
    {
        if (string.IsNullOrEmpty(callbackData) || !callbackData.StartsWith("events_filter_type_"))
            return null;

        var idStr = callbackData.Replace("events_filter_type_", "");
        if (int.TryParse(idStr, out int typeId) && Enum.IsDefined(typeof(EventType), typeId))
        {
            return (EventType)typeId;
        }

        return null;
    }

    /// <summary>
    /// –ü–∞—Ä—Å–∏—Ç—å ID —Å—Ç–∞—Ç—É—Å—É –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑ callback data
    /// </summary>
    /// <param name="callbackData">Callback data —É —Ñ–æ—Ä–º–∞—Ç—ñ "appeals_filter_status_{id}"</param>
    /// <returns>AppealStatus –∞–±–æ null</returns>
    public static AppealStatus? ParseAppealStatusFromCallback(string callbackData)
    {
        if (string.IsNullOrEmpty(callbackData) || !callbackData.StartsWith("appeals_filter_status_"))
            return null;

        var idStr = callbackData.Replace("appeals_filter_status_", "");
        if (int.TryParse(idStr, out int statusId) && Enum.IsDefined(typeof(AppealStatus), statusId))
        {
            return (AppealStatus)statusId;
        }

        return null;
    }

    /// <summary>
    /// –ü–∞—Ä—Å–∏—Ç—å ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑ callback data
    /// </summary>
    /// <param name="callbackData">Callback data —É —Ñ–æ—Ä–º–∞—Ç—ñ "appeals_filter_category_{id}"</param>
    /// <returns>AppealCategory –∞–±–æ null</returns>
    public static AppealCategory? ParseAppealCategoryFromCallback(string callbackData)
    {
        if (string.IsNullOrEmpty(callbackData) || !callbackData.StartsWith("appeals_filter_category_"))
            return null;

        var idStr = callbackData.Replace("appeals_filter_category_", "");
        if (int.TryParse(idStr, out int categoryId) && Enum.IsDefined(typeof(AppealCategory), categoryId))
        {
            return (AppealCategory)categoryId;
        }

        return null;
    }
}
