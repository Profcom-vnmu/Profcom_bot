using Telegram.Bot.Types.ReplyMarkups;

namespace StudentUnionBot.Presentation.Bot.Helpers;

/// <summary>
/// –•–µ–ª–ø–µ—Ä –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –≤ Telegram –±–æ—Ç–∞—Ö
/// </summary>
public static class PaginationHelper
{
    /// <summary>
    /// –°—Ç–≤–æ—Ä—é—î –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    /// </summary>
    /// <param name="currentPage">–ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ (–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 1)</param>
    /// <param name="totalPages">–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫</param>
    /// <param name="callbackPrefix">–ü—Ä–µ—Ñ—ñ–∫—Å –¥–ª—è callback data (–Ω–∞–ø—Ä. "news_page")</param>
    /// <param name="showPageInfo">–ß–∏ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É</param>
    /// <returns>–°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó</returns>
    public static List<InlineKeyboardButton> GetNavigationButtons(
        int currentPage, 
        int totalPages, 
        string callbackPrefix,
        bool showPageInfo = true)
    {
        var buttons = new List<InlineKeyboardButton>();

        // –ö–Ω–æ–ø–∫–∞ "–ü–æ–ø–µ—Ä–µ–¥–Ω—è"
        if (currentPage > 1)
        {
            buttons.Add(InlineKeyboardButton.WithCallbackData(
                "‚óÄÔ∏è –ù–∞–∑–∞–¥",
                $"{callbackPrefix}_{currentPage - 1}"));
        }

        // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
        if (showPageInfo)
        {
            buttons.Add(InlineKeyboardButton.WithCallbackData(
                $"{currentPage}/{totalPages}",
                "pagination_info"));
        }

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—É–ø–Ω–∞"
        if (currentPage < totalPages)
        {
            buttons.Add(InlineKeyboardButton.WithCallbackData(
                "–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è",
                $"{callbackPrefix}_{currentPage + 1}"));
        }

        return buttons;
    }

    /// <summary>
    /// –°—Ç–≤–æ—Ä—é—î –ø–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
    /// </summary>
    /// <param name="itemButtons">–ö–Ω–æ–ø–∫–∏ –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Å–ø–∏—Å–∫—É</param>
    /// <param name="currentPage">–ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞</param>
    /// <param name="totalPages">–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫</param>
    /// <param name="callbackPrefix">–ü—Ä–µ—Ñ—ñ–∫—Å –¥–ª—è callback –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó</param>
    /// <param name="backButtonText">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)</param>
    /// <param name="backButtonCallback">Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)</param>
    /// <returns>–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é</returns>
    public static InlineKeyboardMarkup CreatePaginatedKeyboard(
        List<List<InlineKeyboardButton>> itemButtons,
        int currentPage,
        int totalPages,
        string callbackPrefix,
        string? backButtonText = null,
        string? backButtonCallback = null)
    {
        var allButtons = new List<List<InlineKeyboardButton>>(itemButtons);

        // –î–æ–¥–∞—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é, —è–∫—â–æ —î –±—ñ–ª—å—à–µ 1 —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        if (totalPages > 1)
        {
            var navButtons = GetNavigationButtons(currentPage, totalPages, callbackPrefix);
            allButtons.Add(navButtons);
        }

        // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–∞
        if (!string.IsNullOrWhiteSpace(backButtonText) && !string.IsNullOrWhiteSpace(backButtonCallback))
        {
            allButtons.Add(new List<InlineKeyboardButton>
            {
                InlineKeyboardButton.WithCallbackData(backButtonText, backButtonCallback)
            });
        }

        return new InlineKeyboardMarkup(allButtons);
    }

    /// <summary>
    /// –†–æ–∑–±–∏–≤–∞—î —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    /// </summary>
    /// <param name="items">–°–ø–∏—Å–æ–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤</param>
    /// <param name="buttonsPerRow">–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥–∫—É</param>
    /// <param name="itemButtonFactory">–§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –∑ –µ–ª–µ–º–µ–Ω—Ç–∞</param>
    /// <returns>–°–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤ –∫–Ω–æ–ø–æ–∫</returns>
    public static List<List<InlineKeyboardButton>> CreateItemButtons<T>(
        IEnumerable<T> items,
        int buttonsPerRow,
        Func<T, InlineKeyboardButton> itemButtonFactory)
    {
        var buttons = new List<List<InlineKeyboardButton>>();
        var currentRow = new List<InlineKeyboardButton>();

        foreach (var item in items)
        {
            currentRow.Add(itemButtonFactory(item));

            if (currentRow.Count >= buttonsPerRow)
            {
                buttons.Add(new List<InlineKeyboardButton>(currentRow));
                currentRow.Clear();
            }
        }

        // –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –Ω–µ–ø–æ–≤–Ω–∏–π —Ä—è–¥–æ–∫
        if (currentRow.Any())
        {
            buttons.Add(currentRow);
        }

        return buttons;
    }

    /// <summary>
    /// –§–æ—Ä–º–∞—Ç—É—î —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫—É —Å–ø–∏—Å–∫—É –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
    /// </summary>
    /// <param name="title">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫—É</param>
    /// <param name="totalCount">–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤</param>
    /// <param name="currentPage">–ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞</param>
    /// <param name="totalPages">–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫</param>
    /// <param name="pageSize">–†–æ–∑–º—ñ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏</param>
    /// <returns>–§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫</returns>
    public static string FormatListHeader(
        string title,
        int totalCount,
        int currentPage,
        int totalPages,
        int pageSize)
    {
        var from = (currentPage - 1) * pageSize + 1;
        var to = Math.Min(currentPage * pageSize, totalCount);

        return $"üìã <b>{title}</b>\n\n" +
               $"–ü–æ–∫–∞–∑–∞–Ω–æ {from}-{to} –∑ {totalCount}\n" +
               $"–°—Ç–æ—Ä—ñ–Ω–∫–∞ {currentPage} –∑ {totalPages}\n\n";
    }

    /// <summary>
    /// –û–±—á–∏—Å–ª—é—î –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫
    /// </summary>
    /// <param name="totalItems">–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤</param>
    /// <param name="pageSize">–†–æ–∑–º—ñ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏</param>
    /// <returns>–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫</returns>
    public static int CalculateTotalPages(int totalItems, int pageSize)
    {
        if (totalItems <= 0 || pageSize <= 0)
            return 0;

        return (int)Math.Ceiling((double)totalItems / pageSize);
    }

    /// <summary>
    /// –í–∞–ª—ñ–¥—É—î –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    /// </summary>
    /// <param name="pageNumber">–ù–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏</param>
    /// <param name="totalPages">–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫</param>
    /// <returns>–í–∞–ª—ñ–¥–Ω–∏–π –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–æ–±–º–µ–∂–µ–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º 1..totalPages)</returns>
    public static int ValidatePageNumber(int pageNumber, int totalPages)
    {
        if (pageNumber < 1)
            return 1;
        if (pageNumber > totalPages)
            return Math.Max(totalPages, 1);
        return pageNumber;
    }

    /// <summary>
    /// –ü–∞—Ä—Å–∏—Ç—å –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ callback data
    /// </summary>
    /// <param name="callbackData">Callback data (–Ω–∞–ø—Ä. "news_page_2")</param>
    /// <param name="prefix">–ü—Ä–µ—Ñ—ñ–∫—Å callback (–Ω–∞–ø—Ä. "news_page")</param>
    /// <returns>–ù–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∞–±–æ null —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏</returns>
    public static int? ParsePageNumber(string callbackData, string prefix)
    {
        if (string.IsNullOrWhiteSpace(callbackData) || string.IsNullOrWhiteSpace(prefix))
            return null;

        var parts = callbackData.Split('_');
        if (parts.Length < 2)
            return null;

        var pageStr = parts[^1]; // –û—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç
        if (int.TryParse(pageStr, out var pageNumber))
            return pageNumber;

        return null;
    }
}
