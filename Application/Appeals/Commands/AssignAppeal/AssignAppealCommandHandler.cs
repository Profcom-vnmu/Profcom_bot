using MediatR;
using Microsoft.Extensions.Logging;
using StudentUnionBot.Application.Appeals.DTOs;
using StudentUnionBot.Core.Results;
using StudentUnionBot.Domain.Entities;
using StudentUnionBot.Domain.Enums;
using StudentUnionBot.Domain.Interfaces;

namespace StudentUnionBot.Application.Appeals.Commands.AssignAppeal;

/// <summary>
/// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∞–ø–µ–ª–∞
/// </summary>
public class AssignAppealCommandHandler : IRequestHandler<AssignAppealCommand, Result<AppealDto>>
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IAppealAssignmentService _assignmentService;
    private readonly INotificationService _notificationService;
    private readonly ILogger<AssignAppealCommandHandler> _logger;

    public AssignAppealCommandHandler(
        IUnitOfWork unitOfWork,
        IAppealAssignmentService assignmentService,
        INotificationService notificationService,
        ILogger<AssignAppealCommandHandler> logger)
    {
        _unitOfWork = unitOfWork;
        _assignmentService = assignmentService;
        _notificationService = notificationService;
        _logger = logger;
    }

    public async Task<Result<AppealDto>> Handle(AssignAppealCommand request, CancellationToken cancellationToken)
    {
        try
        {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∞–ø–µ–ª
            var appeal = await _unitOfWork.Appeals.GetByIdAsync(request.AppealId, cancellationToken);
            if (appeal == null)
            {
                return Result<AppealDto>.Fail("–ê–ø–µ–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            var assignedByUser = await _unitOfWork.Users.GetByTelegramIdAsync(request.AssignedByUserId, cancellationToken);
            if (assignedByUser == null || (assignedByUser.Role != UserRole.Admin && assignedByUser.Role != UserRole.SuperAdmin))
            {
                return Result<AppealDto>.Fail("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –ø—Ä–∏–∑–Ω–∞—á–∞—Ç–∏ –∞–ø–µ–ª–∏");
            }

            BotUser? assignedAdmin = null;

            if (request.AdminId.HasValue)
            {
                // –†—É—á–Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
                var manualAssignResult = await _assignmentService.AssignAppealToAdminAsync(
                    appeal, request.AdminId.Value, cancellationToken);
                
                if (!manualAssignResult.IsSuccess)
                {
                    return Result<AppealDto>.Fail(manualAssignResult.Error);
                }

                assignedAdmin = await _unitOfWork.Users.GetByTelegramIdAsync(request.AdminId.Value, cancellationToken);
                
                _logger.LogInformation(
                    "–ê–ø–µ–ª {AppealId} –≤—Ä—É—á–Ω—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {AdminId} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {AssignedBy}. –ü—Ä–∏—á–∏–Ω–∞: {Reason}",
                    request.AppealId, request.AdminId.Value, request.AssignedByUserId, request.Reason ?? "–ù–µ –≤–∫–∞–∑–∞–Ω–æ");
            }
            else
            {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
                var autoAssignResult = await _assignmentService.AssignAppealAsync(appeal, cancellationToken);
                
                if (!autoAssignResult.IsSuccess)
                {
                    return Result<AppealDto>.Fail(autoAssignResult.Error);
                }

                assignedAdmin = autoAssignResult.Value!;
                
                _logger.LogInformation(
                    "–ê–ø–µ–ª {AppealId} –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {AdminId}",
                    request.AppealId, assignedAdmin.TelegramId);
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –∞–ø–µ–ª
            appeal.AssignTo(assignedAdmin!.TelegramId);

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
            _unitOfWork.Appeals.Update(appeal);
            await _unitOfWork.SaveChangesAsync(cancellationToken);

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ–º—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
            var notificationResult = await _notificationService.CreateAndSendNotificationAsync(
                userId: assignedAdmin.TelegramId,
                notificationEvent: NotificationEvent.AppealAssigned,
                type: NotificationType.Push,
                title: "üë§ –ù–æ–≤–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è",
                message: $"–í–∞–º –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è\n" +
                        $"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {appeal.Category.GetDisplayName()}\n" +
                        $"–¢–µ–º–∞: {appeal.Subject}\n" +
                        $"–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {appeal.Priority.GetDisplayName()}\n" +
                        $"ID: #{appeal.Id}",
                priority: appeal.Priority == AppealPriority.Urgent ? NotificationPriority.Critical :
                         appeal.Priority == AppealPriority.High ? NotificationPriority.High :
                         NotificationPriority.Normal,
                relatedAppealId: appeal.Id,
                cancellationToken: cancellationToken);

            if (notificationResult.IsSuccess)
            {
                _logger.LogInformation(
                    "–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {AdminId} –ø—Ä–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è {AppealId}",
                    assignedAdmin.TelegramId,
                    appeal.Id);
            }
            else
            {
                _logger.LogWarning(
                    "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {AdminId} –ø—Ä–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: {Error}",
                    assignedAdmin.TelegramId,
                    notificationResult.Error);
            }

            return Result<AppealDto>.Ok(MapToDto(appeal));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ –∞–ø–µ–ª–∞ {AppealId}", request.AppealId);
            return Result<AppealDto>.Fail("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ –∞–ø–µ–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
        }
    }

    private static AppealDto MapToDto(Appeal appeal)
    {
        return new AppealDto
        {
            Id = appeal.Id,
            StudentId = appeal.StudentId,
            StudentName = appeal.StudentName,
            Category = appeal.Category,
            CategoryName = appeal.Category.GetDisplayName(),
            Subject = appeal.Subject,
            Message = appeal.Message,
            Status = appeal.Status,
            StatusName = appeal.Status.GetDisplayName(),
            Priority = appeal.Priority,
            PriorityName = appeal.Priority.GetDisplayName(),
            AssignedToAdminId = appeal.AssignedToAdminId,
            CreatedAt = appeal.CreatedAt,
            UpdatedAt = appeal.UpdatedAt,
            FirstResponseAt = appeal.FirstResponseAt,
            ClosedAt = appeal.ClosedAt,
            MessageCount = 0 // Will be calculated elsewhere if needed
        };
    }
}
