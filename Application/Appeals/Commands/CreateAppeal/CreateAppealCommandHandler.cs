using MediatR;
using Microsoft.Extensions.Logging;
using StudentUnionBot.Application.Appeals.DTOs;
using StudentUnionBot.Application.Common.Interfaces;
using StudentUnionBot.Core.Results;
using StudentUnionBot.Domain.Entities;
using StudentUnionBot.Domain.Enums;
using StudentUnionBot.Domain.Interfaces;

namespace StudentUnionBot.Application.Appeals.Commands.CreateAppeal;

/// <summary>
/// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
/// </summary>
public class CreateAppealCommandHandler : IRequestHandler<CreateAppealCommand, Result<AppealDto>>
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IRateLimiter _rateLimiter;
    private readonly ILogger<CreateAppealCommandHandler> _logger;

    public CreateAppealCommandHandler(
        IUnitOfWork unitOfWork,
        IRateLimiter rateLimiter,
        ILogger<CreateAppealCommandHandler> logger)
    {
        _unitOfWork = unitOfWork;
        _rateLimiter = rateLimiter;
        _logger = logger;
    }

    public async Task<Result<AppealDto>> Handle(CreateAppealCommand request, CancellationToken cancellationToken)
    {
        try
        {
            _logger.LogInformation(
                "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {StudentId} –∑ —Ç–µ–º–æ—é {Subject}",
                request.StudentId,
                request.Subject);

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ rate limit
            var isAllowed = await _rateLimiter.AllowAsync(request.StudentId, "CreateAppeal", cancellationToken);
            if (!isAllowed)
            {
                var timeUntilReset = await _rateLimiter.GetTimeUntilResetAsync(request.StudentId, "CreateAppeal", cancellationToken);
                var waitMinutes = timeUntilReset?.TotalMinutes ?? 10;
                
                _logger.LogWarning(
                    "Rate limit exceeded –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {StudentId} –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è",
                    request.StudentId);

                return Result<AppealDto>.Fail(
                    $"‚è± –í–∏ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∏ –ª—ñ–º—ñ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω—å.\n" +
                    $"–ó–∞—á–µ–∫–∞–π—Ç–µ {Math.Ceiling(waitMinutes)} —Ö–≤. –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è–º.\n\n" +
                    $"üí° –¶–µ –æ–±–º–µ–∂–µ–Ω–Ω—è –∑–∞—Ö–∏—â–∞—î —Å–∏—Å—Ç–µ–º—É –≤—ñ–¥ —Å–ø–∞–º—É.");
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            var user = await _unitOfWork.Users.GetByTelegramIdAsync(request.StudentId, cancellationToken);
            if (user == null)
            {
                _logger.LogWarning("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {StudentId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π", request.StudentId);
                return Result<AppealDto>.Fail("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É —Å–∏—Å—Ç–µ–º—ñ");
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
            if (user.IsBanned)
            {
                _logger.LogWarning("–°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {StudentId}", request.StudentId);
                return Result<AppealDto>.Fail($"–í–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: {user.BanReason}");
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è —á–µ—Ä–µ–∑ factory method
            var appeal = Appeal.Create(
                studentId: request.StudentId,
                studentName: request.StudentName,
                category: request.Category,
                subject: request.Subject,
                message: request.Message);

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
            await _unitOfWork.Appeals.AddAsync(appeal, cancellationToken);
            await _unitOfWork.SaveChangesAsync(cancellationToken);

            _logger.LogInformation(
                "–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è {AppealId} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {StudentId}",
                appeal.Id,
                request.StudentId);

            // –ú–∞–ø–ø—ñ–Ω–≥ –Ω–∞ DTO
            var dto = MapToDto(appeal);

            return Result<AppealDto>.Ok(dto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {StudentId}", request.StudentId);
            return Result<AppealDto>.Fail("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
        }
    }

    private static AppealDto MapToDto(Appeal appeal)
    {
        return new AppealDto
        {
            Id = appeal.Id,
            StudentId = appeal.StudentId,
            StudentName = appeal.StudentName,
            Category = appeal.Category,
            CategoryName = appeal.Category.GetDisplayName(),
            Subject = appeal.Subject,
            Message = appeal.Message,
            Status = appeal.Status,
            StatusName = appeal.Status.GetDisplayName(),
            Priority = appeal.Priority,
            PriorityName = appeal.Priority.GetDisplayName(),
            AssignedToAdminId = appeal.AssignedToAdminId,
            CreatedAt = appeal.CreatedAt,
            UpdatedAt = appeal.UpdatedAt,
            FirstResponseAt = appeal.FirstResponseAt,
            ClosedAt = appeal.ClosedAt,
            Rating = appeal.Rating,
            RatingComment = appeal.RatingComment,
            MessageCount = 0 // –ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        };
    }
}
