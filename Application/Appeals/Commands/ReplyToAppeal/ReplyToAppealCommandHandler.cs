using MediatR;
using Microsoft.Extensions.Logging;
using StudentUnionBot.Core.Results;
using StudentUnionBot.Domain.Entities;
using StudentUnionBot.Domain.Enums;
using StudentUnionBot.Domain.Interfaces;

namespace StudentUnionBot.Application.Appeals.Commands.ReplyToAppeal;

/// <summary>
/// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
/// </summary>
public class ReplyToAppealCommandHandler : IRequestHandler<ReplyToAppealCommand, Result<int>>
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly INotificationService _notificationService;
    private readonly ILogger<ReplyToAppealCommandHandler> _logger;

    public ReplyToAppealCommandHandler(
        IUnitOfWork unitOfWork,
        INotificationService notificationService,
        ILogger<ReplyToAppealCommandHandler> logger)
    {
        _unitOfWork = unitOfWork;
        _notificationService = notificationService;
        _logger = logger;
    }

    public async Task<Result<int>> Handle(ReplyToAppealCommand request, CancellationToken cancellationToken)
    {
        try
        {
            _logger.LogInformation(
                "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {AdminId} –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è {AppealId}",
                request.AdminId,
                request.AppealId);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
            var admin = await _unitOfWork.Users.GetByTelegramIdAsync(request.AdminId, cancellationToken);
            if (admin == null || admin.Role != UserRole.Admin)
            {
                _logger.LogWarning("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {AdminId} –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", request.AdminId);
                return Result<int>.Fail("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
            var appeal = await _unitOfWork.Appeals.GetByIdAsync(request.AppealId, cancellationToken);
            if (appeal == null)
            {
                _logger.LogWarning("–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è {AppealId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", request.AppealId);
                return Result<int>.Fail("–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–µ –∑–∞–∫—Ä–∏—Ç–µ
            if (appeal.Status == AppealStatus.Closed || appeal.Status == AppealStatus.Resolved)
            {
                _logger.LogWarning(
                    "–°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–∫—Ä–∏—Ç–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è {AppealId}",
                    request.AppealId);
                return Result<int>.Fail("–ù–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–∫—Ä–∏—Ç–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è");
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            var message = AppealMessage.Create(
                appealId: request.AppealId,
                senderId: request.AdminId,
                senderName: request.AdminName,
                isFromAdmin: true,
                text: request.Text,
                photoFileId: request.PhotoFileId,
                documentFileId: request.DocumentFileId,
                documentFileName: request.DocumentFileName
            );

            // –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –¥–æ–º–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥
            appeal.AddMessage(message);
            
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –ø–µ—Ä—à–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            appeal.SetFirstResponse();

            // –Ø–∫—â–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–µ - –ø—Ä–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–º—É –∞–¥–º—ñ–Ω—É
            if (appeal.AssignedToAdminId == null)
            {
                appeal.AssignTo(request.AdminId);
                _logger.LogInformation(
                    "–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è {AppealId} –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {AdminId}",
                    request.AppealId,
                    request.AdminId);
            }
            _unitOfWork.Appeals.Update(appeal);

            await _unitOfWork.SaveChangesAsync(cancellationToken);

            _logger.LogInformation(
                "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {AdminId} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–≤ –Ω–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è {AppealId}, —Å—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {MessageId}",
                request.AdminId,
                request.AppealId,
                message.Id);

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç—É –ø—Ä–æ –Ω–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            var hasAttachment = !string.IsNullOrEmpty(request.PhotoFileId) || 
                               !string.IsNullOrEmpty(request.DocumentFileId);
            
            var notificationResult = await _notificationService.CreateAndSendNotificationAsync(
                userId: appeal.StudentId,
                notificationEvent: NotificationEvent.AppealMessageReceived,
                type: NotificationType.Push,
                title: "üí¨ –ù–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                message: $"–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è: {appeal.Subject}\n" +
                        $"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä: {request.AdminName}\n" +
                        $"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {(request.Text.Length > 100 ? request.Text.Substring(0, 100) + "..." : request.Text)}" +
                        (hasAttachment ? "\nüìé –ó –≤–∫–ª–∞–¥–µ–Ω–Ω—è–º" : ""),
                priority: NotificationPriority.Normal,
                relatedAppealId: appeal.Id,
                cancellationToken: cancellationToken);

            if (notificationResult.IsSuccess)
            {
                _logger.LogInformation(
                    "–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç—É {StudentId} –ø—Ä–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è {AppealId}",
                    appeal.StudentId,
                    appeal.Id);
            }
            else
            {
                _logger.LogWarning(
                    "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç—É {StudentId} –ø—Ä–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {Error}",
                    appeal.StudentId,
                    notificationResult.Error);
            }

            return Result<int>.Ok(message.Id);
        }
        catch (Exception ex)
        {
            _logger.LogError(
                ex,
                "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {AdminId} –Ω–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è {AppealId}",
                request.AdminId,
                request.AppealId);
            return Result<int>.Fail("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è");
        }
    }
}
