using MediatR;
using Microsoft.Extensions.Logging;
using StudentUnionBot.Core.Results;
using StudentUnionBot.Domain.Interfaces;
using StudentUnionBot.Domain.Enums;

namespace StudentUnionBot.Application.Notifications.Commands.SendBroadcast;

/// <summary>
/// Handler –¥–ª—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
/// </summary>
public class SendBroadcastCommandHandler : IRequestHandler<SendBroadcastCommand, Result<BroadcastResultDto>>
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IPushNotificationProvider _pushProvider;
    private readonly IEmailService _emailService;
    private readonly ILogger<SendBroadcastCommandHandler> _logger;

    public SendBroadcastCommandHandler(
        IUnitOfWork unitOfWork,
        IPushNotificationProvider pushProvider,
        IEmailService emailService,
        ILogger<SendBroadcastCommandHandler> logger)
    {
        _unitOfWork = unitOfWork;
        _pushProvider = pushProvider;
        _emailService = emailService;
        _logger = logger;
    }

    public async Task<Result<BroadcastResultDto>> Handle(
        SendBroadcastCommand request, 
        CancellationToken cancellationToken)
    {
        var startTime = DateTime.UtcNow;
        var result = new BroadcastResultDto
        {
            StartedAt = startTime
        };

        try
        {
            _logger.LogInformation(
                "Starting broadcast from admin {AdminId}, type: {Type}, audience: {Audience}",
                request.AdminTelegramId,
                request.NotificationType,
                request.TargetAudience?.ToString() ?? "All"
            );

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∞–¥–º—ñ–Ω
            var admin = await _unitOfWork.Users.GetByTelegramIdAsync(
                request.AdminTelegramId, 
                cancellationToken
            );

            if (admin == null)
            {
                _logger.LogWarning("Admin {AdminId} not found", request.AdminTelegramId);
                return Result<BroadcastResultDto>.Fail("–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π");
            }

            // –Ø–∫—â–æ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ - –ø–æ–∫–∏ —â–æ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è
            if (!request.SendImmediately)
            {
                _logger.LogWarning("Scheduled broadcasts not yet implemented");
                return Result<BroadcastResultDto>.Fail(
                    "–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–µ–≥–∞–π–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É."
                );
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
            var targetUsers = await GetTargetUsersAsync(request.TargetAudience, cancellationToken);

            if (!targetUsers.Any())
            {
                _logger.LogWarning("No target users found for broadcast");
                result.Message = "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏";
                result.CompletedAt = DateTime.UtcNow;
                return Result<BroadcastResultDto>.Ok(result);
            }

            result.TotalAttempts = targetUsers.Count;
            _logger.LogInformation("Broadcasting to {Count} users", targetUsers.Count);

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            foreach (var user in targetUsers)
            {
                try
                {
                    // –ü–æ–∫–∏ —â–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î–º–æ —Ç—ñ–ª—å–∫–∏ Push-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    // Email —Ä–æ–∑—Å–∏–ª–∫–∞ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–¥–∞–Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ
                    if (request.NotificationType == NotificationType.Push || 
                        request.NotificationType == NotificationType.Both)
                    {
                        var message = $"üì¢ <b>–†–æ–∑—Å–∏–ª–∫–∞ –≤—ñ–¥ –ø—Ä–æ—Ñ–∫–æ–º—É</b>\n\n{request.Message}";
                        await _pushProvider.SendPushAsync(
                            user.TelegramId,
                            message,
                            cancellationToken
                        );
                    }

                    result.SuccessCount++;

                    // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞–º–∏
                    await Task.Delay(50, cancellationToken);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, 
                        "Failed to send broadcast to user {UserId}", 
                        user.TelegramId
                    );
                    result.FailureCount++;
                }
            }

            result.CompletedAt = DateTime.UtcNow;
            result.Message = $"–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø—ñ—à–Ω–æ: {result.SuccessCount}, –ü–æ–º–∏–ª–æ–∫: {result.FailureCount}";

            _logger.LogInformation(
                "Broadcast completed. Success: {Success}, Failed: {Failed}, Duration: {Duration}ms",
                result.SuccessCount,
                result.FailureCount,
                (result.CompletedAt - result.StartedAt).TotalMilliseconds
            );

            return Result<BroadcastResultDto>.Ok(result);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error during broadcast execution");
            result.CompletedAt = DateTime.UtcNow;
            result.Message = "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏";
            return Result<BroadcastResultDto>.Fail("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏");
        }
    }

    /// <summary>
    /// –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ü—ñ–ª—å–æ–≤–æ—ó –∞—É–¥–∏—Ç–æ—Ä—ñ—ó
    /// </summary>
    private async Task<List<Domain.Entities.BotUser>> GetTargetUsersAsync(
        BroadcastAudience? audience, 
        CancellationToken cancellationToken)
    {
        var allActiveUsers = await _unitOfWork.Users.GetActiveUsersAsync(cancellationToken);

        return audience switch
        {
            BroadcastAudience.AllUsers or null => allActiveUsers,
            
            BroadcastAudience.StudentsOnly => allActiveUsers
                .Where(u => u.Role == UserRole.Student)
                .ToList(),
            
            BroadcastAudience.AdminsOnly => allActiveUsers
                .Where(u => u.Role == UserRole.Admin || u.Role == UserRole.SuperAdmin)
                .ToList(),
            
            BroadcastAudience.UsersWithEmail => allActiveUsers
                .Where(u => !string.IsNullOrEmpty(u.Email))
                .ToList(),
            
            BroadcastAudience.ByLanguage => allActiveUsers
                .Where(u => u.Language == Language.Ukrainian)
                .ToList(),
            
            _ => allActiveUsers
        };
    }
}
