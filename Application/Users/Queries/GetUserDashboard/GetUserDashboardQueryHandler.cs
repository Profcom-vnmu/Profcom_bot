using MediatR;
using Microsoft.Extensions.Logging;
using StudentUnionBot.Application.Users.DTOs;
using StudentUnionBot.Core.Results;
using StudentUnionBot.Domain.Enums;
using StudentUnionBot.Domain.Interfaces;

namespace StudentUnionBot.Application.Users.Queries.GetUserDashboard;

/// <summary>
/// Handler –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ dashboard –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
/// </summary>
public class GetUserDashboardQueryHandler : IRequestHandler<GetUserDashboardQuery, Result<UserDashboardDto>>
{
    private readonly IUserRepository _userRepository;
    private readonly IAppealRepository _appealRepository;
    private readonly IEventRepository _eventRepository;
    private readonly ILogger<GetUserDashboardQueryHandler> _logger;

    public GetUserDashboardQueryHandler(
        IUserRepository userRepository,
        IAppealRepository appealRepository,
        IEventRepository eventRepository,
        ILogger<GetUserDashboardQueryHandler> logger)
    {
        _userRepository = userRepository;
        _appealRepository = appealRepository;
        _eventRepository = eventRepository;
        _logger = logger;
    }

    public async Task<Result<UserDashboardDto>> Handle(
        GetUserDashboardQuery request, 
        CancellationToken cancellationToken)
    {
        try
        {
            // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            var user = await _userRepository.GetByTelegramIdAsync(request.TelegramId, cancellationToken);

            if (user == null)
            {
                return Result<UserDashboardDto>.Fail("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–æ–≤–∏–π (–±–µ–∑ email –∞–±–æ –ø–µ—Ä—à–∏–π –≤—Ö—ñ–¥ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤)
            var isNewUser = string.IsNullOrWhiteSpace(user.Email) || 
                            user.JoinedAt > DateTime.UtcNow.AddDays(-7);

            // –ó–±–∏—Ä–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            var statistics = await GetUserStatisticsAsync(user.TelegramId, cancellationToken);

            // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ Quick Actions
            var quickActions = await GenerateQuickActionsAsync(user, statistics, isNewUser, cancellationToken);

            // –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
            var recentNotifications = await GetRecentNotificationsAsync(user.TelegramId, cancellationToken);

            // –°—Ç–≤–æ—Ä—é—î–º–æ UserDto
            var userDto = new UserDto
            {
                TelegramId = user.TelegramId,
                Username = user.Username,
                FirstName = user.FirstName,
                LastName = user.LastName,
                FullName = user.FullName,
                Faculty = user.Faculty,
                Course = user.Course,
                Group = user.Group,
                Email = user.Email,
                IsEmailVerified = user.IsEmailVerified,
                Language = user.Language.ToString().ToLower(),
                Role = user.Role,
                IsActive = user.IsActive,
                JoinedAt = user.JoinedAt,
                RoleName = user.Role.ToString()
            };

            var dashboard = new UserDashboardDto
            {
                User = userDto,
                QuickActions = quickActions,
                RecentNotifications = recentNotifications,
                Statistics = statistics,
                IsNewUser = isNewUser
            };

            return Result<UserDashboardDto>.Ok(dashboard);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ dashboard –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {TelegramId}", request.TelegramId);
            return Result<UserDashboardDto>.Fail("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞—à–±–æ—Ä–¥–∞");
        }
    }

    /// <summary>
    /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    /// </summary>
    private async Task<UserStatisticsDto> GetUserStatisticsAsync(long telegramId, CancellationToken cancellationToken)
    {
        // –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
        var userAppeals = await _appealRepository.GetUserAppealsAsync(telegramId, cancellationToken);
        
        var activeAppeals = userAppeals.Count(a => 
            a.Status == AppealStatus.New || 
            a.Status == AppealStatus.InProgress ||
            a.Status == AppealStatus.WaitingForStudent ||
            a.Status == AppealStatus.WaitingForAdmin ||
            a.Status == AppealStatus.Escalated);
        
        // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
        var appealsWithNewReplies = 0;
        foreach (var appeal in userAppeals.Where(a => a.Status != AppealStatus.Closed))
        {
            var appealWithMessages = await _appealRepository.GetByIdWithMessagesAsync(appeal.Id, cancellationToken);
            if (appealWithMessages?.Messages != null && appealWithMessages.Messages.Any())
            {
                var lastAdminMessage = appealWithMessages.Messages
                    .Where(m => m.IsFromAdmin)
                    .OrderByDescending(m => m.SentAt)
                    .FirstOrDefault();
                
                var lastUserMessage = appealWithMessages.Messages
                    .Where(m => !m.IsFromAdmin)
                    .OrderByDescending(m => m.SentAt)
                    .FirstOrDefault();

                if (lastAdminMessage != null && 
                    (lastUserMessage == null || lastAdminMessage.SentAt > lastUserMessage.SentAt))
                {
                    appealsWithNewReplies++;
                }
            }
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ –º–∞–π–±—É—Ç–Ω—ñ –ø–æ–¥—ñ—ó
        var upcomingEvents = await _eventRepository.GetUpcomingEventsAsync(
            type: null,
            onlyFeatured: false,
            pageNumber: 1,
            pageSize: 100,
            cancellationToken: cancellationToken);

        // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ–¥—ñ—ó –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ 7 –¥–Ω—ñ–≤
        var upcomingEventsCount = upcomingEvents.Count(e => 
            e.StartDate <= DateTime.UtcNow.AddDays(7));

        return new UserStatisticsDto
        {
            ActiveAppeals = activeAppeals,
            TotalAppeals = userAppeals.Count,
            NewReplies = appealsWithNewReplies,
            UpcomingEvents = upcomingEventsCount,
            RegisteredEvents = 0 // TODO: –î–æ–¥–∞—Ç–∏ –∫–æ–ª–∏ –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞ –ø–æ–¥—ñ—ó
        };
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö Quick Actions –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    /// </summary>
    private async Task<List<QuickActionDto>> GenerateQuickActionsAsync(
        Domain.Entities.BotUser user, 
        UserStatisticsDto statistics, 
        bool isNewUser,
        CancellationToken cancellationToken)
    {
        var actions = new List<(QuickActionDto Action, int Priority)>();

        // üéì Tutorial –¥–ª—è –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–Ω–∞–π–≤–∏—â–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç)
        if (isNewUser)
        {
            actions.Add((new QuickActionDto
            {
                Title = "–ü–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è",
                CallbackData = "tutorial_start",
                Description = "–î—ñ–∑–Ω–∞–π—Å—è, —è–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º",
                Type = QuickActionType.Tutorial,
                Priority = 100,
                Emoji = "üéì"
            }, 100));
        }

        // ‚ö†Ô∏è –ù–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è (–≤–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç)
        if (statistics.NewReplies > 0)
        {
            actions.Add((new QuickActionDto
            {
                Title = $"–ù–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ({statistics.NewReplies})",
                CallbackData = "view_my_appeals",
                Description = "–£ –≤–∞—Å —î –Ω–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤",
                Type = QuickActionType.ViewAppeals,
                Priority = 90,
                Emoji = "üí¨"
            }, 90));
        }

        // üìã –ú–æ—ó –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
        if (statistics.ActiveAppeals > 0)
        {
            actions.Add((new QuickActionDto
            {
                Title = $"–ú–æ—ó –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è ({statistics.ActiveAppeals})",
                CallbackData = "view_my_appeals",
                Description = "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è",
                Type = QuickActionType.ViewAppeals,
                Priority = 80,
                Emoji = "üìã"
            }, 80));
        }
        else
        {
            actions.Add((new QuickActionDto
            {
                Title = "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è",
                CallbackData = "create_appeal",
                Description = "–ù–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ—Ñ–∫–æ–º—É",
                Type = QuickActionType.CreateAppeal,
                Priority = 70,
                Emoji = "‚úçÔ∏è"
            }, 70));
        }

        // üìÖ –ú–∞–π–±—É—Ç–Ω—ñ –ø–æ–¥—ñ—ó
        if (statistics.UpcomingEvents > 0)
        {
            actions.Add((new QuickActionDto
            {
                Title = $"–ü–æ–¥—ñ—ó ({statistics.UpcomingEvents})",
                CallbackData = "view_events",
                Description = "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞–π–±–ª–∏–∂—á—ñ –ø–æ–¥—ñ—ó",
                Type = QuickActionType.ViewEvents,
                Priority = 60,
                Emoji = "üìÖ"
            }, 60));
        }

        //  –ü—Ä–æ—Ñ—ñ–ª—å (—è–∫—â–æ –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π)
        if (string.IsNullOrWhiteSpace(user.Faculty) || user.Course == null)
        {
            actions.Add((new QuickActionDto
            {
                Title = "–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å",
                CallbackData = "edit_profile",
                Description = "–í–∫–∞–∂—ñ—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç —Ç–∞ –∫—É—Ä—Å",
                Type = QuickActionType.Profile,
                Priority = 65,
                Emoji = "üë§"
            }, 65));
        }

        // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º —ñ –±–µ—Ä–µ–º–æ —Ç–æ–ø-4
        var topActions = actions
            .OrderByDescending(a => a.Priority)
            .Take(4)
            .Select(a => a.Action)
            .ToList();

        return await Task.FromResult(topActions);
    }

    /// <summary>
    /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    /// </summary>
    private async Task<List<NotificationItemDto>> GetRecentNotificationsAsync(
        long telegramId, 
        CancellationToken cancellationToken)
    {
        var notifications = new List<NotificationItemDto>();

        // –ù–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –ø—Ä–æ –Ω–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
        var userAppeals = await _appealRepository.GetUserAppealsAsync(telegramId, cancellationToken);
        
        foreach (var appeal in userAppeals.Where(a => a.Status != AppealStatus.Closed).Take(3))
        {
            var appealWithMessages = await _appealRepository.GetByIdWithMessagesAsync(appeal.Id, cancellationToken);
            if (appealWithMessages?.Messages != null && appealWithMessages.Messages.Any())
            {
                var lastAdminMessage = appealWithMessages.Messages
                    .Where(m => m.IsFromAdmin)
                    .OrderByDescending(m => m.SentAt)
                    .FirstOrDefault();

                if (lastAdminMessage != null)
                {
                    notifications.Add(new NotificationItemDto
                    {
                        Message = $"–ù–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è #{appeal.Id}: " + 
                                  (lastAdminMessage.Text.Length > 50 
                                      ? lastAdminMessage.Text.Substring(0, 47) + "..." 
                                      : lastAdminMessage.Text),
                        Icon = "üí¨",
                        CallbackData = $"appeal_view_{appeal.Id}",
                        Timestamp = lastAdminMessage.SentAt,
                        IsRead = false
                    });
                }
            }
        }

        // –ù–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –ø—Ä–æ –º–∞–π–±—É—Ç–Ω—ñ –ø–æ–¥—ñ—ó (–≤ –Ω–∞–π–±–ª–∏–∂—á—ñ 3 –¥–Ω—ñ)
        var upcomingEvents = await _eventRepository.GetUpcomingEventsAsync(
            type: null,
            onlyFeatured: false,
            pageNumber: 1,
            pageSize: 5,
            cancellationToken: cancellationToken);

        foreach (var evt in upcomingEvents.Where(e => e.StartDate <= DateTime.UtcNow.AddDays(3)).Take(2))
        {
            notifications.Add(new NotificationItemDto
            {
                Message = $"–ü–æ–¥—ñ—è: {evt.Title} - –ü–æ—á–∞—Ç–æ–∫: {evt.StartDate:dd.MM.yyyy HH:mm}",
                Icon = "üìÖ",
                CallbackData = $"event_view_{evt.Id}",
                Timestamp = evt.CreatedAt,
                IsRead = false
            });
        }

        return notifications
            .OrderByDescending(n => n.Timestamp)
            .Take(5)
            .ToList();
    }
}
