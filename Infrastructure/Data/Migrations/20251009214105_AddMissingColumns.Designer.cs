// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentUnionBot.Infrastructure.Data;

#nullable disable

namespace StudentUnionBot.Infrastructure.Data.Migrations
{
    [DbContext(typeof(BotDbContext))]
    [Migration("20251009214105_AddMissingColumns")]
    partial class AddMissingColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("BotUserEvent", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegisteredParticipantsTelegramId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EventId", "RegisteredParticipantsTelegramId");

                    b.HasIndex("RegisteredParticipantsTelegramId");

                    b.ToTable("EventParticipants", (string)null);
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.AdminCategoryExpertise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AdminId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExperienceLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<int>("SuccessfulResolutions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalResolutions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("ExperienceLevel");

                    b.HasIndex("AdminId", "Category")
                        .IsUnique();

                    b.ToTable("AdminCategoryExpertises");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.AdminWorkload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActiveAppealsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<long>("AdminId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastActivityAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastAssignedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalAppealsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdminId")
                        .IsUnique();

                    b.HasIndex("IsAvailable");

                    b.HasIndex("LastActivityAt");

                    b.ToTable("AdminWorkloads");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.Appeal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AssignedToAdminId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ClosedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClosedReason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FirstResponseAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Status");

                    b.HasIndex("StudentId");

                    b.ToTable("Appeals");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.AppealFileAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppealId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AttachedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("AttachedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("FileAttachmentId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEvidence")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppealId");

                    b.HasIndex("AttachedAt");

                    b.HasIndex("AttachedByUserId");

                    b.HasIndex("FileAttachmentId");

                    b.HasIndex("IsEvidence");

                    b.HasIndex("AppealId", "FileAttachmentId")
                        .IsUnique();

                    b.ToTable("AppealFileAttachments");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.AppealMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppealId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DocumentFileId")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentFileName")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFromAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhotoFileId")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("SenderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppealId");

                    b.HasIndex("SenderId");

                    b.HasIndex("SentAt");

                    b.ToTable("AppealMessages");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.BotUser", b =>
                {
                    b.Property<long>("TelegramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BanReason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Course")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Faculty")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Group")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Language")
                        .HasMaxLength(5)
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastActivityAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ProfileUpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("VerificationCodeExpiry")
                        .HasColumnType("TEXT");

                    b.HasKey("TelegramId");

                    b.HasIndex("Email");

                    b.HasIndex("Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.ContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OfficeNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("TelegramUsername")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkingHours")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DisplayOrder");

                    b.HasIndex("IsActive");

                    b.HasIndex("Type");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentParticipants")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxParticipants")
                        .HasColumnType("INTEGER");

                    b.Property<long>("OrganizerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrganizerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoFileId")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RegistrationDeadline")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresRegistration")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Summary")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsFeatured");

                    b.HasIndex("IsPublished");

                    b.HasIndex("StartDate");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.FileAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FileType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompressed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NewsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("ScanResult")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("ScanStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ScannedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThumbnailPath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("UploadedByUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FileHash");

                    b.HasIndex("FileType");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NewsId");

                    b.HasIndex("ScanStatus");

                    b.HasIndex("UploadedAt");

                    b.HasIndex("UploadedByUserId");

                    b.HasIndex("IsDeleted", "FileType");

                    b.HasIndex("IsDeleted", "ScanStatus");

                    b.ToTable("FileAttachments");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentFileId")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhotoFileId")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PublishAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsPinned");

                    b.HasIndex("IsPublished");

                    b.HasIndex("PublishAt");

                    b.ToTable("News");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Event")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RelatedAppealId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RelatedEventId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RelatedNewsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RetryCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ScheduledFor")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Event");

                    b.HasIndex("RelatedAppealId");

                    b.HasIndex("RelatedEventId");

                    b.HasIndex("RelatedNewsId");

                    b.HasIndex("ScheduledFor");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.HasIndex("Status", "ScheduledFor");

                    b.HasIndex("UserId", "Status");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.NotificationPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Event")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("InAppEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PushEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SmsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Event");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "Event")
                        .IsUnique();

                    b.ToTable("NotificationPreferences");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.NotificationTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Event")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<string>("MessageTemplate")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleTemplate")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Event");

                    b.HasIndex("IsActive");

                    b.HasIndex("Language");

                    b.HasIndex("Type");

                    b.HasIndex("Event", "Type", "Language");

                    b.ToTable("NotificationTemplates");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DiscountInfo")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("DiscountPercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Facebook")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Instagram")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LogoFileId")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PromoCode")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Telegram")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TermsAndConditions")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Website")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DisplayOrder");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsFeatured");

                    b.HasIndex("Type");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("BotUserEvent", b =>
                {
                    b.HasOne("StudentUnionBot.Domain.Entities.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentUnionBot.Domain.Entities.BotUser", null)
                        .WithMany()
                        .HasForeignKey("RegisteredParticipantsTelegramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.AdminCategoryExpertise", b =>
                {
                    b.HasOne("StudentUnionBot.Domain.Entities.AdminWorkload", "AdminWorkload")
                        .WithMany("CategoryExpertises")
                        .HasForeignKey("AdminId")
                        .HasPrincipalKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentUnionBot.Domain.Entities.BotUser", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("AdminWorkload");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.AdminWorkload", b =>
                {
                    b.HasOne("StudentUnionBot.Domain.Entities.BotUser", "Admin")
                        .WithOne()
                        .HasForeignKey("StudentUnionBot.Domain.Entities.AdminWorkload", "AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.Appeal", b =>
                {
                    b.HasOne("StudentUnionBot.Domain.Entities.BotUser", "Student")
                        .WithMany("Appeals")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.AppealFileAttachment", b =>
                {
                    b.HasOne("StudentUnionBot.Domain.Entities.Appeal", "Appeal")
                        .WithMany("FileAttachments")
                        .HasForeignKey("AppealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentUnionBot.Domain.Entities.BotUser", "AttachedBy")
                        .WithMany()
                        .HasForeignKey("AttachedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentUnionBot.Domain.Entities.FileAttachment", "FileAttachment")
                        .WithMany("AppealAttachments")
                        .HasForeignKey("FileAttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appeal");

                    b.Navigation("AttachedBy");

                    b.Navigation("FileAttachment");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.AppealMessage", b =>
                {
                    b.HasOne("StudentUnionBot.Domain.Entities.Appeal", "Appeal")
                        .WithMany("Messages")
                        .HasForeignKey("AppealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appeal");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.FileAttachment", b =>
                {
                    b.HasOne("StudentUnionBot.Domain.Entities.News", null)
                        .WithMany("Attachments")
                        .HasForeignKey("NewsId");

                    b.HasOne("StudentUnionBot.Domain.Entities.BotUser", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.Notification", b =>
                {
                    b.HasOne("StudentUnionBot.Domain.Entities.Appeal", "RelatedAppeal")
                        .WithMany()
                        .HasForeignKey("RelatedAppealId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StudentUnionBot.Domain.Entities.Event", "RelatedEvent")
                        .WithMany()
                        .HasForeignKey("RelatedEventId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StudentUnionBot.Domain.Entities.News", "RelatedNews")
                        .WithMany()
                        .HasForeignKey("RelatedNewsId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StudentUnionBot.Domain.Entities.BotUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedAppeal");

                    b.Navigation("RelatedEvent");

                    b.Navigation("RelatedNews");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.NotificationPreference", b =>
                {
                    b.HasOne("StudentUnionBot.Domain.Entities.BotUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.AdminWorkload", b =>
                {
                    b.Navigation("CategoryExpertises");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.Appeal", b =>
                {
                    b.Navigation("FileAttachments");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.BotUser", b =>
                {
                    b.Navigation("Appeals");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.FileAttachment", b =>
                {
                    b.Navigation("AppealAttachments");
                });

            modelBuilder.Entity("StudentUnionBot.Domain.Entities.News", b =>
                {
                    b.Navigation("Attachments");
                });
#pragma warning restore 612, 618
        }
    }
}
