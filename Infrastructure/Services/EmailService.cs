using System.Net;
using System.Net.Mail;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using StudentUnionBot.Domain.Interfaces;

namespace StudentUnionBot.Infrastructure.Services;

/// <summary>
/// –°–µ—Ä–≤—ñ—Å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ SMTP
/// </summary>
public class EmailService : IEmailService
{
    private readonly ILogger<EmailService> _logger;
    private readonly IConfiguration _configuration;
    private readonly EmailTemplateService _templateService;
    private readonly string _smtpHost;
    private readonly int _smtpPort;
    private readonly string _smtpUsername;
    private readonly string _smtpPassword;
    private readonly string _fromEmail;
    private readonly string _fromName;
    private readonly bool _enableSsl;
    private readonly string _botUrl;

    public EmailService(
        ILogger<EmailService> logger,
        IConfiguration configuration,
        EmailTemplateService templateService)
    {
        _logger = logger;
        _configuration = configuration;
        _templateService = templateService;

        _smtpHost = configuration["Email:SmtpHost"] ?? "smtp.gmail.com";
        _smtpPort = int.Parse(configuration["Email:SmtpPort"] ?? "587");
        _smtpUsername = configuration["Email:SmtpUsername"] ?? "";
        _smtpPassword = configuration["Email:SmtpPassword"] ?? "";
        _fromEmail = configuration["Email:FromEmail"] ?? "";
        _fromName = configuration["Email:FromName"] ?? "–°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∏–π –ü—Ä–æ—Ñ–∫–æ–º –í–ù–ú–£";
        _enableSsl = bool.Parse(configuration["Email:EnableSsl"] ?? "true");
        _botUrl = configuration["BotConfiguration:BotUrl"] ?? "https://t.me/StudentUnionBot";
    }

    public async Task<bool> SendVerificationCodeAsync(string toEmail, string code, CancellationToken cancellationToken = default)
    {
        try
        {
            var subject = "–ö–æ–¥ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó Email - –°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∏–π –ü—Ä–æ—Ñ–∫–æ–º";
            
            var variables = _templateService.CreateVerificationVariables(
                userName: "–®–∞–Ω–æ–≤–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–µ", 
                verificationCode: code, 
                expiryMinutes: 15
            );
            
            var body = await _templateService.ProcessTemplateAsync("EmailVerification", variables, cancellationToken);

            return await SendEmailAsync(toEmail, subject, body, cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–æ–¥—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–∞ {Email}", toEmail);
            return false;
        }
    }

    public async Task<bool> SendNewAppealNotificationAsync(string toEmail, int appealId, string subject, CancellationToken cancellationToken = default)
    {
        try
        {
            var emailSubject = $"–ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è #{appealId} - –°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∏–π –ü—Ä–æ—Ñ–∫–æ–º";
            var body = $@"
<html>
<body style='font-family: Arial, sans-serif;'>
    <div style='max-width: 600px; margin: 0 auto; padding: 20px;'>
        <h2 style='color: #2c3e50;'>–ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è #{appealId}</h2>
        <p><strong>–¢–µ–º–∞:</strong> {subject}</p>
        <p>–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞.</p>
        <p>–ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –±–æ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.</p>
        <hr style='border: none; border-top: 1px solid #dee2e6; margin: 30px 0;'>
        <p style='color: #6c757d; font-size: 12px;'>
            –°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∏–π –ü—Ä–æ—Ñ–∫–æ–º –í–ù–ú–£
        </p>
    </div>
</body>
</html>";

            return await SendEmailAsync(toEmail, emailSubject, body, cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è #{AppealId} –Ω–∞ {Email}", appealId, toEmail);
            return false;
        }
    }

    public async Task<bool> SendAppealReplyNotificationAsync(string toEmail, int appealId, string replyText, CancellationToken cancellationToken = default)
    {
        try
        {
            var emailSubject = $"–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è #{appealId} - –°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∏–π –ü—Ä–æ—Ñ–∫–æ–º";
            var body = $@"
<html>
<body style='font-family: Arial, sans-serif;'>
    <div style='max-width: 600px; margin: 0 auto; padding: 20px;'>
        <h2 style='color: #2c3e50;'>–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è #{appealId}</h2>
        <p>–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó –ø—Ä–æ—Ñ–∫–æ–º—É:</p>
        <div style='background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;'>
            <p style='margin: 0;'>{replyText}</p>
        </div>
        <p>–ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –±–æ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–æ–≤–Ω–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è.</p>
        <hr style='border: none; border-top: 1px solid #dee2e6; margin: 30px 0;'>
        <p style='color: #6c757d; font-size: 12px;'>
            –ó –ø–æ–≤–∞–≥–æ—é,<br>
            –°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∏–π –ü—Ä–æ—Ñ–∫–æ–º –í–ù–ú–£
        </p>
    </div>
</body>
</html>";

            return await SendEmailAsync(toEmail, emailSubject, body, cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è #{AppealId} –Ω–∞ {Email}", appealId, toEmail);
            return false;
        }
    }

    public async Task<bool> SendNewsNotificationAsync(string toEmail, string newsTitle, string newsSummary, string newsUrl, CancellationToken cancellationToken = default)
    {
        try
        {
            var subject = $"üì∞ –ù–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞: {newsTitle}";
            
            var variables = _templateService.CreateNewsVariables(
                newsTitle: newsTitle,
                newsSummary: newsSummary,
                newsCategory: "–ó–∞–≥–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏", 
                newsUrl: newsUrl
            );
            
            var body = await _templateService.ProcessTemplateAsync("NewsNotification", variables, cancellationToken);

            return await SendEmailAsync(toEmail, subject, body, cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–Ω—É –Ω–∞ {Email}", toEmail);
            return false;
        }
    }

    public async Task<bool> SendEventNotificationAsync(string toEmail, string eventTitle, DateTime eventDate, string eventLocation, string eventUrl, CancellationToken cancellationToken = default)
    {
        try
        {
            var subject = $"üéâ –ù–æ–≤–∞ –ø–æ–¥—ñ—è: {eventTitle}";
            
            var variables = _templateService.CreateEventVariables(
                eventTitle: eventTitle,
                eventDate: eventDate,
                eventLocation: eventLocation,
                eventCategory: "–ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ–¥—ñ—ó",
                eventUrl: eventUrl
            );
            
            var body = await _templateService.ProcessTemplateAsync("EventNotification", variables, cancellationToken);

            return await SendEmailAsync(toEmail, subject, body, cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–¥—ñ—é –Ω–∞ {Email}", toEmail);
            return false;
        }
    }

    public async Task<bool> SendEventReminderAsync(string toEmail, string eventTitle, DateTime eventDate, string eventLocation, CancellationToken cancellationToken = default)
    {
        try
        {
            var subject = $"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {eventTitle} —Å—å–æ–≥–æ–¥–Ω—ñ";
            
            var variables = _templateService.CreateEventReminderVariables(
                eventTitle: eventTitle,
                eventDate: eventDate,
                eventLocation: eventLocation
            );
            
            var body = await _templateService.ProcessTemplateAsync("EventReminder", variables, cancellationToken);

            return await SendEmailAsync(toEmail, subject, body, cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–æ–¥—ñ—é –Ω–∞ {Email}", toEmail);
            return false;
        }
    }

    public async Task<bool> SendEventRegistrationConfirmationAsync(string toEmail, string eventTitle, DateTime eventDate, string eventLocation, CancellationToken cancellationToken = default)
    {
        try
        {
            var subject = $"‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞: {eventTitle}";
            
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤–∏–π —à–∞–±–ª–æ–Ω –ø–æ–¥—ñ—ó –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º
            var variables = _templateService.CreateEventVariables(
                eventTitle: eventTitle,
                eventDate: eventDate,
                eventLocation: eventLocation,
                eventCategory: "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó",
                eventUrl: _botUrl
            );
            
            var body = await _templateService.ProcessTemplateAsync("EventNotification", variables, cancellationToken);

            return await SendEmailAsync(toEmail, subject, body, cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ {Email}", toEmail);
            return false;
        }
    }

    public async Task<bool> SendTemplateEmailAsync(string toEmail, string templateName, Dictionary<string, object> templateData, CancellationToken cancellationToken = default)
    {
        try
        {
            var subject = templateData.GetValueOrDefault("Subject", "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ StudentUnionBot")?.ToString() ?? "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è";
            
            var body = await _templateService.ProcessTemplateAsync(templateName, templateData, cancellationToken);

            return await SendEmailAsync(toEmail, subject, body, cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —à–∞–±–ª–æ–Ω–Ω–æ–≥–æ email –Ω–∞ {Email}", toEmail);
            return false;
        }
    }

    public async Task<bool> SendBulkEmailAsync(List<string> toEmails, string subject, string htmlBody, CancellationToken cancellationToken = default)
    {
        if (string.IsNullOrWhiteSpace(_smtpUsername) || string.IsNullOrWhiteSpace(_smtpPassword))
        {
            _logger.LogWarning("Email —Å–µ—Ä–≤—ñ—Å –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ (–≤—ñ–¥—Å—É—Ç–Ω—ñ SMTP credentials). –ú–∞—Å–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –Ω–µ –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–∞.");
            return false;
        }

        var successCount = 0;
        var totalCount = toEmails.Count;

        _logger.LogInformation("–ü–æ—á–∞—Ç–æ–∫ –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –¥–ª—è {Count} –∞–¥—Ä–µ—Å–∞—Ç—ñ–≤", totalCount);

        try
        {
            using var client = new SmtpClient(_smtpHost, _smtpPort)
            {
                Credentials = new NetworkCredential(_smtpUsername, _smtpPassword),
                EnableSsl = _enableSsl
            };

            foreach (var email in toEmails)
            {
                try
                {
                    var message = new MailMessage
                    {
                        From = new MailAddress(_fromEmail, _fromName),
                        Subject = subject,
                        Body = htmlBody,
                        IsBodyHtml = true
                    };

                    message.To.Add(email);

                    await client.SendMailAsync(message, cancellationToken);
                    successCount++;

                    _logger.LogDebug("Email –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {Email} ({Current}/{Total})", email, successCount, totalCount);

                    // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
                    await Task.Delay(100, cancellationToken);
                }
                catch (Exception ex)
                {
                    _logger.LogWarning(ex, "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ email –Ω–∞ {Email}", email);
                }
            }

            _logger.LogInformation("–ú–∞—Å–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {Success}/{Total} —É—Å–ø—ñ—à–Ω–∏—Ö –≤—ñ–¥–ø—Ä–∞–≤–æ–∫", successCount, totalCount);
            
            return successCount > 0; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ true, —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω email –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º–∞—Å–æ–≤—ñ–π —Ä–æ–∑—Å–∏–ª—Ü—ñ");
            return false;
        }
    }

    private async Task<bool> SendEmailAsync(string toEmail, string subject, string htmlBody, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(_smtpUsername) || string.IsNullOrWhiteSpace(_smtpPassword))
        {
            _logger.LogWarning("Email —Å–µ—Ä–≤—ñ—Å –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ (–≤—ñ–¥—Å—É—Ç–Ω—ñ SMTP credentials). Email –Ω–µ –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.");
            return false;
        }

        try
        {
            using var client = new SmtpClient(_smtpHost, _smtpPort)
            {
                Credentials = new NetworkCredential(_smtpUsername, _smtpPassword),
                EnableSsl = _enableSsl
            };

            var message = new MailMessage
            {
                From = new MailAddress(_fromEmail, _fromName),
                Subject = subject,
                Body = htmlBody,
                IsBodyHtml = true
            };

            message.To.Add(toEmail);

            await client.SendMailAsync(message, cancellationToken);

            _logger.LogInformation("Email —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {Email} –∑ —Ç–µ–º–æ—é '{Subject}'", toEmail, subject);
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ email –Ω–∞ {Email}", toEmail);
            return false;
        }
    }
}
